///
/// @Generated by Mockolo
///



import AddressBook
import AppSharedProtocols
import Audit
import Authentication
import AuthenticationRider
import BugReporter
import BugReporterCore
import BugReporterExperience
import CommunicationBanner
import Concurrency
import ContactPicker
import Contacts
import CoreLocation
import CoreShared
import DefaultStoreRegistry
import DifferenceKit
import Experimentation
import ExperimentsObjc
import FeatureMonitor
import Feed
import Foundation
import FraudLegacyObjc
import Freddy
import Healthline
import HelixUI
import Home
import HubMessaging
import Intercom
import LocationEditor
import LocationObjc
import LocationServicesCore
import Menu
import NeedleFoundation
import NetworkOrchestratorObjc
import NetworkingObjc
import Octopus
import PaymentFoundation
import PerformanceConfigObjc
import PerformanceSDKObjc
import PermissionManagerCamera
import PermissionManagerContacts
import PermissionManagerPhotoLibrary
import PlaceCache
import PlaceCacheObjc
import PlatformUI
import Presidio
import PresidioFoundation
import PresidioUtilities
import Pricing
import PricingRider
import RamenObjc
import ReachabilityObjc
import Realtime
import RealtimeAudit
import RealtimeAuthentication
import RealtimeCommunicationBanner
import RealtimePayment
import RealtimeRider
import RealtimeSafety
import RequestCore
import Rewards
import RiderAnimation
import RiderIntegration
import RiderMapKit
import RiderMaps
import RxCocoa
import RxOptional
import RxSwift
import Screenflow
import SessionManagerObjc
import SharedUI
import SnapKit
import StateManagement
import Storage
import Swift
import ThemesHelix
import UIKit
import UberPreferences
import UnifiedReportingObjc
import UserAccount


class MutableSelectedProductLeadingButtonStreamingMock: MutableSelectedProductLeadingButtonStreaming {

    
    init() {}
    init(leadingButtonTappedStream: Observable<()> = PublishSubject()) {
        self.leadingButtonTappedStream = leadingButtonTappedStream
    }
        
    var leadingButtonTappedCallCount = 0
    var leadingButtonTappedHandler: (() -> ())?
    func leadingButtonTapped()  {
        leadingButtonTappedCallCount += 1
    
        if let leadingButtonTappedHandler = leadingButtonTappedHandler {
            leadingButtonTappedHandler()
        }
        
    }
    
    private var leadingButtonTappedStreamSubjectKind = 0
    var leadingButtonTappedStreamSubjectSetCallCount = 0
    var leadingButtonTappedStreamSubject = PublishSubject<()>() { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamBehaviorSubject: BehaviorSubject<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamRxSubject: Observable<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    public var leadingButtonTappedStream: Observable<()> {
        get {
            if leadingButtonTappedStreamSubjectKind == 0 {
                return leadingButtonTappedStreamSubject
            } else if leadingButtonTappedStreamSubjectKind == 1 {
                return leadingButtonTappedStreamBehaviorSubject
            } else if leadingButtonTappedStreamSubjectKind == 2 {
                return leadingButtonTappedStreamReplaySubject
            } else {
                return leadingButtonTappedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                leadingButtonTappedStreamSubject = val
                leadingButtonTappedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                leadingButtonTappedStreamBehaviorSubject = val
                leadingButtonTappedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                leadingButtonTappedStreamReplaySubject = val
                leadingButtonTappedStreamSubjectKind = 2
            } else {
                leadingButtonTappedStreamRxSubject = newValue
                leadingButtonTappedStreamSubjectKind = 3
            }
        }
    }
}

class ConfirmationAlertInteractableMock: ConfirmationAlertInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ConfirmationAlertRouting? = nil
    var router: ConfirmationAlertRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
}

class OutOfCoverageInteractableMock: OutOfCoverageInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: OutOfCoverageRouting? = nil
    var router: OutOfCoverageRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
}

class BaseRequestErrorHandlerViewControllableMock: BaseRequestErrorHandlerViewControllable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: BaseRequestErrorHandlerViewControllerListener? = nil
    var listener: BaseRequestErrorHandlerViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class MutableProductSelectionStateStreamingMock: MutableProductSelectionStateStreaming {

    
    init() {}
    init(currentState: ProductSelectionState) {
        self.currentState = currentState
    }
        
    var updateCallCount = 0
    var updateHandler: ((ProductSelectionState) -> ())?
    func update(productSelectionState: ProductSelectionState)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(productSelectionState)
        }
        
    }
    
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ProductSelectionState! 
    var currentState: ProductSelectionState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
}

class ProductSelectionInteractableMock: ProductSelectionInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ProductSelectionRouting? = nil
    var router: ProductSelectionRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var productSelectionListenerSetCallCount = 0
    var underlyingProductSelectionListener: ProductSelectionListener? = nil
    var productSelectionListener: ProductSelectionListener? {
        get {
            return underlyingProductSelectionListener
        }
        set {
            underlyingProductSelectionListener = newValue
            productSelectionListenerSetCallCount += 1
        }
    }
}

public class MutableNoGPSExperienceCanShowCenterMeStreamingMock: MutableNoGPSExperienceCanShowCenterMeStreaming {

    

    public init() {

    }
        
    var updateCallCount = 0
    public var updateHandler: ((Bool) -> ())?
    public func update(canShow: Bool)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(canShow)
        }
        
    }
}

public class MutableRideContextStreamingMock: MutableRideContextStreaming {

    
    public init() {}
    public init(context: Observable<RideContext> = PublishSubject()) {
        self.context = context
    }
        
    var updateCallCount = 0
    public var updateHandler: ((RideContext) -> ())?
    public func update(context: RideContext)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(context)
        }
        
    }
    
    private var contextSubjectKind = 0
    var contextSubjectSetCallCount = 0
    var contextSubject = PublishSubject<RideContext>() { didSet { contextSubjectSetCallCount += 1 } }
    var contextReplaySubject = ReplaySubject<RideContext>.create(bufferSize: 1) { didSet { contextSubjectSetCallCount += 1 } }
    var contextBehaviorSubject: BehaviorSubject<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    var contextRxSubject: Observable<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    public var context: Observable<RideContext> {
        get {
            if contextSubjectKind == 0 {
                return contextSubject
            } else if contextSubjectKind == 1 {
                return contextBehaviorSubject
            } else if contextSubjectKind == 2 {
                return contextReplaySubject
            } else {
                return contextRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RideContext> {
                contextSubject = val
                contextSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RideContext> {
                contextBehaviorSubject = val
                contextSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RideContext> {
                contextReplaySubject = val
                contextSubjectKind = 2
            } else {
                contextRxSubject = newValue
                contextSubjectKind = 3
            }
        }
    }
}

public class SelectedProductPackageStreamingMock: SelectedProductPackageStreaming {

    
    public init() {}
    public init(selectedProductPackage: Observable<ProductPackage> = PublishSubject()) {
        self.selectedProductPackage = selectedProductPackage
    }
        
    private var selectedProductPackageSubjectKind = 0
    var selectedProductPackageSubjectSetCallCount = 0
    var selectedProductPackageSubject = PublishSubject<ProductPackage>() { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageReplaySubject = ReplaySubject<ProductPackage>.create(bufferSize: 1) { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageBehaviorSubject: BehaviorSubject<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageRxSubject: Observable<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    public var selectedProductPackage: Observable<ProductPackage> {
        get {
            if selectedProductPackageSubjectKind == 0 {
                return selectedProductPackageSubject
            } else if selectedProductPackageSubjectKind == 1 {
                return selectedProductPackageBehaviorSubject
            } else if selectedProductPackageSubjectKind == 2 {
                return selectedProductPackageReplaySubject
            } else {
                return selectedProductPackageRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductPackage> {
                selectedProductPackageSubject = val
                selectedProductPackageSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductPackage> {
                selectedProductPackageBehaviorSubject = val
                selectedProductPackageSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductPackage> {
                selectedProductPackageReplaySubject = val
                selectedProductPackageSubjectKind = 2
            } else {
                selectedProductPackageRxSubject = newValue
                selectedProductPackageSubjectKind = 3
            }
        }
    }
}

class MutableCardCollectionViewStreamingMock: MutableCardCollectionViewStreaming {

    

    init() {

    }
        
    var updateCallCount = 0
    var updateHandler: ((CGFloat) -> ())?
    func update(percentExpanded: CGFloat)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(percentExpanded)
        }
        
    }
    
    var updateCardsAreVisibleInBottomNonSafeAreaCallCount = 0
    var updateCardsAreVisibleInBottomNonSafeAreaHandler: ((Bool) -> ())?
    func update(cardsAreVisibleInBottomNonSafeArea: Bool)  {
        updateCardsAreVisibleInBottomNonSafeAreaCallCount += 1
    
        if let updateCardsAreVisibleInBottomNonSafeAreaHandler = updateCardsAreVisibleInBottomNonSafeAreaHandler {
            updateCardsAreVisibleInBottomNonSafeAreaHandler(cardsAreVisibleInBottomNonSafeArea)
        }
        
    }
    
    var updateDidScrollCallCount = 0
    var updateDidScrollHandler: (() -> ())?
    func updateDidScroll()  {
        updateDidScrollCallCount += 1
    
        if let updateDidScrollHandler = updateDidScrollHandler {
            updateDidScrollHandler()
        }
        
    }
}

class SelectedProductConfigurationInteractableMock: SelectedProductConfigurationInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: SelectedProductConfigurationRouting? = nil
    var router: SelectedProductConfigurationRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductConfigurationListener? = nil
    var listener: SelectedProductConfigurationListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class OutOfCoverageRoutingMock: OutOfCoverageRouting {

    
    init() {}
    init(viewController: OutOfCoverageViewControllable = OutOfCoverageViewControllableMock()) {
        self.viewController = viewController
    }
        
    var viewControllerSetCallCount = 0
    var underlyingViewController: OutOfCoverageViewControllable = OutOfCoverageViewControllableMock()
    var viewController: OutOfCoverageViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
}

class ProductSelectionInteractableV2Mock: ProductSelectionInteractableV2 {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ProductSelectionRoutingV2? = nil
    var router: ProductSelectionRoutingV2? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionListenerV2? = nil
    var listener: ProductSelectionListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class RouteableModeHandlerStreamingMock: RouteableModeHandlerStreaming {

    

    init() {

    }
        
    private var routeableModeHandlerSubjectKind = 0
    var routeableModeHandlerSubjectSetCallCount = 0
    var routeableModeHandlerSubject = PublishSubject<RouteableModeHandling>() { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandlerReplaySubject = ReplaySubject<RouteableModeHandling>.create(bufferSize: 1) { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandlerBehaviorSubject: BehaviorSubject<RouteableModeHandling>! { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandlerRxSubject: Observable<RouteableModeHandling>! { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandler: Observable<RouteableModeHandling> {
        get {
            if routeableModeHandlerSubjectKind == 0 {
                return routeableModeHandlerSubject
            } else if routeableModeHandlerSubjectKind == 1 {
                return routeableModeHandlerBehaviorSubject
            } else if routeableModeHandlerSubjectKind == 2 {
                return routeableModeHandlerReplaySubject
            } else {
                return routeableModeHandlerRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouteableModeHandling> {
                routeableModeHandlerSubject = val
                routeableModeHandlerSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouteableModeHandling> {
                routeableModeHandlerBehaviorSubject = val
                routeableModeHandlerSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouteableModeHandling> {
                routeableModeHandlerReplaySubject = val
                routeableModeHandlerSubjectKind = 2
            } else {
                routeableModeHandlerRxSubject = newValue
                routeableModeHandlerSubjectKind = 3
            }
        }
    }
}

class MutableConfirmationStateStreamingMock: MutableConfirmationStateStreaming {

    
    init() {}
    init(currentState: ConfirmationState) {
        self.currentState = currentState
    }
        
    var updateCallCount = 0
    var updateHandler: ((ConfirmationState) -> ())?
    func update(confirmationState: ConfirmationState)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(confirmationState)
        }
        
    }
    
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ConfirmationState! 
    var currentState: ConfirmationState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
}

class ModeInteractableMock: ModeInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ModeRouting? = nil
    var router: ModeRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ModeListener? = nil
    var listener: ModeListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

public class MutableConfirmationNextStepStreamingMock: MutableConfirmationNextStepStreaming {

    

    public init() {

    }
        
    var updateCallCount = 0
    public var updateHandler: ((ConfirmationNextStep) -> ())?
    public func update(nextStep: ConfirmationNextStep)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(nextStep)
        }
        
    }
}

class BaseRequestErrorHandlerInteractableMock: BaseRequestErrorHandlerInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: RequestErrorHandlerRouting? = nil
    var router: RequestErrorHandlerRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
}

class MenuCellBadgingMock: MenuCellBadging {

    
    init() {}
    init(shouldBadge: Bool = false, badgeView: ThemeableDotBadge) {
        self.shouldBadge = shouldBadge
        self.badgeView = badgeView
    }
        
    var shouldBadgeSetCallCount = 0
    var underlyingShouldBadge: Bool = false
    var shouldBadge: Bool {
        get {
            return underlyingShouldBadge
        }
        set {
            underlyingShouldBadge = newValue
            shouldBadgeSetCallCount += 1
        }
    }
    
    var badgeViewSetCallCount = 0
    var underlyingBadgeView: ThemeableDotBadge! 
    var badgeView: ThemeableDotBadge {
        get {
            return underlyingBadgeView
        }
        set {
            underlyingBadgeView = newValue
            badgeViewSetCallCount += 1
        }
    }
}

class DestinationPromptInteractableMock: DestinationPromptInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: DestinationPromptRouting? = nil
    var router: DestinationPromptRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: LocationEditorEntryListener? = nil
    var listener: LocationEditorEntryListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class DualLocationEditorEntryInteractableMock: DualLocationEditorEntryInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: DualLocationEditorEntryRouting? = nil
    var router: DualLocationEditorEntryRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: LocationEditorEntryListener? = nil
    var listener: LocationEditorEntryListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class RequestFilterProductExclusionWorkingMock: RequestFilterProductExclusionWorking {

    

    init() {

    }
        
    var setVehicleViewUUIDsExcludedFromFilteringCallCount = 0
    var setVehicleViewUUIDsExcludedFromFilteringHandler: (([String]) -> ())?
    func setVehicleViewUUIDsExcludedFromFiltering(_ vehicleViewUUIDs: [String])  {
        setVehicleViewUUIDsExcludedFromFilteringCallCount += 1
    
        if let setVehicleViewUUIDsExcludedFromFilteringHandler = setVehicleViewUUIDsExcludedFromFilteringHandler {
            setVehicleViewUUIDsExcludedFromFilteringHandler(vehicleViewUUIDs)
        }
        
    }
}

class SelectedProductInteractableMock: SelectedProductInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: SelectedProductRouting? = nil
    var router: SelectedProductRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductListener? = nil
    var listener: SelectedProductListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var productItemIdSetCallCount = 0
    var underlyingProductItemId: ProductItemId? = nil
    var productItemId: ProductItemId? {
        get {
            return underlyingProductItemId
        }
        set {
            underlyingProductItemId = newValue
            productItemIdSetCallCount += 1
        }
    }
    
    var productConfigurationDidUpdateCallCount = 0
    var productConfigurationDidUpdateHandler: ((CoreShared.Product) -> ())?
    func productConfigurationDidUpdate(product: CoreShared.Product)  {
        productConfigurationDidUpdateCallCount += 1
    
        if let productConfigurationDidUpdateHandler = productConfigurationDidUpdateHandler {
            productConfigurationDidUpdateHandler(product)
        }
        
    }
}

class TripDetailsInteractableMock: TripDetailsInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: TripDetailsRouting? = nil
    var router: TripDetailsRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: TripDetailsListener? = nil
    var listener: TripDetailsListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class BaseRequestErrorHandlerPresentableMock: BaseRequestErrorHandlerPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: BaseRequestErrorHandlerPresenterListener? = nil
    var listener: BaseRequestErrorHandlerPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class RequestFilterWorkingMock: RequestFilterWorking {

    
    init() {}
    init(filters: Observable<[ProductFiltering]> = PublishSubject()) {
        self.filters = filters
    }
        
    private var filtersSubjectKind = 0
    var filtersSubjectSetCallCount = 0
    var filtersSubject = PublishSubject<[ProductFiltering]>() { didSet { filtersSubjectSetCallCount += 1 } }
    var filtersReplaySubject = ReplaySubject<[ProductFiltering]>.create(bufferSize: 1) { didSet { filtersSubjectSetCallCount += 1 } }
    var filtersBehaviorSubject: BehaviorSubject<[ProductFiltering]>! { didSet { filtersSubjectSetCallCount += 1 } }
    var filtersRxSubject: Observable<[ProductFiltering]>! { didSet { filtersSubjectSetCallCount += 1 } }
    var filters: Observable<[ProductFiltering]> {
        get {
            if filtersSubjectKind == 0 {
                return filtersSubject
            } else if filtersSubjectKind == 1 {
                return filtersBehaviorSubject
            } else if filtersSubjectKind == 2 {
                return filtersReplaySubject
            } else {
                return filtersRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[ProductFiltering]> {
                filtersSubject = val
                filtersSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[ProductFiltering]> {
                filtersBehaviorSubject = val
                filtersSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[ProductFiltering]> {
                filtersReplaySubject = val
                filtersSubjectKind = 2
            } else {
                filtersRxSubject = newValue
                filtersSubjectKind = 3
            }
        }
    }
    
    var resetFiltersCallCount = 0
    var resetFiltersHandler: (() -> ())?
    func resetFilters()  {
        resetFiltersCallCount += 1
    
        if let resetFiltersHandler = resetFiltersHandler {
            resetFiltersHandler()
        }
        
    }
    
    var filterSingleVehicleViewIdCallCount = 0
    var filterSingleVehicleViewIdHandler: ((VehicleViewId) -> ())?
    func filterSingleVehicleViewId(vehicleViewId: VehicleViewId)  {
        filterSingleVehicleViewIdCallCount += 1
    
        if let filterSingleVehicleViewIdHandler = filterSingleVehicleViewIdHandler {
            filterSingleVehicleViewIdHandler(vehicleViewId)
        }
        
    }
    
    var filterMultipleVehicleViewIdsCallCount = 0
    var filterMultipleVehicleViewIdsHandler: (([VehicleViewId]) -> ())?
    func filterMultipleVehicleViewIds(vehicleViewIds: [VehicleViewId])  {
        filterMultipleVehicleViewIdsCallCount += 1
    
        if let filterMultipleVehicleViewIdsHandler = filterMultipleVehicleViewIdsHandler {
            filterMultipleVehicleViewIdsHandler(vehicleViewIds)
        }
        
    }
}

class ConfirmationAlertRoutingMock: ConfirmationAlertRouting {

    
    init() {}
    init(viewController: ConfirmationAlertViewControllable = ConfirmationAlertViewControllableMock()) {
        self.viewController = viewController
    }
        
    var viewControllerSetCallCount = 0
    var underlyingViewController: ConfirmationAlertViewControllable = ConfirmationAlertViewControllableMock()
    var viewController: ConfirmationAlertViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
}

class ProductOptionsViewControllableMock: ProductOptionsViewControllable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductOptionsViewControllerListener? = nil
    var listener: ProductOptionsViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showButtonViewControllersCallCount = 0
    var showButtonViewControllersHandler: (([ViewControllable], [ViewControllable]) -> ())?
    func showButtonViewControllers(leadingViewControllers: [ViewControllable], trailingViewControllers: [ViewControllable])  {
        showButtonViewControllersCallCount += 1
    
        if let showButtonViewControllersHandler = showButtonViewControllersHandler {
            showButtonViewControllersHandler(leadingViewControllers, trailingViewControllers)
        }
        
    }
}

class PlusOnePresenterListenerMock: PlusOnePresenterListener {

    

    init() {

    }
        
    var abortPlusOneCallCount = 0
    var abortPlusOneHandler: (() -> ())?
    func abortPlusOne()  {
        abortPlusOneCallCount += 1
    
        if let abortPlusOneHandler = abortPlusOneHandler {
            abortPlusOneHandler()
        }
        
    }
}

class SelectedProductConfigurationManagingMock: SelectedProductConfigurationManaging {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductConfigurationManagerListener? = nil
    var listener: SelectedProductConfigurationManagerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateProductPackageCallCount = 0
    var updateProductPackageHandler: ((ProductPackage) -> ())?
    func updateProductPackage(_ productPackage: ProductPackage)  {
        updateProductPackageCallCount += 1
    
        if let updateProductPackageHandler = updateProductPackageHandler {
            updateProductPackageHandler(productPackage)
        }
        
    }
    
    var determineDefaultProductCallCount = 0
    var determineDefaultProductHandler: (() -> (CoreShared.Product?))?
    func determineDefaultProduct() -> CoreShared.Product? {
        determineDefaultProductCallCount += 1
    
        if let determineDefaultProductHandler = determineDefaultProductHandler {
            return determineDefaultProductHandler()
        }
        return nil
    }
    
    var updateConfigurationCallCount = 0
    var updateConfigurationHandler: ((ProductConfigurationRowData, ProductConfigurationValue) -> ())?
    func updateConfiguration(rowData: ProductConfigurationRowData, newValue: ProductConfigurationValue)  {
        updateConfigurationCallCount += 1
    
        if let updateConfigurationHandler = updateConfigurationHandler {
            updateConfigurationHandler(rowData, newValue)
        }
        
    }
}

class TripDetailsRoutingMock: TripDetailsRouting {

    
    init() {}
    init(sectionProvider: TripDetailsSectionProviding = TripDetailsSectionProvidingMock()) {
        self.sectionProvider = sectionProvider
    }
        
    var sectionProviderSetCallCount = 0
    var underlyingSectionProvider: TripDetailsSectionProviding = TripDetailsSectionProvidingMock()
    var sectionProvider: TripDetailsSectionProviding {
        get {
            return underlyingSectionProvider
        }
        set {
            underlyingSectionProvider = newValue
            sectionProviderSetCallCount += 1
        }
    }
    
    var routeToRowsCallCount = 0
    var routeToRowsHandler: (([TripDetailsRow]) -> ())?
    func routeToRows(_ rows: [TripDetailsRow])  {
        routeToRowsCallCount += 1
    
        if let routeToRowsHandler = routeToRowsHandler {
            routeToRowsHandler(rows)
        }
        
    }
}

class ProductBadgeNotificationStateStreamingMock: ProductBadgeNotificationStateStreaming {

    
    init() {}
    init(state: Observable<ProductBadgeNotificationState> = PublishSubject()) {
        self.state = state
    }
        
    private var stateSubjectKind = 0
    var stateSubjectSetCallCount = 0
    var stateSubject = PublishSubject<ProductBadgeNotificationState>() { didSet { stateSubjectSetCallCount += 1 } }
    var stateReplaySubject = ReplaySubject<ProductBadgeNotificationState>.create(bufferSize: 1) { didSet { stateSubjectSetCallCount += 1 } }
    var stateBehaviorSubject: BehaviorSubject<ProductBadgeNotificationState>! { didSet { stateSubjectSetCallCount += 1 } }
    var stateRxSubject: Observable<ProductBadgeNotificationState>! { didSet { stateSubjectSetCallCount += 1 } }
    var state: Observable<ProductBadgeNotificationState> {
        get {
            if stateSubjectKind == 0 {
                return stateSubject
            } else if stateSubjectKind == 1 {
                return stateBehaviorSubject
            } else if stateSubjectKind == 2 {
                return stateReplaySubject
            } else {
                return stateRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductBadgeNotificationState> {
                stateSubject = val
                stateSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductBadgeNotificationState> {
                stateBehaviorSubject = val
                stateSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductBadgeNotificationState> {
                stateReplaySubject = val
                stateSubjectKind = 2
            } else {
                stateRxSubject = newValue
                stateSubjectKind = 3
            }
        }
    }
}

public class ProductPackageStreamingMock: ProductPackageStreaming {

    
    public init() {}
    public init(productPackages: Observable<[ProductPackage]> = PublishSubject()) {
        self.productPackages = productPackages
    }
        
    private var productPackagesSubjectKind = 0
    var productPackagesSubjectSetCallCount = 0
    var productPackagesSubject = PublishSubject<[ProductPackage]>() { didSet { productPackagesSubjectSetCallCount += 1 } }
    var productPackagesReplaySubject = ReplaySubject<[ProductPackage]>.create(bufferSize: 1) { didSet { productPackagesSubjectSetCallCount += 1 } }
    var productPackagesBehaviorSubject: BehaviorSubject<[ProductPackage]>! { didSet { productPackagesSubjectSetCallCount += 1 } }
    var productPackagesRxSubject: Observable<[ProductPackage]>! { didSet { productPackagesSubjectSetCallCount += 1 } }
    public var productPackages: Observable<[ProductPackage]> {
        get {
            if productPackagesSubjectKind == 0 {
                return productPackagesSubject
            } else if productPackagesSubjectKind == 1 {
                return productPackagesBehaviorSubject
            } else if productPackagesSubjectKind == 2 {
                return productPackagesReplaySubject
            } else {
                return productPackagesRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[ProductPackage]> {
                productPackagesSubject = val
                productPackagesSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[ProductPackage]> {
                productPackagesBehaviorSubject = val
                productPackagesSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[ProductPackage]> {
                productPackagesReplaySubject = val
                productPackagesSubjectKind = 2
            } else {
                productPackagesRxSubject = newValue
                productPackagesSubjectKind = 3
            }
        }
    }
}

class ConfirmationInteractableV2Mock: ConfirmationInteractableV2 {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ConfirmationRoutingV2? = nil
    var router: ConfirmationRoutingV2? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationListenerV2? = nil
    var listener: ConfirmationListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateSelectedProductAnchorPointValuesCallCount = 0
    var updateSelectedProductAnchorPointValuesHandler: (() -> ())?
    func updateSelectedProductAnchorPointValues()  {
        updateSelectedProductAnchorPointValuesCallCount += 1
    
        if let updateSelectedProductAnchorPointValuesHandler = updateSelectedProductAnchorPointValuesHandler {
            updateSelectedProductAnchorPointValuesHandler()
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
    
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductItemId, Bool) -> ())?
    func selectProduct(productItemId: ProductItemId, shouldRouteToSelectedProduct: Bool)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(productItemId, shouldRouteToSelectedProduct)
        }
        
    }
    
    var updateProductSelectionViewStateTransitionProgressCallCount = 0
    var updateProductSelectionViewStateTransitionProgressHandler: (() -> ())?
    func updateProductSelectionViewStateTransitionProgress()  {
        updateProductSelectionViewStateTransitionProgressCallCount += 1
    
        if let updateProductSelectionViewStateTransitionProgressHandler = updateProductSelectionViewStateTransitionProgressHandler {
            updateProductSelectionViewStateTransitionProgressHandler()
        }
        
    }
    
    var updateProductSelectionAnchorPointValuesCallCount = 0
    var updateProductSelectionAnchorPointValuesHandler: (() -> ())?
    func updateProductSelectionAnchorPointValues()  {
        updateProductSelectionAnchorPointValuesCallCount += 1
    
        if let updateProductSelectionAnchorPointValuesHandler = updateProductSelectionAnchorPointValuesHandler {
            updateProductSelectionAnchorPointValuesHandler()
        }
        
    }
}

class MainViewControllableMock: MainViewControllable {

    
    init() {}
    init(isShowingNetworkError: Bool = false) {
        self.isShowingNetworkError = isShowingNetworkError
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MainViewControllerListener? = nil
    var listener: MainViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showMenuCallCount = 0
    var showMenuHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
    func showMenu(viewController: UIViewController, animated: Bool, completion: (() -> ())?)  {
        showMenuCallCount += 1
    
        if let showMenuHandler = showMenuHandler {
            showMenuHandler(viewController, animated, completion)
        }
        
    }
    
    var embedModeNavigationCallCount = 0
    public var embedModeNavigationHandler: ((ModeNavigationViewControllable) -> ())?
    public func embedModeNavigation(viewController: ModeNavigationViewControllable)  {
        embedModeNavigationCallCount += 1
    
        if let embedModeNavigationHandler = embedModeNavigationHandler {
            embedModeNavigationHandler(viewController)
        }
        
    }
    
    var hideMenuCallCount = 0
    var hideMenuHandler: ((UIViewController, (() -> ())?) -> ())?
    func hideMenu(viewController: UIViewController, completion: (() -> ())?)  {
        hideMenuCallCount += 1
    
        if let hideMenuHandler = hideMenuHandler {
            hideMenuHandler(viewController, completion)
        }
        
    }
    
    var removeCurrentModeNavigationCallCount = 0
    public var removeCurrentModeNavigationHandler: (() -> ())?
    public func removeCurrentModeNavigation()  {
        removeCurrentModeNavigationCallCount += 1
    
        if let removeCurrentModeNavigationHandler = removeCurrentModeNavigationHandler {
            removeCurrentModeNavigationHandler()
        }
        
    }
    
    var showFullScreenCallCount = 0
    var showFullScreenHandler: ((UIViewController, NavigationViewType) -> ())?
    func showFullScreen(viewController: UIViewController, inNavigationView: NavigationViewType)  {
        showFullScreenCallCount += 1
    
        if let showFullScreenHandler = showFullScreenHandler {
            showFullScreenHandler(viewController, inNavigationView)
        }
        
    }
    
    var hideFullScreenCallCount = 0
    var hideFullScreenHandler: ((UIViewController, (() -> ())?) -> ())?
    func hideFullScreen(viewController: UIViewController, completion: (() -> ())?)  {
        hideFullScreenCallCount += 1
    
        if let hideFullScreenHandler = hideFullScreenHandler {
            hideFullScreenHandler(viewController, completion)
        }
        
    }
    
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
    
    var isShowingNetworkErrorSetCallCount = 0
    var underlyingIsShowingNetworkError: Bool = false
    var isShowingNetworkError: Bool {
        get {
            return underlyingIsShowingNetworkError
        }
        set {
            underlyingIsShowingNetworkError = newValue
            isShowingNetworkErrorSetCallCount += 1
        }
    }
}

class TripHeaderRootInteractableMock: TripHeaderRootInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: TripHeaderRootRouting? = nil
    var router: TripHeaderRootRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: TripHeaderRootListener? = nil
    var listener: TripHeaderRootListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class ProductOptionsRoutingMock: ProductOptionsRouting {

    
    init() {}
    init(interactor: ProductOptionsInteractable = ProductOptionsInteractableMock(), viewController: ProductOptionsViewControllable = ProductOptionsViewControllableMock()) {
        self.interactor = interactor
        self.viewController = viewController
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ProductOptionsInteractable = ProductOptionsInteractableMock()
    var interactor: ProductOptionsInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: ProductOptionsViewControllable = ProductOptionsViewControllableMock()
    var viewController: ProductOptionsViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
    
    var productOptionsItemPresentViewListenerSetCallCount = 0
    var underlyingProductOptionsItemPresentViewListener: ProductOptionsItemPresentViewListener? = nil
    var productOptionsItemPresentViewListener: ProductOptionsItemPresentViewListener? {
        get {
            return underlyingProductOptionsItemPresentViewListener
        }
        set {
            underlyingProductOptionsItemPresentViewListener = newValue
            productOptionsItemPresentViewListenerSetCallCount += 1
        }
    }
    
    var routeToOptionItemsCallCount = 0
    var routeToOptionItemsHandler: (() -> ())?
    func routeToOptionItems()  {
        routeToOptionItemsCallCount += 1
    
        if let routeToOptionItemsHandler = routeToOptionItemsHandler {
            routeToOptionItemsHandler()
        }
        
    }
}

class RequestStateManagerMock: RequestStateManager {

    

    init() {

    }
        
    var wantCallCount = 0
    var wantHandler: ((RequestState) -> ())?
    func want(state: RequestState)  {
        wantCallCount += 1
    
        if let wantHandler = wantHandler {
            wantHandler(state)
        }
        
    }
    
    var wantLastNonTransientStateCallCount = 0
    var wantLastNonTransientStateHandler: (() -> ())?
    func wantLastNonTransientState()  {
        wantLastNonTransientStateCallCount += 1
    
        if let wantLastNonTransientStateHandler = wantLastNonTransientStateHandler {
            wantLastNonTransientStateHandler()
        }
        
    }
}

class TripDetailsRowSlotConfigWorkingMock: TripDetailsRowSlotConfigWorking {

    
    init() {}
    init(slotConfig: Observable<TripDetailsRowSlotConfig> = PublishSubject()) {
        self.slotConfig = slotConfig
    }
        
    private var slotConfigSubjectKind = 0
    var slotConfigSubjectSetCallCount = 0
    var slotConfigSubject = PublishSubject<TripDetailsRowSlotConfig>() { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfigReplaySubject = ReplaySubject<TripDetailsRowSlotConfig>.create(bufferSize: 1) { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfigBehaviorSubject: BehaviorSubject<TripDetailsRowSlotConfig>! { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfigRxSubject: Observable<TripDetailsRowSlotConfig>! { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfig: Observable<TripDetailsRowSlotConfig> {
        get {
            if slotConfigSubjectKind == 0 {
                return slotConfigSubject
            } else if slotConfigSubjectKind == 1 {
                return slotConfigBehaviorSubject
            } else if slotConfigSubjectKind == 2 {
                return slotConfigReplaySubject
            } else {
                return slotConfigRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<TripDetailsRowSlotConfig> {
                slotConfigSubject = val
                slotConfigSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<TripDetailsRowSlotConfig> {
                slotConfigBehaviorSubject = val
                slotConfigSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<TripDetailsRowSlotConfig> {
                slotConfigReplaySubject = val
                slotConfigSubjectKind = 2
            } else {
                slotConfigRxSubject = newValue
                slotConfigSubjectKind = 3
            }
        }
    }
}

public class RiderProductConfigurationDataManagingMock: RiderProductConfigurationDataManaging {

    
    public init() {}
    public init(productConfigurationDataStream: Observable<RidersProductConfigurationData?> = PublishSubject()) {
        self.productConfigurationDataStream = productConfigurationDataStream
    }
        
    private var productConfigurationDataStreamSubjectKind = 0
    var productConfigurationDataStreamSubjectSetCallCount = 0
    var productConfigurationDataStreamSubject = PublishSubject<RidersProductConfigurationData?>() { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    var productConfigurationDataStreamReplaySubject = ReplaySubject<RidersProductConfigurationData?>.create(bufferSize: 1) { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    var productConfigurationDataStreamBehaviorSubject: BehaviorSubject<RidersProductConfigurationData?>! { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    var productConfigurationDataStreamRxSubject: Observable<RidersProductConfigurationData?>! { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    public var productConfigurationDataStream: Observable<RidersProductConfigurationData?> {
        get {
            if productConfigurationDataStreamSubjectKind == 0 {
                return productConfigurationDataStreamSubject
            } else if productConfigurationDataStreamSubjectKind == 1 {
                return productConfigurationDataStreamBehaviorSubject
            } else if productConfigurationDataStreamSubjectKind == 2 {
                return productConfigurationDataStreamReplaySubject
            } else {
                return productConfigurationDataStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RidersProductConfigurationData?> {
                productConfigurationDataStreamSubject = val
                productConfigurationDataStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RidersProductConfigurationData?> {
                productConfigurationDataStreamBehaviorSubject = val
                productConfigurationDataStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RidersProductConfigurationData?> {
                productConfigurationDataStreamReplaySubject = val
                productConfigurationDataStreamSubjectKind = 2
            } else {
                productConfigurationDataStreamRxSubject = newValue
                productConfigurationDataStreamSubjectKind = 3
            }
        }
    }
}

class MutableTripViewPositionStreamingMock: MutableTripViewPositionStreaming {

    

    init() {

    }
        
    var updateCallCount = 0
    var updateHandler: ((TripViewPositioning) -> ())?
    func update(tripViewPosition: TripViewPositioning)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(tripViewPosition)
        }
        
    }
}

class ModeRoutingMock: ModeRouting {

    
    init() {}
    init(interactor: ModeInteractable = ModeInteractableMock(), modeActionableItem: ModeActionableItem) {
        self.interactor = interactor
        self.modeActionableItem = modeActionableItem
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ModeInteractable = ModeInteractableMock()
    var interactor: ModeInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var modeActionableItemSetCallCount = 0
    var underlyingModeActionableItem: ModeActionableItem! 
    var modeActionableItem: ModeActionableItem {
        get {
            return underlyingModeActionableItem
        }
        set {
            underlyingModeActionableItem = newValue
            modeActionableItemSetCallCount += 1
        }
    }
    
    var viewListenerSetCallCount = 0
    var underlyingViewListener: ModeViewListener? = nil
    var viewListener: ModeViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
    
    var routeToModeNavigationCallCount = 0
    var routeToModeNavigationHandler: ((ModeNavigationBuildable) -> ())?
    func routeToModeNavigation(builder: ModeNavigationBuildable)  {
        routeToModeNavigationCallCount += 1
    
        if let routeToModeNavigationHandler = routeToModeNavigationHandler {
            routeToModeNavigationHandler(builder)
        }
        
    }
    
    var routeFromModeNavigationCallCount = 0
    var routeFromModeNavigationHandler: (() -> ())?
    func routeFromModeNavigation()  {
        routeFromModeNavigationCallCount += 1
    
        if let routeFromModeNavigationHandler = routeFromModeNavigationHandler {
            routeFromModeNavigationHandler()
        }
        
    }
}

class PlusOneRoutingMock: PlusOneRouting {

    
    init() {}
    init(plusOneInteractor: PlusOneInteractableCommon = PlusOneInteractableCommonMock()) {
        self.plusOneInteractor = plusOneInteractor
    }
        
    var plusOneInteractorSetCallCount = 0
    var underlyingPlusOneInteractor: PlusOneInteractableCommon = PlusOneInteractableCommonMock()
    var plusOneInteractor: PlusOneInteractableCommon {
        get {
            return underlyingPlusOneInteractor
        }
        set {
            underlyingPlusOneInteractor = newValue
            plusOneInteractorSetCallCount += 1
        }
    }
    
    var routeToCallCount = 0
    var routeToHandler: ((PlusOneStepBuildable) -> ())?
    func routeTo(nextBuilder: PlusOneStepBuildable)  {
        routeToCallCount += 1
    
        if let routeToHandler = routeToHandler {
            routeToHandler(nextBuilder)
        }
        
    }
    
    var routeAwayCallCount = 0
    var routeAwayHandler: ((Bool, Bool, (() -> ())?) -> ())?
    func routeAway(hasNextStep: Bool, animated: Bool, completion: (() -> ())?)  {
        routeAwayCallCount += 1
    
        if let routeAwayHandler = routeAwayHandler {
            routeAwayHandler(hasNextStep, animated, completion)
        }
        
    }
    
    var routeToStepMapCallCount = 0
    var routeToStepMapHandler: ((PlusOneStepMapRouting) -> ())?
    func routeToStepMap(router: PlusOneStepMapRouting)  {
        routeToStepMapCallCount += 1
    
        if let routeToStepMapHandler = routeToStepMapHandler {
            routeToStepMapHandler(router)
        }
        
    }
}

class ProductFilterManagingMock: ProductFilterManaging {

    
    init() {}
    init(filteringChanged: Observable<()> = PublishSubject()) {
        self.filteringChanged = filteringChanged
    }
        
    private var filteringChangedSubjectKind = 0
    var filteringChangedSubjectSetCallCount = 0
    var filteringChangedSubject = PublishSubject<()>() { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChangedReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChangedBehaviorSubject: BehaviorSubject<()>! { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChangedRxSubject: Observable<()>! { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChanged: Observable<()> {
        get {
            if filteringChangedSubjectKind == 0 {
                return filteringChangedSubject
            } else if filteringChangedSubjectKind == 1 {
                return filteringChangedBehaviorSubject
            } else if filteringChangedSubjectKind == 2 {
                return filteringChangedReplaySubject
            } else {
                return filteringChangedRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                filteringChangedSubject = val
                filteringChangedSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                filteringChangedBehaviorSubject = val
                filteringChangedSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                filteringChangedReplaySubject = val
                filteringChangedSubjectKind = 2
            } else {
                filteringChangedRxSubject = newValue
                filteringChangedSubjectKind = 3
            }
        }
    }
}

class ProductToastViewListenerMock: ProductToastViewListener {

    

    init() {

    }
        
    var bindFareCallCount = 0
    var bindFareHandler: ((FareBindingRequesting, PricingLabel) -> ())?
    func bindFare(fareRequest: FareBindingRequesting, target: PricingLabel)  {
        bindFareCallCount += 1
    
        if let bindFareHandler = bindFareHandler {
            bindFareHandler(fareRequest, target)
        }
        
    }
}

class ProductSelectionObservabilityManagingMock: ProductSelectionObservabilityManaging {

    

    init() {

    }
        
    var viewListenerSetCallCount = 0
    var underlyingViewListener: ProductSelectionObservabilityManagerViewListener? = nil
    var viewListener: ProductSelectionObservabilityManagerViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
    
    var trackCellSelectedCallCount = 0
    var trackCellSelectedHandler: ((IndexPath, RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackCellSelected(indexPath: IndexPath, responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackCellSelectedCallCount += 1
    
        if let trackCellSelectedHandler = trackCellSelectedHandler {
            trackCellSelectedHandler(indexPath, responseMetadata)
        }
        
    }
    
    var trackCellDisplayedCallCount = 0
    var trackCellDisplayedHandler: ((IndexPath, RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackCellDisplayed(indexPath: IndexPath, responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackCellDisplayedCallCount += 1
    
        if let trackCellDisplayedHandler = trackCellDisplayedHandler {
            trackCellDisplayedHandler(indexPath, responseMetadata)
        }
        
    }
    
    var trackCellWillHighlightCallCount = 0
    var trackCellWillHighlightHandler: ((IndexPath) -> ())?
    func trackCellWillHighlight(indexPath: IndexPath)  {
        trackCellWillHighlightCallCount += 1
    
        if let trackCellWillHighlightHandler = trackCellWillHighlightHandler {
            trackCellWillHighlightHandler(indexPath)
        }
        
    }
    
    var trackCellHighlightedCallCount = 0
    var trackCellHighlightedHandler: ((IndexPath) -> ())?
    func trackCellHighlighted(indexPath: IndexPath)  {
        trackCellHighlightedCallCount += 1
    
        if let trackCellHighlightedHandler = trackCellHighlightedHandler {
            trackCellHighlightedHandler(indexPath)
        }
        
    }
    
    var trackCellsUpdatedCallCount = 0
    var trackCellsUpdatedHandler: (([CoreShared.Product], RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackCellsUpdated(with products: [CoreShared.Product], responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackCellsUpdatedCallCount += 1
    
        if let trackCellsUpdatedHandler = trackCellsUpdatedHandler {
            trackCellsUpdatedHandler(products, responseMetadata)
        }
        
    }
    
    var trackStateChangeCallCount = 0
    var trackStateChangeHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackStateChange(responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackStateChangeCallCount += 1
    
        if let trackStateChangeHandler = trackStateChangeHandler {
            trackStateChangeHandler(responseMetadata)
        }
        
    }
    
    var trackViewDidLoadCallCount = 0
    var trackViewDidLoadHandler: (() -> ())?
    func trackViewDidLoad()  {
        trackViewDidLoadCallCount += 1
    
        if let trackViewDidLoadHandler = trackViewDidLoadHandler {
            trackViewDidLoadHandler()
        }
        
    }
    
    var trackViewDidAppearCallCount = 0
    var trackViewDidAppearHandler: (() -> ())?
    func trackViewDidAppear()  {
        trackViewDidAppearCallCount += 1
    
        if let trackViewDidAppearHandler = trackViewDidAppearHandler {
            trackViewDidAppearHandler()
        }
        
    }
    
    var trackLeadingButtonTappedCallCount = 0
    var trackLeadingButtonTappedHandler: (() -> ())?
    func trackLeadingButtonTapped()  {
        trackLeadingButtonTappedCallCount += 1
    
        if let trackLeadingButtonTappedHandler = trackLeadingButtonTappedHandler {
            trackLeadingButtonTappedHandler()
        }
        
    }
    
    var trackRecommendedListFinishShowingCallCount = 0
    var trackRecommendedListFinishShowingHandler: (() -> ())?
    func trackRecommendedListFinishShowing()  {
        trackRecommendedListFinishShowingCallCount += 1
    
        if let trackRecommendedListFinishShowingHandler = trackRecommendedListFinishShowingHandler {
            trackRecommendedListFinishShowingHandler()
        }
        
    }
    
    var trackProductSelectedCallCount = 0
    var trackProductSelectedHandler: (() -> ())?
    func trackProductSelected()  {
        trackProductSelectedCallCount += 1
    
        if let trackProductSelectedHandler = trackProductSelectedHandler {
            trackProductSelectedHandler()
        }
        
    }
    
    var trackProductsUpdatedCallCount = 0
    var trackProductsUpdatedHandler: (() -> ())?
    func trackProductsUpdated()  {
        trackProductsUpdatedCallCount += 1
    
        if let trackProductsUpdatedHandler = trackProductsUpdatedHandler {
            trackProductsUpdatedHandler()
        }
        
    }
    
    var trackTapToFocusViewCallCount = 0
    var trackTapToFocusViewHandler: (() -> ())?
    func trackTapToFocusView()  {
        trackTapToFocusViewCallCount += 1
    
        if let trackTapToFocusViewHandler = trackTapToFocusViewHandler {
            trackTapToFocusViewHandler()
        }
        
    }
}

class BaseRequestErrorHandlerViewControllerListenerMock: BaseRequestErrorHandlerViewControllerListener {

    

    init() {

    }
        
    var didTapDismissCallCount = 0
    var didTapDismissHandler: (() -> ())?
    func didTapDismiss()  {
        didTapDismissCallCount += 1
    
        if let didTapDismissHandler = didTapDismissHandler {
            didTapDismissHandler()
        }
        
    }
}

class MenuItemsWorkingMock: MenuItemsWorking {

    

    init() {

    }
        
    private var menuItemsStreamSubjectKind = 0
    var menuItemsStreamSubjectSetCallCount = 0
    var menuItemsStreamSubject = PublishSubject<[MenuItemPresentingInternal]>() { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStreamReplaySubject = ReplaySubject<[MenuItemPresentingInternal]>.create(bufferSize: 1) { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStreamBehaviorSubject: BehaviorSubject<[MenuItemPresentingInternal]>! { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStreamRxSubject: Observable<[MenuItemPresentingInternal]>! { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStream: Observable<[MenuItemPresentingInternal]>? {
        get {
            if menuItemsStreamSubjectKind == 0 {
                return menuItemsStreamSubject
            } else if menuItemsStreamSubjectKind == 1 {
                return menuItemsStreamBehaviorSubject
            } else if menuItemsStreamSubjectKind == 2 {
                return menuItemsStreamReplaySubject
            } else {
                return menuItemsStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[MenuItemPresentingInternal]> {
                menuItemsStreamSubject = val
                menuItemsStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[MenuItemPresentingInternal]> {
                menuItemsStreamBehaviorSubject = val
                menuItemsStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[MenuItemPresentingInternal]> {
                menuItemsStreamReplaySubject = val
                menuItemsStreamSubjectKind = 2
            } else {
                menuItemsStreamRxSubject = newValue
                menuItemsStreamSubjectKind = 3
            }
        }
    }
}

class PlusOneInteractableMock: PlusOneInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: PlusOneRouting? = nil
    var router: PlusOneRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var plusOneListenerSetCallCount = 0
    var underlyingPlusOneListener: PlusOneInteractorListener? = nil
    var plusOneListener: PlusOneInteractorListener? {
        get {
            return underlyingPlusOneListener
        }
        set {
            underlyingPlusOneListener = newValue
            plusOneListenerSetCallCount += 1
        }
    }
}

class ProductSelectionCollectionViewProviderV2ListenerMock: ProductSelectionCollectionViewProviderV2Listener {

    

    init() {

    }
        
    var categoryTitleCallCount = 0
    var categoryTitleHandler: ((Int) -> (String))?
    func categoryTitle(for section: Int) -> String {
        categoryTitleCallCount += 1
    
        if let categoryTitleHandler = categoryTitleHandler {
            return categoryTitleHandler(section)
        }
        return ""
    }
    
    var numberOfProductsCallCount = 0
    var numberOfProductsHandler: ((Int) -> (Int))?
    func numberOfProducts(inSection section: Int) -> Int {
        numberOfProductsCallCount += 1
    
        if let numberOfProductsHandler = numberOfProductsHandler {
            return numberOfProductsHandler(section)
        }
        return 0
    }
    
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: ((IndexPath) -> (ProductSelectionCellViewModel?))?
    func viewModelForCell(at indexPath: IndexPath) -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler(indexPath)
        }
        return nil
    }
    
    var willHighlightCellCallCount = 0
    var willHighlightCellHandler: ((IndexPath) -> ())?
    func willHighlightCell(at indexPath: IndexPath)  {
        willHighlightCellCallCount += 1
    
        if let willHighlightCellHandler = willHighlightCellHandler {
            willHighlightCellHandler(indexPath)
        }
        
    }
    
    var didHighlightCellCallCount = 0
    var didHighlightCellHandler: ((IndexPath) -> ())?
    func didHighlightCell(at indexPath: IndexPath)  {
        didHighlightCellCallCount += 1
    
        if let didHighlightCellHandler = didHighlightCellHandler {
            didHighlightCellHandler(indexPath)
        }
        
    }
    
    var didSelectCellCallCount = 0
    var didSelectCellHandler: ((IndexPath) -> ())?
    func didSelectCell(at indexPath: IndexPath)  {
        didSelectCellCallCount += 1
    
        if let didSelectCellHandler = didSelectCellHandler {
            didSelectCellHandler(indexPath)
        }
        
    }
    
    var willDisplayCellCallCount = 0
    var willDisplayCellHandler: ((IndexPath) -> ())?
    func willDisplayCell(at indexPath: IndexPath)  {
        willDisplayCellCallCount += 1
    
        if let willDisplayCellHandler = willDisplayCellHandler {
            willDisplayCellHandler(indexPath)
        }
        
    }
    
    var didScrollCallCount = 0
    var didScrollHandler: (() -> ())?
    func didScroll()  {
        didScrollCallCount += 1
    
        if let didScrollHandler = didScrollHandler {
            didScrollHandler()
        }
        
    }
    
    var productCellCallCount = 0
    var productCellHandler: ((IndexPath) -> (ProductCell?))?
    func productCell(at indexPath: IndexPath) -> ProductCell? {
        productCellCallCount += 1
    
        if let productCellHandler = productCellHandler {
            return productCellHandler(indexPath)
        }
        return nil
    }
    
    var bindCallCount = 0
    var bindHandler: ((ProductCell, ProductCollectionViewCellDisplayable) -> ())?
    func bind(productCell: ProductCell, viewCell: ProductCollectionViewCellDisplayable)  {
        bindCallCount += 1
    
        if let bindHandler = bindHandler {
            bindHandler(productCell, viewCell)
        }
        
    }
    
    var unbindCallCount = 0
    var unbindHandler: ((ProductCell) -> ())?
    func unbind(productCell: ProductCell)  {
        unbindCallCount += 1
    
        if let unbindHandler = unbindHandler {
            unbindHandler(productCell)
        }
        
    }
}

class SelectedProductCollectionViewProviderListenerMock: SelectedProductCollectionViewProviderListener {

    

    init() {

    }
        
    var getViewModelForCellCallCount = 0
    var getViewModelForCellHandler: (() -> (ProductSelectionCellViewModel?))?
    func getViewModelForCell() -> ProductSelectionCellViewModel? {
        getViewModelForCellCallCount += 1
    
        if let getViewModelForCellHandler = getViewModelForCellHandler {
            return getViewModelForCellHandler()
        }
        return nil
    }
    
    var didTapFareBreakdownInfoIconCallCount = 0
    var didTapFareBreakdownInfoIconHandler: (() -> ())?
    func didTapFareBreakdownInfoIcon()  {
        didTapFareBreakdownInfoIconCallCount += 1
    
        if let didTapFareBreakdownInfoIconHandler = didTapFareBreakdownInfoIconHandler {
            didTapFareBreakdownInfoIconHandler()
        }
        
    }
}

public class ProductCatalogResultAndSelectionStreamingMock: ProductCatalogResultAndSelectionStreaming {

    
    public init() {}
    public init(catalogResultAndSelection: Observable<ProductCatalogResultAndSelection> = PublishSubject(), productFareDisplayContextProviderStream: Observable<ProductFareDisplayContextWrapping?> = PublishSubject()) {
        self.catalogResultAndSelection = catalogResultAndSelection
        self.productFareDisplayContextProviderStream = productFareDisplayContextProviderStream
    }
        
    private var catalogResultAndSelectionSubjectKind = 0
    var catalogResultAndSelectionSubjectSetCallCount = 0
    var catalogResultAndSelectionSubject = PublishSubject<ProductCatalogResultAndSelection>() { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    var catalogResultAndSelectionReplaySubject = ReplaySubject<ProductCatalogResultAndSelection>.create(bufferSize: 1) { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    var catalogResultAndSelectionBehaviorSubject: BehaviorSubject<ProductCatalogResultAndSelection>! { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    var catalogResultAndSelectionRxSubject: Observable<ProductCatalogResultAndSelection>! { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    public var catalogResultAndSelection: Observable<ProductCatalogResultAndSelection> {
        get {
            if catalogResultAndSelectionSubjectKind == 0 {
                return catalogResultAndSelectionSubject
            } else if catalogResultAndSelectionSubjectKind == 1 {
                return catalogResultAndSelectionBehaviorSubject
            } else if catalogResultAndSelectionSubjectKind == 2 {
                return catalogResultAndSelectionReplaySubject
            } else {
                return catalogResultAndSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductCatalogResultAndSelection> {
                catalogResultAndSelectionSubject = val
                catalogResultAndSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductCatalogResultAndSelection> {
                catalogResultAndSelectionBehaviorSubject = val
                catalogResultAndSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductCatalogResultAndSelection> {
                catalogResultAndSelectionReplaySubject = val
                catalogResultAndSelectionSubjectKind = 2
            } else {
                catalogResultAndSelectionRxSubject = newValue
                catalogResultAndSelectionSubjectKind = 3
            }
        }
    }
    
    private var productFareDisplayContextProviderStreamSubjectKind = 0
    var productFareDisplayContextProviderStreamSubjectSetCallCount = 0
    var productFareDisplayContextProviderStreamSubject = PublishSubject<ProductFareDisplayContextWrapping?>() { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    var productFareDisplayContextProviderStreamReplaySubject = ReplaySubject<ProductFareDisplayContextWrapping?>.create(bufferSize: 1) { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    var productFareDisplayContextProviderStreamBehaviorSubject: BehaviorSubject<ProductFareDisplayContextWrapping?>! { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    var productFareDisplayContextProviderStreamRxSubject: Observable<ProductFareDisplayContextWrapping?>! { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    public var productFareDisplayContextProviderStream: Observable<ProductFareDisplayContextWrapping?> {
        get {
            if productFareDisplayContextProviderStreamSubjectKind == 0 {
                return productFareDisplayContextProviderStreamSubject
            } else if productFareDisplayContextProviderStreamSubjectKind == 1 {
                return productFareDisplayContextProviderStreamBehaviorSubject
            } else if productFareDisplayContextProviderStreamSubjectKind == 2 {
                return productFareDisplayContextProviderStreamReplaySubject
            } else {
                return productFareDisplayContextProviderStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductFareDisplayContextWrapping?> {
                productFareDisplayContextProviderStreamSubject = val
                productFareDisplayContextProviderStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductFareDisplayContextWrapping?> {
                productFareDisplayContextProviderStreamBehaviorSubject = val
                productFareDisplayContextProviderStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductFareDisplayContextWrapping?> {
                productFareDisplayContextProviderStreamReplaySubject = val
                productFareDisplayContextProviderStreamSubjectKind = 2
            } else {
                productFareDisplayContextProviderStreamRxSubject = newValue
                productFareDisplayContextProviderStreamSubjectKind = 3
            }
        }
    }
}

class TripHeaderRootRoutingMock: TripHeaderRootRouting {

    
    init() {}
    init(interactor: TripHeaderRootInteractable = TripHeaderRootInteractableMock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: TripHeaderRootInteractable = TripHeaderRootInteractableMock()
    var interactor: TripHeaderRootInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeToTripHeaderCallCount = 0
    var routeToTripHeaderHandler: ((TripHeaderBuildable) -> ())?
    func routeToTripHeader(builder: TripHeaderBuildable)  {
        routeToTripHeaderCallCount += 1
    
        if let routeToTripHeaderHandler = routeToTripHeaderHandler {
            routeToTripHeaderHandler(builder)
        }
        
    }
}

class OutOfCoverageViewControllableMock: OutOfCoverageViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
}

class ProductViewModelTransformingMock: ProductViewModelTransforming {

    

    init() {

    }
        
    var transformCallCount = 0
    var transformHandler: ((ProductCatalog, ProductSubtitleMap?, ProductToastMap?, ProductBadgeMap?, ProductDetailInfoMap?, ProductAnnotationsMap?, ProductFareBindingTypeMap?, ProductExplainerMap?, ProductDetailViewMap?, ProductViewEmphasisMap?, ProductStickerMap?, ProductRecommendationInfoMap?, CachedExperimenting) -> (ProductCatalogViewModel))?
    func transform(productCatalog: ProductCatalog, productSubtitleMap: ProductSubtitleMap?, productToastMap: ProductToastMap?, productBadgeMap: ProductBadgeMap?, productDetailInfoMap: ProductDetailInfoMap?, productAnnotationsMap: ProductAnnotationsMap?, productFareBindingTypeMap: ProductFareBindingTypeMap?, productExplainerMap: ProductExplainerMap?, productDetailViewMap: ProductDetailViewMap?, productViewEmphasisMap: ProductViewEmphasisMap?, productStickerMap: ProductStickerMap?, productRecommendationInfoMap: ProductRecommendationInfoMap?, cachedExperiments: CachedExperimenting) -> ProductCatalogViewModel {
        transformCallCount += 1
    
        if let transformHandler = transformHandler {
            return transformHandler(productCatalog, productSubtitleMap, productToastMap, productBadgeMap, productDetailInfoMap, productAnnotationsMap, productFareBindingTypeMap, productExplainerMap, productDetailViewMap, productViewEmphasisMap, productStickerMap, productRecommendationInfoMap, cachedExperiments)
        }
        fatalError("transformHandler returns can't have a default value thus its handler must be set")
    }
}

class DestinationPromptRoutingMock: DestinationPromptRouting {

    
    init() {}
    init(interactor: DestinationPromptInteractable = DestinationPromptInteractableMock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: DestinationPromptInteractable = DestinationPromptInteractableMock()
    var interactor: DestinationPromptInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeFromDestinationEntryAccessoryCallCount = 0
    var routeFromDestinationEntryAccessoryHandler: (() -> ())?
    func routeFromDestinationEntryAccessory()  {
        routeFromDestinationEntryAccessoryCallCount += 1
    
        if let routeFromDestinationEntryAccessoryHandler = routeFromDestinationEntryAccessoryHandler {
            routeFromDestinationEntryAccessoryHandler()
        }
        
    }
    
    var routeToDestinationEntryAccessoryCallCount = 0
    var routeToDestinationEntryAccessoryHandler: ((DestinationEntryAccessoryBuildable) -> (DestinationEntryAccessoryActionableItem))?
    func routeToDestinationEntryAccessory(builder: DestinationEntryAccessoryBuildable) -> DestinationEntryAccessoryActionableItem {
        routeToDestinationEntryAccessoryCallCount += 1
    
        if let routeToDestinationEntryAccessoryHandler = routeToDestinationEntryAccessoryHandler {
            return routeToDestinationEntryAccessoryHandler(builder)
        }
        fatalError("routeToDestinationEntryAccessoryHandler returns can't have a default value thus its handler must be set")
    }
    
    var detachTopAccessoryCallCount = 0
    var detachTopAccessoryHandler: ((ViewableRouting) -> ())?
    func detachTopAccessory(router: ViewableRouting)  {
        detachTopAccessoryCallCount += 1
    
        if let detachTopAccessoryHandler = detachTopAccessoryHandler {
            detachTopAccessoryHandler(router)
        }
        
    }
    
    var attachTopAccessoryCallCount = 0
    var attachTopAccessoryHandler: ((ViewableRouting) -> ())?
    func attachTopAccessory(router: ViewableRouting)  {
        attachTopAccessoryCallCount += 1
    
        if let attachTopAccessoryHandler = attachTopAccessoryHandler {
            attachTopAccessoryHandler(router)
        }
        
    }
}

class SelectedProductViewControllableMock: SelectedProductViewControllable {

    
    init() {}
    init(anchorPointHeight: CGFloat = 0.0, uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.anchorPointHeight = anchorPointHeight
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductViewControllableListener? = nil
    var listener: SelectedProductViewControllableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var anchorPointHeightSetCallCount = 0
    var underlyingAnchorPointHeight: CGFloat = 0.0
    var anchorPointHeight: CGFloat {
        get {
            return underlyingAnchorPointHeight
        }
        set {
            underlyingAnchorPointHeight = newValue
            anchorPointHeightSetCallCount += 1
        }
    }
    
    var updateCollectionViewCallCount = 0
    var updateCollectionViewHandler: ((UICollectionViewCell.Type) -> ())?
    func updateCollectionView(cellType: UICollectionViewCell.Type)  {
        updateCollectionViewCallCount += 1
    
        if let updateCollectionViewHandler = updateCollectionViewHandler {
            updateCollectionViewHandler(cellType)
        }
        
    }
    
    var viewModelUpdatedCallCount = 0
    var viewModelUpdatedHandler: (() -> ())?
    func viewModelUpdated()  {
        viewModelUpdatedCallCount += 1
    
        if let viewModelUpdatedHandler = viewModelUpdatedHandler {
            viewModelUpdatedHandler()
        }
        
    }
    
    var updateFareBreakdownViewModelCallCount = 0
    var updateFareBreakdownViewModelHandler: ((ProductFareBreakdownViewModel) -> ())?
    func updateFareBreakdownViewModel(_ viewModel: ProductFareBreakdownViewModel)  {
        updateFareBreakdownViewModelCallCount += 1
    
        if let updateFareBreakdownViewModelHandler = updateFareBreakdownViewModelHandler {
            updateFareBreakdownViewModelHandler(viewModel)
        }
        
    }
    
    var showSelectedProductConfigurationViewControllerCallCount = 0
    var showSelectedProductConfigurationViewControllerHandler: ((SelectedProductConfigurationViewControllable) -> ())?
    func showSelectedProductConfigurationViewController(_ productConfigurationsViewController: SelectedProductConfigurationViewControllable)  {
        showSelectedProductConfigurationViewControllerCallCount += 1
    
        if let showSelectedProductConfigurationViewControllerHandler = showSelectedProductConfigurationViewControllerHandler {
            showSelectedProductConfigurationViewControllerHandler(productConfigurationsViewController)
        }
        
    }
    
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
    
    var showAlertViewControllableCallCount = 0
    var showAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showAlertViewControllableCallCount += 1
    
        if let showAlertViewControllableHandler = showAlertViewControllableHandler {
            showAlertViewControllableHandler(alertViewControllable)
        }
        
    }
}

class ConfirmationAlertViewControllableMock: ConfirmationAlertViewControllable {

    

    init() {

    }
        
    var viewListenerSetCallCount = 0
    var underlyingViewListener: ConfirmationAlertViewControllerViewListener? = nil
    var viewListener: ConfirmationAlertViewControllerViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
}

class ProductTooltipManagingMock: ProductTooltipManaging {

    

    init() {

    }
        
    var addToShownTooltipsCallCount = 0
    var addToShownTooltipsHandler: ((TooltipUuid, Bool) -> ())?
    func addToShownTooltips(tooltipUuid: TooltipUuid, showOnce: Bool)  {
        addToShownTooltipsCallCount += 1
    
        if let addToShownTooltipsHandler = addToShownTooltipsHandler {
            addToShownTooltipsHandler(tooltipUuid, showOnce)
        }
        
    }
    
    var shouldShowTooltipCallCount = 0
    var shouldShowTooltipHandler: ((TooltipUuid) -> (Bool))?
    func shouldShowTooltip(tooltipUuid: TooltipUuid) -> Bool {
        shouldShowTooltipCallCount += 1
    
        if let shouldShowTooltipHandler = shouldShowTooltipHandler {
            return shouldShowTooltipHandler(tooltipUuid)
        }
        return false
    }
}

class ProductUpsellManagingMock: ProductUpsellManaging {

    
    init() {}
    init(viewedUpsells: ProductUpsellPreferences) {
        self.viewedUpsells = viewedUpsells
    }
        
    var viewedUpsellsSetCallCount = 0
    var underlyingViewedUpsells: ProductUpsellPreferences! 
    var viewedUpsells: ProductUpsellPreferences {
        get {
            return underlyingViewedUpsells
        }
        set {
            underlyingViewedUpsells = newValue
            viewedUpsellsSetCallCount += 1
        }
    }
    
    var addToViewedUpsellsCallCount = 0
    var addToViewedUpsellsHandler: ((Upsell) -> ())?
    func addToViewedUpsells(upsell: Upsell)  {
        addToViewedUpsellsCallCount += 1
    
        if let addToViewedUpsellsHandler = addToViewedUpsellsHandler {
            addToViewedUpsellsHandler(upsell)
        }
        
    }
}

public class ConfirmationActionRequestDependencyMock: ConfirmationActionRequestDependency {

    
    public init() {}
    public init(cachedExperiments: CachedExperimenting, confirmationActionTitleMappingPluginPoint: ConfirmationActionTitleMappingPluginPoint, confirmationNextStepStream: ConfirmationNextStepStreaming, productSelection: Observable<ProductSelection> = PublishSubject(), productPricingStream: ProductPricingStreaming, fareImpressionProvider: FareImpressionProviding) {
        self.cachedExperiments = cachedExperiments
        self.confirmationActionTitleMappingPluginPoint = confirmationActionTitleMappingPluginPoint
        self.confirmationNextStepStream = confirmationNextStepStream
        self.productSelection = productSelection
        self.productPricingStream = productPricingStream
        self.fareImpressionProvider = fareImpressionProvider
    }
        
    var cachedExperimentsSetCallCount = 0
    var underlyingCachedExperiments: CachedExperimenting! 
    public var cachedExperiments: CachedExperimenting {
        get {
            return underlyingCachedExperiments
        }
        set {
            underlyingCachedExperiments = newValue
            cachedExperimentsSetCallCount += 1
        }
    }
    
    var confirmationActionTitleMappingPluginPointSetCallCount = 0
    var underlyingConfirmationActionTitleMappingPluginPoint: ConfirmationActionTitleMappingPluginPoint! 
    public var confirmationActionTitleMappingPluginPoint: ConfirmationActionTitleMappingPluginPoint {
        get {
            return underlyingConfirmationActionTitleMappingPluginPoint
        }
        set {
            underlyingConfirmationActionTitleMappingPluginPoint = newValue
            confirmationActionTitleMappingPluginPointSetCallCount += 1
        }
    }
    
    var confirmationNextStepStreamSetCallCount = 0
    var underlyingConfirmationNextStepStream: ConfirmationNextStepStreaming! 
    public var confirmationNextStepStream: ConfirmationNextStepStreaming {
        get {
            return underlyingConfirmationNextStepStream
        }
        set {
            underlyingConfirmationNextStepStream = newValue
            confirmationNextStepStreamSetCallCount += 1
        }
    }
    
    private var productSelectionSubjectKind = 0
    var productSelectionSubjectSetCallCount = 0
    var productSelectionSubject = PublishSubject<ProductSelection>() { didSet { productSelectionSubjectSetCallCount += 1 } }
    var productSelectionReplaySubject = ReplaySubject<ProductSelection>.create(bufferSize: 1) { didSet { productSelectionSubjectSetCallCount += 1 } }
    var productSelectionBehaviorSubject: BehaviorSubject<ProductSelection>! { didSet { productSelectionSubjectSetCallCount += 1 } }
    var productSelectionRxSubject: Observable<ProductSelection>! { didSet { productSelectionSubjectSetCallCount += 1 } }
    public var productSelection: Observable<ProductSelection> {
        get {
            if productSelectionSubjectKind == 0 {
                return productSelectionSubject
            } else if productSelectionSubjectKind == 1 {
                return productSelectionBehaviorSubject
            } else if productSelectionSubjectKind == 2 {
                return productSelectionReplaySubject
            } else {
                return productSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelection> {
                productSelectionSubject = val
                productSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelection> {
                productSelectionBehaviorSubject = val
                productSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelection> {
                productSelectionReplaySubject = val
                productSelectionSubjectKind = 2
            } else {
                productSelectionRxSubject = newValue
                productSelectionSubjectKind = 3
            }
        }
    }
    
    var productPricingStreamSetCallCount = 0
    var underlyingProductPricingStream: ProductPricingStreaming! 
    public var productPricingStream: ProductPricingStreaming {
        get {
            return underlyingProductPricingStream
        }
        set {
            underlyingProductPricingStream = newValue
            productPricingStreamSetCallCount += 1
        }
    }
    
    var fareImpressionProviderSetCallCount = 0
    var underlyingFareImpressionProvider: FareImpressionProviding! 
    public var fareImpressionProvider: FareImpressionProviding {
        get {
            return underlyingFareImpressionProvider
        }
        set {
            underlyingFareImpressionProvider = newValue
            fareImpressionProviderSetCallCount += 1
        }
    }
}

class ConfirmationActionRequestViewControllableMock: ConfirmationActionRequestViewControllable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationActionRequestViewControllerListener? = nil
    var listener: ConfirmationActionRequestViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var setNextStepTitleCallCount = 0
    var setNextStepTitleHandler: ((String, String?, AnalyticsID?) -> ())?
    func setNextStepTitle(title: String, subtitle: String?, analyticsID: AnalyticsID?)  {
        setNextStepTitleCallCount += 1
    
        if let setNextStepTitleHandler = setNextStepTitleHandler {
            setNextStepTitleHandler(title, subtitle, analyticsID)
        }
        
    }
    
    var setNextStepStyleCallCount = 0
    var setNextStepStyleHandler: ((ConfirmationActionRequestStyling) -> ())?
    func setNextStepStyle(_ confirmationActionRequestStyle: ConfirmationActionRequestStyling)  {
        setNextStepStyleCallCount += 1
    
        if let setNextStepStyleHandler = setNextStepStyleHandler {
            setNextStepStyleHandler(confirmationActionRequestStyle)
        }
        
    }
    
    var setNextStepEnabledCallCount = 0
    var setNextStepEnabledHandler: ((Bool) -> ())?
    func setNextStepEnabled(_ isEnabled: Bool)  {
        setNextStepEnabledCallCount += 1
    
        if let setNextStepEnabledHandler = setNextStepEnabledHandler {
            setNextStepEnabledHandler(isEnabled)
        }
        
    }
}

class ConfirmationInteractableMock: ConfirmationInteractable {

    
    init() {}
    init(confirmationPresenter: ConfirmationPresentable = ConfirmationPresentableMock()) {
        self.confirmationPresenter = confirmationPresenter
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ConfirmationRouting? = nil
    var router: ConfirmationRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationListener? = nil
    var listener: ConfirmationListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var confirmationPresenterSetCallCount = 0
    var underlyingConfirmationPresenter: ConfirmationPresentable = ConfirmationPresentableMock()
    var confirmationPresenter: ConfirmationPresentable {
        get {
            return underlyingConfirmationPresenter
        }
        set {
            underlyingConfirmationPresenter = newValue
            confirmationPresenterSetCallCount += 1
        }
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var loadingBeganCallCount = 0
    var loadingBeganHandler: ((ProductSelectionInteractable) -> ())?
    func loadingBegan(productSelectionInteractor: ProductSelectionInteractable)  {
        loadingBeganCallCount += 1
    
        if let loadingBeganHandler = loadingBeganHandler {
            loadingBeganHandler(productSelectionInteractor)
        }
        
    }
    
    var loadingEndedCallCount = 0
    var loadingEndedHandler: ((ProductSelectionInteractable) -> ())?
    func loadingEnded(productSelectionInteractor: ProductSelectionInteractable)  {
        loadingEndedCallCount += 1
    
        if let loadingEndedHandler = loadingEndedHandler {
            loadingEndedHandler(productSelectionInteractor)
        }
        
    }
}

class SelectedProductRoutingMock: SelectedProductRouting {

    
    init() {}
    init(interactor: SelectedProductInteractable = SelectedProductInteractableMock(), viewController: SelectedProductViewControllable = SelectedProductViewControllableMock()) {
        self.interactor = interactor
        self.viewController = viewController
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: SelectedProductInteractable = SelectedProductInteractableMock()
    var interactor: SelectedProductInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: SelectedProductViewControllable = SelectedProductViewControllableMock()
    var viewController: SelectedProductViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
}

class SelectedProductViewControllableListenerMock: SelectedProductViewControllableListener {

    

    init() {

    }
        
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: (() -> (ProductSelectionCellViewModel?))?
    func viewModelForCell() -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler()
        }
        return nil
    }
    
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
}

class SelectedProductConfigurationRoutingMock: SelectedProductConfigurationRouting {

    
    init() {}
    init(viewController: SelectedProductConfigurationViewControllable = SelectedProductConfigurationViewControllableMock()) {
        self.viewController = viewController
    }
        
    var viewControllerSetCallCount = 0
    var underlyingViewController: SelectedProductConfigurationViewControllable = SelectedProductConfigurationViewControllableMock()
    var viewController: SelectedProductConfigurationViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
    
    var attachConfigurationChildRouterCallCount = 0
    var attachConfigurationChildRouterHandler: ((ViewableRouting) -> ())?
    func attachConfigurationChildRouter(router: ViewableRouting)  {
        attachConfigurationChildRouterCallCount += 1
    
        if let attachConfigurationChildRouterHandler = attachConfigurationChildRouterHandler {
            attachConfigurationChildRouterHandler(router)
        }
        
    }
    
    var detachConfigurationChildRouterCallCount = 0
    var detachConfigurationChildRouterHandler: (() -> ())?
    func detachConfigurationChildRouter()  {
        detachConfigurationChildRouterCallCount += 1
    
        if let detachConfigurationChildRouterHandler = detachConfigurationChildRouterHandler {
            detachConfigurationChildRouterHandler()
        }
        
    }
}

class OutOfCoveragePresentableListenerMock: OutOfCoveragePresentableListener {

    

    init() {

    }
    
}

class MenuViewControllerListenerMock: MenuViewControllerListener {

    

    init() {

    }
        
    var viewDidLoadCallCount = 0
    var viewDidLoadHandler: (() -> ())?
    func viewDidLoad()  {
        viewDidLoadCallCount += 1
    
        if let viewDidLoadHandler = viewDidLoadHandler {
            viewDidLoadHandler()
        }
        
    }
    
    var didSelectItemCallCount = 0
    var didSelectItemHandler: ((IndexPath) -> ())?
    func didSelectItem(atIndexPath indexPath: IndexPath)  {
        didSelectItemCallCount += 1
    
        if let didSelectItemHandler = didSelectItemHandler {
            didSelectItemHandler(indexPath)
        }
        
    }
    
    var didTapCloseCallCount = 0
    var didTapCloseHandler: (((() -> ())?) -> ())?
    func didTapClose(completion: (() -> ())?)  {
        didTapCloseCallCount += 1
    
        if let didTapCloseHandler = didTapCloseHandler {
            didTapCloseHandler(completion)
        }
        
    }
    
    var didTapMenuHeaderCallCount = 0
    var didTapMenuHeaderHandler: (() -> ())?
    func didTapMenuHeader()  {
        didTapMenuHeaderCallCount += 1
    
        if let didTapMenuHeaderHandler = didTapMenuHeaderHandler {
            didTapMenuHeaderHandler()
        }
        
    }
}

public class RideContextStreamingMock: RideContextStreaming {

    
    public init() {}
    public init(context: Observable<RideContext> = PublishSubject()) {
        self.context = context
    }
        
    private var contextSubjectKind = 0
    var contextSubjectSetCallCount = 0
    var contextSubject = PublishSubject<RideContext>() { didSet { contextSubjectSetCallCount += 1 } }
    var contextReplaySubject = ReplaySubject<RideContext>.create(bufferSize: 1) { didSet { contextSubjectSetCallCount += 1 } }
    var contextBehaviorSubject: BehaviorSubject<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    var contextRxSubject: Observable<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    public var context: Observable<RideContext> {
        get {
            if contextSubjectKind == 0 {
                return contextSubject
            } else if contextSubjectKind == 1 {
                return contextBehaviorSubject
            } else if contextSubjectKind == 2 {
                return contextReplaySubject
            } else {
                return contextRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RideContext> {
                contextSubject = val
                contextSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RideContext> {
                contextBehaviorSubject = val
                contextSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RideContext> {
                contextReplaySubject = val
                contextSubjectKind = 2
            } else {
                contextRxSubject = newValue
                contextSubjectKind = 3
            }
        }
    }
}

class ModeSourceStreamingMock: ModeSourceStreaming {

    
    init() {}
    init(availableModesSource: Observable<[Mode]> = PublishSubject()) {
        self.availableModesSource = availableModesSource
    }
        
    private var availableModesSourceSubjectKind = 0
    var availableModesSourceSubjectSetCallCount = 0
    var availableModesSourceSubject = PublishSubject<[Mode]>() { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSourceReplaySubject = ReplaySubject<[Mode]>.create(bufferSize: 1) { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSourceBehaviorSubject: BehaviorSubject<[Mode]>! { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSourceRxSubject: Observable<[Mode]>! { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSource: Observable<[Mode]> {
        get {
            if availableModesSourceSubjectKind == 0 {
                return availableModesSourceSubject
            } else if availableModesSourceSubjectKind == 1 {
                return availableModesSourceBehaviorSubject
            } else if availableModesSourceSubjectKind == 2 {
                return availableModesSourceReplaySubject
            } else {
                return availableModesSourceRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[Mode]> {
                availableModesSourceSubject = val
                availableModesSourceSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[Mode]> {
                availableModesSourceBehaviorSubject = val
                availableModesSourceSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[Mode]> {
                availableModesSourceReplaySubject = val
                availableModesSourceSubjectKind = 2
            } else {
                availableModesSourceRxSubject = newValue
                availableModesSourceSubjectKind = 3
            }
        }
    }
}

public class SelectedProductLeadingButtonStreamingMock: SelectedProductLeadingButtonStreaming {

    
    public init() {}
    public init(leadingButtonTappedStream: Observable<()> = PublishSubject()) {
        self.leadingButtonTappedStream = leadingButtonTappedStream
    }
        
    private var leadingButtonTappedStreamSubjectKind = 0
    var leadingButtonTappedStreamSubjectSetCallCount = 0
    var leadingButtonTappedStreamSubject = PublishSubject<()>() { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamBehaviorSubject: BehaviorSubject<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamRxSubject: Observable<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    public var leadingButtonTappedStream: Observable<()> {
        get {
            if leadingButtonTappedStreamSubjectKind == 0 {
                return leadingButtonTappedStreamSubject
            } else if leadingButtonTappedStreamSubjectKind == 1 {
                return leadingButtonTappedStreamBehaviorSubject
            } else if leadingButtonTappedStreamSubjectKind == 2 {
                return leadingButtonTappedStreamReplaySubject
            } else {
                return leadingButtonTappedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                leadingButtonTappedStreamSubject = val
                leadingButtonTappedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                leadingButtonTappedStreamBehaviorSubject = val
                leadingButtonTappedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                leadingButtonTappedStreamReplaySubject = val
                leadingButtonTappedStreamSubjectKind = 2
            } else {
                leadingButtonTappedStreamRxSubject = newValue
                leadingButtonTappedStreamSubjectKind = 3
            }
        }
    }
}

class HomeInteractableV2Mock: HomeInteractableV2 {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: HomeRoutingV2? = nil
    var router: HomeRoutingV2? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var acceleratorsListenerSetCallCount = 0
    var underlyingAcceleratorsListener: AcceleratorsListener? = nil
    var acceleratorsListener: AcceleratorsListener? {
        get {
            return underlyingAcceleratorsListener
        }
        set {
            underlyingAcceleratorsListener = newValue
            acceleratorsListenerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: HomeListenerV2? = nil
    var listener: HomeListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class MenuHeaderViewListenerMock: MenuHeaderViewListener {

    

    init() {

    }
        
    var didTapMenuHeaderViewCallCount = 0
    var didTapMenuHeaderViewHandler: ((MenuHeaderView) -> ())?
    func didTapMenuHeaderView(headerView: MenuHeaderView)  {
        didTapMenuHeaderViewCallCount += 1
    
        if let didTapMenuHeaderViewHandler = didTapMenuHeaderViewHandler {
            didTapMenuHeaderViewHandler(headerView)
        }
        
    }
}

class ModeActionableItemHandlingMock: ModeActionableItemHandling {

    

    init() {

    }
        
    var handleCallCount = 0
    var handleHandler: ((Routing) -> ())?
    func handle(router: Routing)  {
        handleCallCount += 1
    
        if let handleHandler = handleHandler {
            handleHandler(router)
        }
        
    }
}

class ProductCatalogTransformingMock: ProductCatalogTransforming {

        private var cachedExperiments: CachedExperimenting!
private var productsStream: ProductsStreaming!
    init() {}
        
    required init(cachedExperiments: CachedExperimenting, productsStream: ProductsStreaming) {
        self.cachedExperiments = cachedExperiments
    self.productsStream = productsStream
    }
}

class ProductFareBreakdownViewControllerListenerMock: ProductFareBreakdownViewControllerListener {

    

    init() {

    }
        
    var fareBreakdownViewControllerCallCount = 0
    var fareBreakdownViewControllerHandler: ((ViewController, PricingLabel, ProductId, String?, FareBindingType) -> ())?
    func fareBreakdownViewController(fareBreakdownViewController: ViewController, didConfigurePricingView pricingView: PricingLabel, associatedId: ProductId, placeholder: String?, bindingType: FareBindingType)  {
        fareBreakdownViewControllerCallCount += 1
    
        if let fareBreakdownViewControllerHandler = fareBreakdownViewControllerHandler {
            fareBreakdownViewControllerHandler(fareBreakdownViewController, pricingView, associatedId, placeholder, bindingType)
        }
        
    }
}

class OutOfCoveragePresentableMock: OutOfCoveragePresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: OutOfCoveragePresentableListener? = nil
    var listener: OutOfCoveragePresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class TripDetailsPresentableListenerMock: TripDetailsPresentableListener {

    

    init() {

    }
        
    var willDisplayTripDetailsCardCallCount = 0
    var willDisplayTripDetailsCardHandler: (() -> ())?
    func willDisplayTripDetailsCard()  {
        willDisplayTripDetailsCardCallCount += 1
    
        if let willDisplayTripDetailsCardHandler = willDisplayTripDetailsCardHandler {
            willDisplayTripDetailsCardHandler()
        }
        
    }
}

class ConfirmationAlertPresentableListenerMock: ConfirmationAlertPresentableListener {

    

    init() {

    }
        
    var confirmationAlertPresentableDidConfigurePricingLabelCallCount = 0
    var confirmationAlertPresentableDidConfigurePricingLabelHandler: ((PricingLabel, FareBindingType, ProductConfigurationHash) -> ())?
    func confirmationAlertPresentableDidConfigurePricingLabel(_ pricingLabel: PricingLabel, fareBindingType: FareBindingType, hash: ProductConfigurationHash)  {
        confirmationAlertPresentableDidConfigurePricingLabelCallCount += 1
    
        if let confirmationAlertPresentableDidConfigurePricingLabelHandler = confirmationAlertPresentableDidConfigurePricingLabelHandler {
            confirmationAlertPresentableDidConfigurePricingLabelHandler(pricingLabel, fareBindingType, hash)
        }
        
    }
    
    var clearBindingCallCount = 0
    var clearBindingHandler: ((PricingLabel) -> ())?
    func clearBinding(fromPricingLabel pricingLabel: PricingLabel)  {
        clearBindingCallCount += 1
    
        if let clearBindingHandler = clearBindingHandler {
            clearBindingHandler(pricingLabel)
        }
        
    }
}

class MutableSelectedProductPackageStreamingMock: MutableSelectedProductPackageStreaming {

    
    init() {}
    init(selectedProductPackage: Observable<ProductPackage> = PublishSubject()) {
        self.selectedProductPackage = selectedProductPackage
    }
        
    private var selectedProductPackageSubjectKind = 0
    var selectedProductPackageSubjectSetCallCount = 0
    var selectedProductPackageSubject = PublishSubject<ProductPackage>() { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageReplaySubject = ReplaySubject<ProductPackage>.create(bufferSize: 1) { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageBehaviorSubject: BehaviorSubject<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageRxSubject: Observable<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    public var selectedProductPackage: Observable<ProductPackage> {
        get {
            if selectedProductPackageSubjectKind == 0 {
                return selectedProductPackageSubject
            } else if selectedProductPackageSubjectKind == 1 {
                return selectedProductPackageBehaviorSubject
            } else if selectedProductPackageSubjectKind == 2 {
                return selectedProductPackageReplaySubject
            } else {
                return selectedProductPackageRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductPackage> {
                selectedProductPackageSubject = val
                selectedProductPackageSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductPackage> {
                selectedProductPackageBehaviorSubject = val
                selectedProductPackageSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductPackage> {
                selectedProductPackageReplaySubject = val
                selectedProductPackageSubjectKind = 2
            } else {
                selectedProductPackageRxSubject = newValue
                selectedProductPackageSubjectKind = 3
            }
        }
    }
    
    var updateSelectedProductPackageCallCount = 0
    var updateSelectedProductPackageHandler: ((ProductPackage) -> ())?
    func updateSelectedProductPackage(_ productPackage: ProductPackage)  {
        updateSelectedProductPackageCallCount += 1
    
        if let updateSelectedProductPackageHandler = updateSelectedProductPackageHandler {
            updateSelectedProductPackageHandler(productPackage)
        }
        
    }
}

class RootInteractableMock: RootInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: RootRouting? = nil
    var router: RootRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var applicationCallCount = 0
    var applicationHandler: ((UIApplication, URL, String?, AnyObject?) -> ())?
    func application(application: UIApplication, openURL url: URL, sourceApplication: String?, annotation: AnyObject?)  {
        applicationCallCount += 1
    
        if let applicationHandler = applicationHandler {
            applicationHandler(application, url, sourceApplication, annotation)
        }
        
    }
}

class HomeRoutingV2Mock: HomeRoutingV2 {

    
    init() {}
    init(actionableItem: HomeActionableItemV2, interactor: HomeInteractableV2 = HomeInteractableV2Mock()) {
        self.actionableItem = actionableItem
        self.interactor = interactor
    }
        
    var actionableItemSetCallCount = 0
    var underlyingActionableItem: HomeActionableItemV2! 
    var actionableItem: HomeActionableItemV2 {
        get {
            return underlyingActionableItem
        }
        set {
            underlyingActionableItem = newValue
            actionableItemSetCallCount += 1
        }
    }
    
    var interactorSetCallCount = 0
    var underlyingInteractor: HomeInteractableV2 = HomeInteractableV2Mock()
    var interactor: HomeInteractableV2 {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeFromScheduledRidesHomeEntryCallCount = 0
    var routeFromScheduledRidesHomeEntryHandler: (() -> ())?
    func routeFromScheduledRidesHomeEntry()  {
        routeFromScheduledRidesHomeEntryCallCount += 1
    
        if let routeFromScheduledRidesHomeEntryHandler = routeFromScheduledRidesHomeEntryHandler {
            routeFromScheduledRidesHomeEntryHandler()
        }
        
    }
    
    var routeToScheduledRidesHomeEntryCallCount = 0
    var routeToScheduledRidesHomeEntryHandler: ((ScheduledRidesHomeEntryBuildable) -> ())?
    func routeToScheduledRidesHomeEntry(builder: ScheduledRidesHomeEntryBuildable)  {
        routeToScheduledRidesHomeEntryCallCount += 1
    
        if let routeToScheduledRidesHomeEntryHandler = routeToScheduledRidesHomeEntryHandler {
            routeToScheduledRidesHomeEntryHandler(builder)
        }
        
    }
    
    var routeFromAcceleratorsCallCount = 0
    var routeFromAcceleratorsHandler: (() -> ())?
    func routeFromAccelerators()  {
        routeFromAcceleratorsCallCount += 1
    
        if let routeFromAcceleratorsHandler = routeFromAcceleratorsHandler {
            routeFromAcceleratorsHandler()
        }
        
    }
    
    var routeToAcceleratorsCallCount = 0
    var routeToAcceleratorsHandler: ((AcceleratorsBuildable) -> ())?
    func routeToAccelerators(builder: AcceleratorsBuildable)  {
        routeToAcceleratorsCallCount += 1
    
        if let routeToAcceleratorsHandler = routeToAcceleratorsHandler {
            routeToAcceleratorsHandler(builder)
        }
        
    }
    
    var routeFromLocationEditorEntryCallCount = 0
    var routeFromLocationEditorEntryHandler: (() -> ())?
    func routeFromLocationEditorEntry()  {
        routeFromLocationEditorEntryCallCount += 1
    
        if let routeFromLocationEditorEntryHandler = routeFromLocationEditorEntryHandler {
            routeFromLocationEditorEntryHandler()
        }
        
    }
    
    var routeToLocationEditorEntryCallCount = 0
    var routeToLocationEditorEntryHandler: ((LocationEditorEntryBuildable) -> (LocationEditorEntryActionableItem))?
    func routeToLocationEditorEntry(builder: LocationEditorEntryBuildable) -> LocationEditorEntryActionableItem {
        routeToLocationEditorEntryCallCount += 1
    
        if let routeToLocationEditorEntryHandler = routeToLocationEditorEntryHandler {
            return routeToLocationEditorEntryHandler(builder)
        }
        fatalError("routeToLocationEditorEntryHandler returns can't have a default value thus its handler must be set")
    }
    
    var routeFromRewardsRiderStatusBarCallCount = 0
    var routeFromRewardsRiderStatusBarHandler: (() -> ())?
    func routeFromRewardsRiderStatusBar()  {
        routeFromRewardsRiderStatusBarCallCount += 1
    
        if let routeFromRewardsRiderStatusBarHandler = routeFromRewardsRiderStatusBarHandler {
            routeFromRewardsRiderStatusBarHandler()
        }
        
    }
    
    var routeToRewardsRiderStatusBarCallCount = 0
    var routeToRewardsRiderStatusBarHandler: ((RewardsRiderStatusBarCardHaloBuildable) -> ())?
    func routeToRewardsRiderStatusBar(builder: RewardsRiderStatusBarCardHaloBuildable)  {
        routeToRewardsRiderStatusBarCallCount += 1
    
        if let routeToRewardsRiderStatusBarHandler = routeToRewardsRiderStatusBarHandler {
            routeToRewardsRiderStatusBarHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((HomeMapBuildable) -> ())?
    func routeToMap(builder: HomeMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeFromTopRowCallCount = 0
    var routeFromTopRowHandler: (() -> ())?
    func routeFromTopRow()  {
        routeFromTopRowCallCount += 1
    
        if let routeFromTopRowHandler = routeFromTopRowHandler {
            routeFromTopRowHandler()
        }
        
    }
    
    var routeToTopRowCallCount = 0
    var routeToTopRowHandler: ((TopRowBuildable) -> ())?
    func routeToTopRow(builder: TopRowBuildable)  {
        routeToTopRowCallCount += 1
    
        if let routeToTopRowHandler = routeToTopRowHandler {
            routeToTopRowHandler(builder)
        }
        
    }
    
    var updateCommunicationBannerCallCount = 0
    var updateCommunicationBannerHandler: ((BannerViewState) -> ())?
    func updateCommunicationBanner(viewState: BannerViewState)  {
        updateCommunicationBannerCallCount += 1
    
        if let updateCommunicationBannerHandler = updateCommunicationBannerHandler {
            updateCommunicationBannerHandler(viewState)
        }
        
    }
}

class ProductSelectionAnnotationManagingMock: ProductSelectionAnnotationManaging {

    

    init() {

    }
        
    var createProductAnnotationsMapCallCount = 0
    var createProductAnnotationsMapHandler: ((ProductCatalog, ProductFareDisplayContextMap?, ProductViewEmphasisMap?) -> (ProductAnnotationsMap))?
    func createProductAnnotationsMap(catalog: ProductCatalog, fareDisplayContextMap: ProductFareDisplayContextMap?, productViewEmphasisMap: ProductViewEmphasisMap?) -> ProductAnnotationsMap {
        createProductAnnotationsMapCallCount += 1
    
        if let createProductAnnotationsMapHandler = createProductAnnotationsMapHandler {
            return createProductAnnotationsMapHandler(catalog, fareDisplayContextMap, productViewEmphasisMap)
        }
        fatalError("createProductAnnotationsMapHandler returns can't have a default value thus its handler must be set")
    }
}

public class PersistedStreamLoadingMock: PersistedStreamLoading {

    
    public init() {}
    public init(mutableRiderStream: MutableRiderStreaming) {
        self.mutableRiderStream = mutableRiderStream
    }
        
    var mutableRiderStreamSetCallCount = 0
    var underlyingMutableRiderStream: MutableRiderStreaming! 
    public var mutableRiderStream: MutableRiderStreaming {
        get {
            return underlyingMutableRiderStream
        }
        set {
            underlyingMutableRiderStream = newValue
            mutableRiderStreamSetCallCount += 1
        }
    }
    
    var clearCallCount = 0
    public var clearHandler: (() -> ())?
    public func clear()  {
        clearCallCount += 1
    
        if let clearHandler = clearHandler {
            clearHandler()
        }
        
    }
}

class BaseRequestErrorHandlerPresenterListenerMock: BaseRequestErrorHandlerPresenterListener {

    

    init() {

    }
        
    var notifyForDismissCallCount = 0
    var notifyForDismissHandler: (() -> ())?
    func notifyForDismiss()  {
        notifyForDismissCallCount += 1
    
        if let notifyForDismissHandler = notifyForDismissHandler {
            notifyForDismissHandler()
        }
        
    }
}

class ConfirmationNextStepButtonContainerViewListenerMock: ConfirmationNextStepButtonContainerViewListener {

    

    init() {

    }
        
    var getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataCallCount = 0
    var getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler: (() -> (AnalyticsMetadata?))?
    func getConfirmationNextStepButtonContainerViewTapAnalyticsMetadata() -> AnalyticsMetadata? {
        getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataCallCount += 1
    
        if let getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler = getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler {
            return getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler()
        }
        return nil
    }
}

class ProductUpsellViewControllerListenerMock: ProductUpsellViewControllerListener {

    

    init() {

    }
        
    var upsellViewControllerCallCount = 0
    var upsellViewControllerHandler: ((ProductUpsellViewController, Upsell) -> ())?
    func upsellViewController(viewController: ProductUpsellViewController, didConfirmUpsell upsell: Upsell)  {
        upsellViewControllerCallCount += 1
    
        if let upsellViewControllerHandler = upsellViewControllerHandler {
            upsellViewControllerHandler(viewController, upsell)
        }
        
    }
    
    var upsellViewControllerDidTapLinkWithURLCallCount = 0
    var upsellViewControllerDidTapLinkWithURLHandler: ((ProductUpsellViewController, URL?) -> ())?
    func upsellViewController(viewController: ProductUpsellViewController, didTapLinkWithURL url: URL?)  {
        upsellViewControllerDidTapLinkWithURLCallCount += 1
    
        if let upsellViewControllerDidTapLinkWithURLHandler = upsellViewControllerDidTapLinkWithURLHandler {
            upsellViewControllerDidTapLinkWithURLHandler(viewController, url)
        }
        
    }
}

class MenuInteractableMock: MenuInteractable {

    
    init() {}
    init(menuItemsReadyStream: Observable<Bool> = PublishSubject()) {
        self.menuItemsReadyStream = menuItemsReadyStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: MenuRouting? = nil
    var router: MenuRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: MenuListener? = nil
    var listener: MenuListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    private var menuItemsReadyStreamSubjectKind = 0
    var menuItemsReadyStreamSubjectSetCallCount = 0
    var menuItemsReadyStreamSubject = PublishSubject<Bool>() { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStreamRxSubject: Observable<Bool>! { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStream: Observable<Bool> {
        get {
            if menuItemsReadyStreamSubjectKind == 0 {
                return menuItemsReadyStreamSubject
            } else if menuItemsReadyStreamSubjectKind == 1 {
                return menuItemsReadyStreamBehaviorSubject
            } else if menuItemsReadyStreamSubjectKind == 2 {
                return menuItemsReadyStreamReplaySubject
            } else {
                return menuItemsReadyStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                menuItemsReadyStreamSubject = val
                menuItemsReadyStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                menuItemsReadyStreamBehaviorSubject = val
                menuItemsReadyStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                menuItemsReadyStreamReplaySubject = val
                menuItemsReadyStreamSubjectKind = 2
            } else {
                menuItemsReadyStreamRxSubject = newValue
                menuItemsReadyStreamSubjectKind = 3
            }
        }
    }
}

class TripRequestManagerMock: TripRequestManager {

    

    init() {

    }
        
    var sendCallCount = 0
    var sendHandler: ((PickupRequestV2, CoreShared.Product?) -> ())?
    func send(pickupRequest: PickupRequestV2, product: CoreShared.Product?)  {
        sendCallCount += 1
    
        if let sendHandler = sendHandler {
            sendHandler(pickupRequest, product)
        }
        
    }
    
    var cancelCallCount = 0
    var cancelHandler: (() -> ())?
    func cancel()  {
        cancelCallCount += 1
    
        if let cancelHandler = cancelHandler {
            cancelHandler()
        }
        
    }
    
    var completeTripIfNeededCallCount = 0
    var completeTripIfNeededHandler: ((String, TripUuid) -> ())?
    func completeTripIfNeeded(riderUUID: String, tripUUID: TripUuid)  {
        completeTripIfNeededCallCount += 1
    
        if let completeTripIfNeededHandler = completeTripIfNeededHandler {
            completeTripIfNeededHandler(riderUUID, tripUUID)
        }
        
    }
}

public class PickupRequestMiddlewareManagingMock: PickupRequestMiddlewareManaging {

    

    public init() {

    }
    
}

class ProductSelectionRoutingV2Mock: ProductSelectionRoutingV2 {

    
    init() {}
    init(interactor: ProductSelectionInteractableV2 = ProductSelectionInteractableV2Mock(), viewController: ProductSelectionViewControllableV2 = ProductSelectionViewControllableV2Mock()) {
        self.interactor = interactor
        self.viewController = viewController
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ProductSelectionInteractableV2 = ProductSelectionInteractableV2Mock()
    var interactor: ProductSelectionInteractableV2 {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: ProductSelectionViewControllableV2 = ProductSelectionViewControllableV2Mock()
    var viewController: ProductSelectionViewControllableV2 {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
}

class MenuViewControllableMock: MenuViewControllable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MenuViewControllerListener? = nil
    var listener: MenuViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var reloadMenuTableViewCallCount = 0
    var reloadMenuTableViewHandler: (() -> ())?
    func reloadMenuTableView()  {
        reloadMenuTableViewCallCount += 1
    
        if let reloadMenuTableViewHandler = reloadMenuTableViewHandler {
            reloadMenuTableViewHandler()
        }
        
    }
    
    var setClientDataCallCount = 0
    var setClientDataHandler: ((MenuHeaderView.Data) -> ())?
    func setClientData(data: MenuHeaderView.Data)  {
        setClientDataCallCount += 1
    
        if let setClientDataHandler = setClientDataHandler {
            setClientDataHandler(data)
        }
        
    }
    
    var dismissCallCount = 0
    var dismissHandler: ((Bool, (() -> ())?) -> ())?
    func dismiss(animated flag: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
    
        if let dismissHandler = dismissHandler {
            dismissHandler(flag, completion)
        }
        
    }
    
    var showMenuItemCallCount = 0
    var showMenuItemHandler: ((UIViewController, ((ThemeableNavigationViewController, PlatformUI.Theme) -> ())?, Bool, Bool, (() -> ())?) -> ())?
    func showMenuItem(withViewController viewController: UIViewController, style: ((ThemeableNavigationViewController, PlatformUI.Theme) -> ())?, animated: Bool, shouldShowInFullScreen: Bool, completion: (() -> ())?)  {
        showMenuItemCallCount += 1
    
        if let showMenuItemHandler = showMenuItemHandler {
            showMenuItemHandler(viewController, style, animated, shouldShowInFullScreen, completion)
        }
        
    }
    
    var showMenuItemV2CallCount = 0
    var showMenuItemV2Handler: ((UIViewController, Bool, NavigationViewType, (() -> ())?) -> ())?
    func showMenuItemV2(withViewController viewController: UIViewController, animated: Bool, containerType: NavigationViewType, completion: (() -> ())?)  {
        showMenuItemV2CallCount += 1
    
        if let showMenuItemV2Handler = showMenuItemV2Handler {
            showMenuItemV2Handler(viewController, animated, containerType, completion)
        }
        
    }
    
    var hideDisplayedMenuItemCallCount = 0
    var hideDisplayedMenuItemHandler: (((() -> ())?) -> ())?
    func hideDisplayedMenuItem(completion: (() -> ())?)  {
        hideDisplayedMenuItemCallCount += 1
    
        if let hideDisplayedMenuItemHandler = hideDisplayedMenuItemHandler {
            hideDisplayedMenuItemHandler(completion)
        }
        
    }
    
    var presentRiderInfoCallCount = 0
    var presentRiderInfoHandler: ((ViewControllable?) -> ())?
    func presentRiderInfo(viewControllable: ViewControllable?)  {
        presentRiderInfoCallCount += 1
    
        if let presentRiderInfoHandler = presentRiderInfoHandler {
            presentRiderInfoHandler(viewControllable)
        }
        
    }
    
    var dismissHubMessagingMenuItemCallCount = 0
    var dismissHubMessagingMenuItemHandler: (() -> ())?
    func dismissHubMessagingMenuItem()  {
        dismissHubMessagingMenuItemCallCount += 1
    
        if let dismissHubMessagingMenuItemHandler = dismissHubMessagingMenuItemHandler {
            dismissHubMessagingMenuItemHandler()
        }
        
    }
    
    var presentHubMessagingMenuItemCallCount = 0
    var presentHubMessagingMenuItemHandler: ((ViewControllable) -> ())?
    func presentHubMessagingMenuItem(viewController: ViewControllable)  {
        presentHubMessagingMenuItemCallCount += 1
    
        if let presentHubMessagingMenuItemHandler = presentHubMessagingMenuItemHandler {
            presentHubMessagingMenuItemHandler(viewController)
        }
        
    }
    
    var showTopMenuItemCallCount = 0
    var showTopMenuItemHandler: ((ViewControllable?) -> ())?
    func showTopMenuItem(with viewController: ViewControllable?)  {
        showTopMenuItemCallCount += 1
    
        if let showTopMenuItemHandler = showTopMenuItemHandler {
            showTopMenuItemHandler(viewController)
        }
        
    }
    
    var hideTopMenuItemCallCount = 0
    var hideTopMenuItemHandler: (() -> ())?
    func hideTopMenuItem()  {
        hideTopMenuItemCallCount += 1
    
        if let hideTopMenuItemHandler = hideTopMenuItemHandler {
            hideTopMenuItemHandler()
        }
        
    }
}

class ConfirmationAlertPresentableMock: ConfirmationAlertPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationAlertPresentableListener? = nil
    var listener: ConfirmationAlertPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateAlertViewModelCallCount = 0
    var updateAlertViewModelHandler: ((ConfirmationAlertViewModel?) -> ())?
    func updateAlertViewModel(_ alertViewModel: ConfirmationAlertViewModel?)  {
        updateAlertViewModelCallCount += 1
    
        if let updateAlertViewModelHandler = updateAlertViewModelHandler {
            updateAlertViewModelHandler(alertViewModel)
        }
        
    }
}

class ProductSelectionViewControllableV2Mock: ProductSelectionViewControllableV2 {

    
    init() {}
    init(recommendedProductsCount: Int = 0, currentState: ProductSelectionViewState, uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.recommendedProductsCount = recommendedProductsCount
        self.currentState = currentState
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionViewControllableListenerV2? = nil
    var listener: ProductSelectionViewControllableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var recommendedProductsCountSetCallCount = 0
    var underlyingRecommendedProductsCount: Int = 0
    var recommendedProductsCount: Int {
        get {
            return underlyingRecommendedProductsCount
        }
        set {
            underlyingRecommendedProductsCount = newValue
            recommendedProductsCountSetCallCount += 1
        }
    }
    
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ProductSelectionViewState! 
    var currentState: ProductSelectionViewState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
    
    var updateCollectionViewCallCount = 0
    var updateCollectionViewHandler: ((Int, [UICollectionViewCell.Type]) -> ())?
    func updateCollectionView(numberOfCategories: Int, cellTypes: [UICollectionViewCell.Type])  {
        updateCollectionViewCallCount += 1
    
        if let updateCollectionViewHandler = updateCollectionViewHandler {
            updateCollectionViewHandler(numberOfCategories, cellTypes)
        }
        
    }
    
    var updateCollectionViewNumberOfCategoriesCallCount = 0
    var updateCollectionViewNumberOfCategoriesHandler: ((Int) -> ())?
    func updateCollectionView(numberOfCategories: Int)  {
        updateCollectionViewNumberOfCategoriesCallCount += 1
    
        if let updateCollectionViewNumberOfCategoriesHandler = updateCollectionViewNumberOfCategoriesHandler {
            updateCollectionViewNumberOfCategoriesHandler(numberOfCategories)
        }
        
    }
    
    var updateCollectionViewChangeSetCallCount = 0
    var updateCollectionViewChangeSetHandler: ((StagedChangeset<[ArraySection<ProductSelectionCategoryViewModel, ProductCellDifferentiable>]>, @escaping ([ProductSelectionCategoryViewModel]) -> ()) -> ())?
    func updateCollectionView(changeSet: StagedChangeset<[ArraySection<ProductSelectionCategoryViewModel, ProductCellDifferentiable>]>, setData: @escaping ([ProductSelectionCategoryViewModel]) -> ())  {
        updateCollectionViewChangeSetCallCount += 1
    
        if let updateCollectionViewChangeSetHandler = updateCollectionViewChangeSetHandler {
            updateCollectionViewChangeSetHandler(changeSet, setData)
        }
        
    }
    
    var updateNumberOfRecommendedProductsCallCount = 0
    var updateNumberOfRecommendedProductsHandler: ((Int) -> ())?
    func updateNumberOfRecommendedProducts(_ count: Int)  {
        updateNumberOfRecommendedProductsCallCount += 1
    
        if let updateNumberOfRecommendedProductsHandler = updateNumberOfRecommendedProductsHandler {
            updateNumberOfRecommendedProductsHandler(count)
        }
        
    }
    
    var viewModelUpdatedCallCount = 0
    var viewModelUpdatedHandler: ((Set<IndexPath>) -> ())?
    func viewModelUpdated(atIndexPaths indexPaths: Set<IndexPath>)  {
        viewModelUpdatedCallCount += 1
    
        if let viewModelUpdatedHandler = viewModelUpdatedHandler {
            viewModelUpdatedHandler(indexPaths)
        }
        
    }
    
    var productSelectedCallCount = 0
    var productSelectedHandler: ((IndexPath) -> ())?
    func productSelected(atIndexPath indexPath: IndexPath)  {
        productSelectedCallCount += 1
    
        if let productSelectedHandler = productSelectedHandler {
            productSelectedHandler(indexPath)
        }
        
    }
    
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var setProductSelectionViewStateCallCount = 0
    var setProductSelectionViewStateHandler: ((ProductSelectionViewState, Bool, (() -> ())?) -> ())?
    func setProductSelectionViewState(_ state: ProductSelectionViewState, animated: Bool, onCompletion: (() -> ())?)  {
        setProductSelectionViewStateCallCount += 1
    
        if let setProductSelectionViewStateHandler = setProductSelectionViewStateHandler {
            setProductSelectionViewStateHandler(state, animated, onCompletion)
        }
        
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
    
    var showAlertViewControllableCallCount = 0
    var showAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showAlertViewControllableCallCount += 1
    
        if let showAlertViewControllableHandler = showAlertViewControllableHandler {
            showAlertViewControllableHandler(alertViewControllable)
        }
        
    }
}

class DeviceLocationWorkingMock: DeviceLocationWorking {

    

    init() {

    }
    
}

public class ModeViewListenerMock: ModeViewListener {

    

    public init() {

    }
        
    var embedModeNavigationCallCount = 0
    public var embedModeNavigationHandler: ((ModeNavigationViewControllable) -> ())?
    public func embedModeNavigation(viewController: ModeNavigationViewControllable)  {
        embedModeNavigationCallCount += 1
    
        if let embedModeNavigationHandler = embedModeNavigationHandler {
            embedModeNavigationHandler(viewController)
        }
        
    }
    
    var removeCurrentModeNavigationCallCount = 0
    public var removeCurrentModeNavigationHandler: (() -> ())?
    public func removeCurrentModeNavigation()  {
        removeCurrentModeNavigationCallCount += 1
    
        if let removeCurrentModeNavigationHandler = removeCurrentModeNavigationHandler {
            removeCurrentModeNavigationHandler()
        }
        
    }
}

class ConfirmationPresentableListenerV2Mock: ConfirmationPresentableListenerV2 {

    

    init() {

    }
        
    var didTapDestinationEntryCallCount = 0
    var didTapDestinationEntryHandler: (() -> ())?
    func didTapDestinationEntry()  {
        didTapDestinationEntryCallCount += 1
    
        if let didTapDestinationEntryHandler = didTapDestinationEntryHandler {
            didTapDestinationEntryHandler()
        }
        
    }
}

class ProductSelectionViewControllableListenerV2Mock: ProductSelectionViewControllableListenerV2 {

    

    init() {

    }
        
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: ((IndexPath) -> (ProductSelectionCellViewModel?))?
    func viewModelForCell(at indexPath: IndexPath) -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler(indexPath)
        }
        return nil
    }
    
    var categoryTitleCallCount = 0
    var categoryTitleHandler: ((Int) -> (String?))?
    func categoryTitle(for section: Int) -> String? {
        categoryTitleCallCount += 1
    
        if let categoryTitleHandler = categoryTitleHandler {
            return categoryTitleHandler(section)
        }
        return nil
    }
    
    var numberOfProductsCallCount = 0
    var numberOfProductsHandler: ((Int) -> (Int))?
    func numberOfProducts(inSection section: Int) -> Int {
        numberOfProductsCallCount += 1
    
        if let numberOfProductsHandler = numberOfProductsHandler {
            return numberOfProductsHandler(section)
        }
        return 0
    }
    
    var didSelectCellCallCount = 0
    var didSelectCellHandler: ((IndexPath, ProductSelectionViewState) -> ())?
    func didSelectCell(at indexPath: IndexPath, viewState: ProductSelectionViewState)  {
        didSelectCellCallCount += 1
    
        if let didSelectCellHandler = didSelectCellHandler {
            didSelectCellHandler(indexPath, viewState)
        }
        
    }
    
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didUpdateRecommendedCompareTransitionProgressCallCount = 0
    var didUpdateRecommendedCompareTransitionProgressHandler: (() -> ())?
    func didUpdateRecommendedCompareTransitionProgress()  {
        didUpdateRecommendedCompareTransitionProgressCallCount += 1
    
        if let didUpdateRecommendedCompareTransitionProgressHandler = didUpdateRecommendedCompareTransitionProgressHandler {
            didUpdateRecommendedCompareTransitionProgressHandler()
        }
        
    }
    
    var didUpdateViewStateCallCount = 0
    var didUpdateViewStateHandler: (() -> ())?
    func didUpdateViewState()  {
        didUpdateViewStateCallCount += 1
    
        if let didUpdateViewStateHandler = didUpdateViewStateHandler {
            didUpdateViewStateHandler()
        }
        
    }
    
    var productCellCallCount = 0
    var productCellHandler: ((IndexPath) -> (ProductCell?))?
    func productCell(at indexPath: IndexPath) -> ProductCell? {
        productCellCallCount += 1
    
        if let productCellHandler = productCellHandler {
            return productCellHandler(indexPath)
        }
        return nil
    }
    
    var bindCallCount = 0
    var bindHandler: ((ProductCell, ProductCollectionViewCellDisplayable) -> ())?
    func bind(productCell: ProductCell, viewCell: ProductCollectionViewCellDisplayable)  {
        bindCallCount += 1
    
        if let bindHandler = bindHandler {
            bindHandler(productCell, viewCell)
        }
        
    }
    
    var unbindCallCount = 0
    var unbindHandler: ((ProductCell) -> ())?
    func unbind(productCell: ProductCell)  {
        unbindCallCount += 1
    
        if let unbindHandler = unbindHandler {
            unbindHandler(productCell)
        }
        
    }
}

class MenuRoutingMock: MenuRouting {

    
    init() {}
    init(interactor: MenuInteractable = MenuInteractableMock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: MenuInteractable = MenuInteractableMock()
    var interactor: MenuInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeToMenuItemCallCount = 0
    var routeToMenuItemHandler: ((MenuItemPresentingInternal) -> ())?
    func routeToMenuItem(item: MenuItemPresentingInternal)  {
        routeToMenuItemCallCount += 1
    
        if let routeToMenuItemHandler = routeToMenuItemHandler {
            routeToMenuItemHandler(item)
        }
        
    }
    
    var routeToMenuItemAnimatedCallCount = 0
    var routeToMenuItemAnimatedHandler: ((MenuItemPresentingInternal, Bool, ((MenuItemActionableItem) -> ())?) -> ())?
    func routeToMenuItem(item: MenuItemPresentingInternal, animated: Bool, completion: ((MenuItemActionableItem) -> ())?)  {
        routeToMenuItemAnimatedCallCount += 1
    
        if let routeToMenuItemAnimatedHandler = routeToMenuItemAnimatedHandler {
            routeToMenuItemAnimatedHandler(item, animated, completion)
        }
        
    }
    
    var detachCurrentMenuItemCallCount = 0
    var detachCurrentMenuItemHandler: (((() -> ())?) -> ())?
    func detachCurrentMenuItem(completion: (() -> ())?)  {
        detachCurrentMenuItemCallCount += 1
    
        if let detachCurrentMenuItemHandler = detachCurrentMenuItemHandler {
            detachCurrentMenuItemHandler(completion)
        }
        
    }
    
    var routeToRiderInfoCallCount = 0
    var routeToRiderInfoHandler: ((RiderInfoPlugin?) -> ())?
    func routeToRiderInfo(riderInfoPlugin: RiderInfoPlugin?)  {
        routeToRiderInfoCallCount += 1
    
        if let routeToRiderInfoHandler = routeToRiderInfoHandler {
            routeToRiderInfoHandler(riderInfoPlugin)
        }
        
    }
    
    var routeToRiderInfoDetailCallCount = 0
    var routeToRiderInfoDetailHandler: ((UIViewController) -> ())?
    func routeToRiderInfoDetail(withViewController viewController: UIViewController)  {
        routeToRiderInfoDetailCallCount += 1
    
        if let routeToRiderInfoDetailHandler = routeToRiderInfoDetailHandler {
            routeToRiderInfoDetailHandler(viewController)
        }
        
    }
    
    var routeAwayFromRiderInfoDetailCallCount = 0
    var routeAwayFromRiderInfoDetailHandler: (() -> ())?
    func routeAwayFromRiderInfoDetail()  {
        routeAwayFromRiderInfoDetailCallCount += 1
    
        if let routeAwayFromRiderInfoDetailHandler = routeAwayFromRiderInfoDetailHandler {
            routeAwayFromRiderInfoDetailHandler()
        }
        
    }
    
    var routeFromHubMessagingCallCount = 0
    var routeFromHubMessagingHandler: (() -> ())?
    func routeFromHubMessaging()  {
        routeFromHubMessagingCallCount += 1
    
        if let routeFromHubMessagingHandler = routeFromHubMessagingHandler {
            routeFromHubMessagingHandler()
        }
        
    }
    
    var routeToHubMessagingCallCount = 0
    var routeToHubMessagingHandler: ((HubMessagingRouting) -> ())?
    func routeToHubMessaging(router: HubMessagingRouting)  {
        routeToHubMessagingCallCount += 1
    
        if let routeToHubMessagingHandler = routeToHubMessagingHandler {
            routeToHubMessagingHandler(router)
        }
        
    }
    
    var routeFromHubMessagingMenuItemCallCount = 0
    var routeFromHubMessagingMenuItemHandler: (() -> ())?
    func routeFromHubMessagingMenuItem()  {
        routeFromHubMessagingMenuItemCallCount += 1
    
        if let routeFromHubMessagingMenuItemHandler = routeFromHubMessagingMenuItemHandler {
            routeFromHubMessagingMenuItemHandler()
        }
        
    }
    
    var routeToHubMessagingMenuItemCallCount = 0
    var routeToHubMessagingMenuItemHandler: ((HubMessagingMenuItemBuildable) -> ())?
    func routeToHubMessagingMenuItem(builder: HubMessagingMenuItemBuildable)  {
        routeToHubMessagingMenuItemCallCount += 1
    
        if let routeToHubMessagingMenuItemHandler = routeToHubMessagingMenuItemHandler {
            routeToHubMessagingMenuItemHandler(builder)
        }
        
    }
    
    var routeToTopMenuItemCallCount = 0
    var routeToTopMenuItemHandler: ((TopMenuItemPluginBuildable) -> ())?
    func routeToTopMenuItem(builder: TopMenuItemPluginBuildable)  {
        routeToTopMenuItemCallCount += 1
    
        if let routeToTopMenuItemHandler = routeToTopMenuItemHandler {
            routeToTopMenuItemHandler(builder)
        }
        
    }
    
    var routeFromTopMenuItemCallCount = 0
    var routeFromTopMenuItemHandler: (() -> ())?
    func routeFromTopMenuItem()  {
        routeFromTopMenuItemCallCount += 1
    
        if let routeFromTopMenuItemHandler = routeFromTopMenuItemHandler {
            routeFromTopMenuItemHandler()
        }
        
    }
    
    var routeToTopMenuItemDetailCallCount = 0
    var routeToTopMenuItemDetailHandler: ((ViewableRouting, Bool) -> ())?
    func routeToTopMenuItemDetail(router: ViewableRouting, fullScreen: Bool)  {
        routeToTopMenuItemDetailCallCount += 1
    
        if let routeToTopMenuItemDetailHandler = routeToTopMenuItemDetailHandler {
            routeToTopMenuItemDetailHandler(router, fullScreen)
        }
        
    }
}

class TripInteractableMock: TripInteractable {

    

    init() {

    }
        
    var cancelTripWithoutConfirmingCallCount = 0
    var cancelTripWithoutConfirmingHandler: (() -> ())?
    func cancelTripWithoutConfirming()  {
        cancelTripWithoutConfirmingCallCount += 1
    
        if let cancelTripWithoutConfirmingHandler = cancelTripWithoutConfirmingHandler {
            cancelTripWithoutConfirmingHandler()
        }
        
    }
    
    var tripDetailsDidCancelTripCallCount = 0
    var tripDetailsDidCancelTripHandler: (() -> ())?
    func tripDetailsDidCancelTrip()  {
        tripDetailsDidCancelTripCallCount += 1
    
        if let tripDetailsDidCancelTripHandler = tripDetailsDidCancelTripHandler {
            tripDetailsDidCancelTripHandler()
        }
        
    }
    
    var tripDetailsWillPresentEmergencyModalCallCount = 0
    var tripDetailsWillPresentEmergencyModalHandler: (() -> ())?
    func tripDetailsWillPresentEmergencyModal()  {
        tripDetailsWillPresentEmergencyModalCallCount += 1
    
        if let tripDetailsWillPresentEmergencyModalHandler = tripDetailsWillPresentEmergencyModalHandler {
            tripDetailsWillPresentEmergencyModalHandler()
        }
        
    }
    
    var tripDetailsWillDismissEmergencyModalCallCount = 0
    var tripDetailsWillDismissEmergencyModalHandler: ((Bool) -> ())?
    func tripDetailsWillDismissEmergencyModal(userDismissed: Bool)  {
        tripDetailsWillDismissEmergencyModalCallCount += 1
    
        if let tripDetailsWillDismissEmergencyModalHandler = tripDetailsWillDismissEmergencyModalHandler {
            tripDetailsWillDismissEmergencyModalHandler(userDismissed)
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: TripRouting? = nil
    var router: TripRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: TripInteractorListener? = nil
    var listener: TripInteractorListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var displayAlertCallCount = 0
    var displayAlertHandler: ((String?, String) -> ())?
    func displayAlert(title: String?, message: String)  {
        displayAlertCallCount += 1
    
        if let displayAlertHandler = displayAlertHandler {
            displayAlertHandler(title, message)
        }
        
    }
    
    var didAttachFeedCallCount = 0
    var didAttachFeedHandler: ((FeedInteractable) -> ())?
    func didAttachFeed(feedInteractor: FeedInteractable)  {
        didAttachFeedCallCount += 1
    
        if let didAttachFeedHandler = didAttachFeedHandler {
            didAttachFeedHandler(feedInteractor)
        }
        
    }
    
    var didDetachFeedCallCount = 0
    var didDetachFeedHandler: (() -> ())?
    func didDetachFeed()  {
        didDetachFeedCallCount += 1
    
        if let didDetachFeedHandler = didDetachFeedHandler {
            didDetachFeedHandler()
        }
        
    }
}

class ContentViewControllableMock: ContentViewControllable {

    

    init() {

    }
        
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var pushNavigationViewControllerWithViewControllerCallCount = 0
    var pushNavigationViewControllerWithViewControllerHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
    func pushNavigationViewControllerWithViewController(viewController: UIViewController, animated flag: Bool, completion: (() -> ())?)  {
        pushNavigationViewControllerWithViewControllerCallCount += 1
    
        if let pushNavigationViewControllerWithViewControllerHandler = pushNavigationViewControllerWithViewControllerHandler {
            pushNavigationViewControllerWithViewControllerHandler(viewController, flag, completion)
        }
        
    }
}

class ConfirmationActionRequestPresentableMock: ConfirmationActionRequestPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationActionRequestPresenterListener? = nil
    var listener: ConfirmationActionRequestPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showNextStepCallCount = 0
    var showNextStepHandler: ((ConfirmationNextStep) -> (Disposable))?
    func showNextStep(_ nextStep: ConfirmationNextStep) -> Disposable {
        showNextStepCallCount += 1
    
        if let showNextStepHandler = showNextStepHandler {
            return showNextStepHandler(nextStep)
        }
        fatalError("showNextStepHandler returns can't have a default value thus its handler must be set")
    }
    
    var setNextStepStyleCallCount = 0
    var setNextStepStyleHandler: ((ConfirmationActionRequestStyling) -> ())?
    func setNextStepStyle(_ confirmationActionRequestStyle: ConfirmationActionRequestStyling)  {
        setNextStepStyleCallCount += 1
    
        if let setNextStepStyleHandler = setNextStepStyleHandler {
            setNextStepStyleHandler(confirmationActionRequestStyle)
        }
        
    }
    
    var setNextStepEnabledCallCount = 0
    var setNextStepEnabledHandler: ((Bool) -> ())?
    func setNextStepEnabled(_ isEnabled: Bool)  {
        setNextStepEnabledCallCount += 1
    
        if let setNextStepEnabledHandler = setNextStepEnabledHandler {
            setNextStepEnabledHandler(isEnabled)
        }
        
    }
}

class ProductSelectionPresenterListenerMock: ProductSelectionPresenterListener {

    

    init() {

    }
        
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductId) -> ())?
    func selectProduct(id: ProductId)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(id)
        }
        
    }
    
    var imageForProductCallCount = 0
    var imageForProductHandler: ((ProductImageTypeSet, @escaping (ProductImageMap?) -> ()) -> ())?
    func imageForProduct(imageSet: ProductImageTypeSet, completion: @escaping (ProductImageMap?) -> ())  {
        imageForProductCallCount += 1
    
        if let imageForProductHandler = imageForProductHandler {
            imageForProductHandler(imageSet, completion)
        }
        
    }
    
    var fareBindingRequestForProductCallCount = 0
    var fareBindingRequestForProductHandler: ((ProductId, String?, FareBindingType?) -> (FareBindingRequest?))?
    func fareBindingRequestForProduct(id: ProductId, placeholder: String?, bindingType: FareBindingType?) -> FareBindingRequest? {
        fareBindingRequestForProductCallCount += 1
    
        if let fareBindingRequestForProductHandler = fareBindingRequestForProductHandler {
            return fareBindingRequestForProductHandler(id, placeholder, bindingType)
        }
        return nil
    }
    
    var didDismissUpsellCallCount = 0
    var didDismissUpsellHandler: ((Upsell) -> ())?
    func didDismissUpsell(upsell: Upsell)  {
        didDismissUpsellCallCount += 1
    
        if let didDismissUpsellHandler = didDismissUpsellHandler {
            didDismissUpsellHandler(upsell)
        }
        
    }
    
    var didShowTooltipCallCount = 0
    var didShowTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func didShowTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        didShowTooltipCallCount += 1
    
        if let didShowTooltipHandler = didShowTooltipHandler {
            didShowTooltipHandler(viewModel)
        }
        
    }
}

class TripDetailsSectionProvidingMock: TripDetailsSectionProviding {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: TripDetailsPresentableListener? = nil
    var listener: TripDetailsPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var setRowSlotConfigCallCount = 0
    var setRowSlotConfigHandler: ((TripDetailsRowSlotConfig) -> ())?
    func setRowSlotConfig(_ config: TripDetailsRowSlotConfig)  {
        setRowSlotConfigCallCount += 1
    
        if let setRowSlotConfigHandler = setRowSlotConfigHandler {
            setRowSlotConfigHandler(config)
        }
        
    }
    
    var setRowsCallCount = 0
    var setRowsHandler: (([(slot: TripDetailsRowSlot, view: TripDetailsRowViewControllable)]) -> ())?
    func setRows(_ rows: [(slot: TripDetailsRowSlot, view: TripDetailsRowViewControllable)])  {
        setRowsCallCount += 1
    
        if let setRowsHandler = setRowsHandler {
            setRowsHandler(rows)
        }
        
    }
}

class ConfirmationRoutingV2Mock: ConfirmationRoutingV2 {

    
    init() {}
    init(interactor: ConfirmationInteractableV2 = ConfirmationInteractableV2Mock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ConfirmationInteractableV2 = ConfirmationInteractableV2Mock()
    var interactor: ConfirmationInteractableV2 {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((ConfirmationMapBuildable) -> ())?
    func routeToMap(builder: ConfirmationMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToActionCallCount = 0
    var routeToActionHandler: ((ConfirmationActionRouting) -> ())?
    func routeToAction(_ actionRouter: ConfirmationActionRouting)  {
        routeToActionCallCount += 1
    
        if let routeToActionHandler = routeToActionHandler {
            routeToActionHandler(actionRouter)
        }
        
    }
    
    var routeToConfirmationActionAccessoryCallCount = 0
    var routeToConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryRouting?) -> ())?
    func routeToConfirmationActionAccessory(accessory: ConfirmationActionAccessoryRouting?)  {
        routeToConfirmationActionAccessoryCallCount += 1
    
        if let routeToConfirmationActionAccessoryHandler = routeToConfirmationActionAccessoryHandler {
            routeToConfirmationActionAccessoryHandler(accessory)
        }
        
    }
    
    var routeToConfirmationStateCallCount = 0
    var routeToConfirmationStateHandler: ((ConfirmationState) -> ())?
    func routeToConfirmationState(_ confirmationState: ConfirmationState)  {
        routeToConfirmationStateCallCount += 1
    
        if let routeToConfirmationStateHandler = routeToConfirmationStateHandler {
            routeToConfirmationStateHandler(confirmationState)
        }
        
    }
    
    var clearAllStatesCallCount = 0
    var clearAllStatesHandler: (() -> ())?
    func clearAllStates()  {
        clearAllStatesCallCount += 1
    
        if let clearAllStatesHandler = clearAllStatesHandler {
            clearAllStatesHandler()
        }
        
    }
}

public class MutableAppShortcutItemHandlerStreamingMock: MutableAppShortcutItemHandlerStreaming {

    
    public init() {}
    public init(handler: Observable<AppShortcutItemHandling> = PublishSubject()) {
        self.handler = handler
    }
        
    private var handlerSubjectKind = 0
    var handlerSubjectSetCallCount = 0
    var handlerSubject = PublishSubject<AppShortcutItemHandling>() { didSet { handlerSubjectSetCallCount += 1 } }
    var handlerReplaySubject = ReplaySubject<AppShortcutItemHandling>.create(bufferSize: 1) { didSet { handlerSubjectSetCallCount += 1 } }
    var handlerBehaviorSubject: BehaviorSubject<AppShortcutItemHandling>! { didSet { handlerSubjectSetCallCount += 1 } }
    var handlerRxSubject: Observable<AppShortcutItemHandling>! { didSet { handlerSubjectSetCallCount += 1 } }
    public var handler: Observable<AppShortcutItemHandling> {
        get {
            if handlerSubjectKind == 0 {
                return handlerSubject
            } else if handlerSubjectKind == 1 {
                return handlerBehaviorSubject
            } else if handlerSubjectKind == 2 {
                return handlerReplaySubject
            } else {
                return handlerRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<AppShortcutItemHandling> {
                handlerSubject = val
                handlerSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<AppShortcutItemHandling> {
                handlerBehaviorSubject = val
                handlerSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<AppShortcutItemHandling> {
                handlerReplaySubject = val
                handlerSubjectKind = 2
            } else {
                handlerRxSubject = newValue
                handlerSubjectKind = 3
            }
        }
    }
    
    var updateHandlerCallCount = 0
    public var updateHandlerHandler: ((AppShortcutItemHandling) -> ())?
    public func updateHandler(_ handler: AppShortcutItemHandling)  {
        updateHandlerCallCount += 1
    
        if let updateHandlerHandler = updateHandlerHandler {
            updateHandlerHandler(handler)
        }
        
    }
}

class HomePresentableListenerV2Mock: HomePresentableListenerV2 {

    

    init() {

    }
        
    var didTapDimmingViewCallCount = 0
    var didTapDimmingViewHandler: (() -> ())?
    func didTapDimmingView()  {
        didTapDimmingViewCallCount += 1
    
        if let didTapDimmingViewHandler = didTapDimmingViewHandler {
            didTapDimmingViewHandler()
        }
        
    }
    
    var didTapBackToUberHomeCallCount = 0
    var didTapBackToUberHomeHandler: (() -> ())?
    func didTapBackToUberHome()  {
        didTapBackToUberHomeCallCount += 1
    
        if let didTapBackToUberHomeHandler = didTapBackToUberHomeHandler {
            didTapBackToUberHomeHandler()
        }
        
    }
}

class MainInteractableMock: MainInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: MainRouting? = nil
    var router: MainRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var wantHideMenuCallCount = 0
    var wantHideMenuHandler: (((() -> ())?) -> ())?
    func wantHideMenu(completion: (() -> ())?)  {
        wantHideMenuCallCount += 1
    
        if let wantHideMenuHandler = wantHideMenuHandler {
            wantHideMenuHandler(completion)
        }
        
    }
    
    var openMenuItemCallCount = 0
    var openMenuItemHandler: ((MenuItemRouting, Bool) -> (Observable<(MenuItemActionableItem, ())>))?
    func openMenuItem(_ menuItem: MenuItemRouting, shouldShowInFullScreen: Bool) -> Observable<(MenuItemActionableItem, ())> {
        openMenuItemCallCount += 1
    
        if let openMenuItemHandler = openMenuItemHandler {
            return openMenuItemHandler(menuItem, shouldShowInFullScreen)
        }
        return Observable.empty()
    }
}

class PlusOneViewControllableMock: PlusOneViewControllable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: PlusOneViewControllerListener? = nil
    var listener: PlusOneViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showStepViewControllerCallCount = 0
    var showStepViewControllerHandler: ((PlusOneStepViewControllable) -> ())?
    func showStepViewController(stepViewController: PlusOneStepViewControllable)  {
        showStepViewControllerCallCount += 1
    
        if let showStepViewControllerHandler = showStepViewControllerHandler {
            showStepViewControllerHandler(stepViewController)
        }
        
    }
    
    var hideStepViewControllerCallCount = 0
    var hideStepViewControllerHandler: ((Bool, Bool, (() -> ())?) -> ())?
    func hideStepViewController(hasNextStep: Bool, animated: Bool, completion: (() -> ())?)  {
        hideStepViewControllerCallCount += 1
    
        if let hideStepViewControllerHandler = hideStepViewControllerHandler {
            hideStepViewControllerHandler(hasNextStep, animated, completion)
        }
        
    }
}

public class ProductSelectionManagingMock: ProductSelectionManaging {

    

    public init() {

    }
        
    var selectProductCallCount = 0
    public var selectProductHandler: ((ProductId) -> ())?
    public func selectProduct(productId: ProductId)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(productId)
        }
        
    }
}

class OutOfCoverageBuildableMock: OutOfCoverageBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (OutOfCoverageRouting))?
    func build() -> OutOfCoverageRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return OutOfCoverageRoutingMock()
    }
}

class ProductSelectionViewControllerListenerMock: ProductSelectionViewControllerListener {

    

    init() {

    }
        
    var bindFareCallCount = 0
    var bindFareHandler: ((FareBindingRequesting, PricingLabel) -> ())?
    func bindFare(fareRequest: FareBindingRequesting, target: PricingLabel)  {
        bindFareCallCount += 1
    
        if let bindFareHandler = bindFareHandler {
            bindFareHandler(fareRequest, target)
        }
        
    }
    
    var didSelectProductCallCount = 0
    var didSelectProductHandler: ((ProductId?) -> ())?
    func didSelectProduct(associatedId: ProductId?)  {
        didSelectProductCallCount += 1
    
        if let didSelectProductHandler = didSelectProductHandler {
            didSelectProductHandler(associatedId)
        }
        
    }
    
    var didShowTooltipCallCount = 0
    var didShowTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func didShowTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        didShowTooltipCallCount += 1
    
        if let didShowTooltipHandler = didShowTooltipHandler {
            didShowTooltipHandler(viewModel)
        }
        
    }
    
    var imagesForProductCallCount = 0
    var imagesForProductHandler: ((ProductViewModel, @escaping (ProductImageMap?) -> ()) -> ())?
    func imagesForProduct(productViewModel: ProductViewModel, completion: @escaping (ProductImageMap?) -> ())  {
        imagesForProductCallCount += 1
    
        if let imagesForProductHandler = imagesForProductHandler {
            imagesForProductHandler(productViewModel, completion)
        }
        
    }
    
    var didShowPricingViewForProductCallCount = 0
    var didShowPricingViewForProductHandler: ((ProductId, Any, String?, FareBindingType?) -> ())?
    func didShowPricingViewForProduct<T>(associatedId: ProductId, pricingView: T, placeholder: String?, fareBindingType: FareBindingType?)  {
        didShowPricingViewForProductCallCount += 1
    
        if let didShowPricingViewForProductHandler = didShowPricingViewForProductHandler {
            didShowPricingViewForProductHandler(associatedId, pricingView, placeholder, fareBindingType)
        }
        
    }
}

class SelectedProductConfigurationViewControllableMock: SelectedProductConfigurationViewControllable {

    
    init() {}
    init(listViewHeight: CGFloat = 0.0) {
        self.listViewHeight = listViewHeight
    }
        
    var viewListenerSetCallCount = 0
    var underlyingViewListener: SelectedProductConfigurationViewControllerViewListener? = nil
    var viewListener: SelectedProductConfigurationViewControllerViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
    
    var listViewHeightSetCallCount = 0
    var underlyingListViewHeight: CGFloat = 0.0
    var listViewHeight: CGFloat {
        get {
            return underlyingListViewHeight
        }
        set {
            underlyingListViewHeight = newValue
            listViewHeightSetCallCount += 1
        }
    }
    
    var presentConfigurationChildCallCount = 0
    var presentConfigurationChildHandler: ((ViewControllable) -> ())?
    func presentConfigurationChild(viewController: ViewControllable)  {
        presentConfigurationChildCallCount += 1
    
        if let presentConfigurationChildHandler = presentConfigurationChildHandler {
            presentConfigurationChildHandler(viewController)
        }
        
    }
    
    var dismissConfigurationChildCallCount = 0
    var dismissConfigurationChildHandler: (() -> ())?
    func dismissConfigurationChild()  {
        dismissConfigurationChildCallCount += 1
    
        if let dismissConfigurationChildHandler = dismissConfigurationChildHandler {
            dismissConfigurationChildHandler()
        }
        
    }
}

class MainRoutingMock: MainRouting {

    
    init() {}
    init(mainActionableItem: MainActionableItem, modeActionableItemStream: Observable<ModeActionableItem?> = PublishSubject()) {
        self.mainActionableItem = mainActionableItem
        self.modeActionableItemStream = modeActionableItemStream
    }
        
    var mainActionableItemSetCallCount = 0
    var underlyingMainActionableItem: MainActionableItem! 
    var mainActionableItem: MainActionableItem {
        get {
            return underlyingMainActionableItem
        }
        set {
            underlyingMainActionableItem = newValue
            mainActionableItemSetCallCount += 1
        }
    }
    
    var presentMenuCallCount = 0
    var presentMenuHandler: ((Bool) -> ())?
    func presentMenu(animated: Bool)  {
        presentMenuCallCount += 1
    
        if let presentMenuHandler = presentMenuHandler {
            presentMenuHandler(animated)
        }
        
    }
    
    var presentMenuLandingUrlCallCount = 0
    var presentMenuLandingUrlHandler: ((String?, Bool, ((_ menuActionableItem: MenuActionableItem?) -> ())?) -> ())?
    func presentMenu(landingUrl: String?, animated: Bool, completion: ((_ menuActionableItem: MenuActionableItem?) -> ())?)  {
        presentMenuLandingUrlCallCount += 1
    
        if let presentMenuLandingUrlHandler = presentMenuLandingUrlHandler {
            presentMenuLandingUrlHandler(landingUrl, animated, completion)
        }
        
    }
    
    var attachMenuCallCount = 0
    var attachMenuHandler: ((String?) -> (MenuRouting))?
    func attachMenu(landingUrl: String?) -> MenuRouting {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            return attachMenuHandler(landingUrl)
        }
        return MenuRoutingMock()
    }
    
    var hideMenuCallCount = 0
    var hideMenuHandler: (((() -> ())?) -> ())?
    func hideMenu(completion: (() -> ())?)  {
        hideMenuCallCount += 1
    
        if let hideMenuHandler = hideMenuHandler {
            hideMenuHandler(completion)
        }
        
    }
    
    var routeAwayFromCurrentMenuCallCount = 0
    var routeAwayFromCurrentMenuHandler: (((() -> ())?) -> ())?
    func routeAwayFromCurrentMenu(completion: (() -> ())?)  {
        routeAwayFromCurrentMenuCallCount += 1
    
        if let routeAwayFromCurrentMenuHandler = routeAwayFromCurrentMenuHandler {
            routeAwayFromCurrentMenuHandler(completion)
        }
        
    }
    
    var presentFullScreenCallCount = 0
    var presentFullScreenHandler: ((ViewableRouting, NavigationViewType) -> (Bool))?
    func presentFullScreen(router: ViewableRouting, inNavigationView: NavigationViewType) -> Bool {
        presentFullScreenCallCount += 1
    
        if let presentFullScreenHandler = presentFullScreenHandler {
            return presentFullScreenHandler(router, inNavigationView)
        }
        return false
    }
    
    var hideFullScreenCallCount = 0
    var hideFullScreenHandler: ((ViewableRouting, (() -> ())?) -> (Bool))?
    func hideFullScreen(router: ViewableRouting, completion: (() -> ())?) -> Bool {
        hideFullScreenCallCount += 1
    
        if let hideFullScreenHandler = hideFullScreenHandler {
            return hideFullScreenHandler(router, completion)
        }
        return false
    }
    
    var toggleNetworkErrorAlertCallCount = 0
    var toggleNetworkErrorAlertHandler: ((Bool) -> ())?
    func toggleNetworkErrorAlert(visible: Bool)  {
        toggleNetworkErrorAlertCallCount += 1
    
        if let toggleNetworkErrorAlertHandler = toggleNetworkErrorAlertHandler {
            toggleNetworkErrorAlertHandler(visible)
        }
        
    }
    
    var attachBugReporterCallCount = 0
    var attachBugReporterHandler: (() -> ())?
    func attachBugReporter()  {
        attachBugReporterCallCount += 1
    
        if let attachBugReporterHandler = attachBugReporterHandler {
            attachBugReporterHandler()
        }
        
    }
    
    var attachUpgradesCallCount = 0
    var attachUpgradesHandler: (() -> ())?
    func attachUpgrades()  {
        attachUpgradesCallCount += 1
    
        if let attachUpgradesHandler = attachUpgradesHandler {
            attachUpgradesHandler()
        }
        
    }
    
    private var modeActionableItemStreamSubjectKind = 0
    var modeActionableItemStreamSubjectSetCallCount = 0
    var modeActionableItemStreamSubject = PublishSubject<ModeActionableItem?>() { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStreamReplaySubject = ReplaySubject<ModeActionableItem?>.create(bufferSize: 1) { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStreamBehaviorSubject: BehaviorSubject<ModeActionableItem?>! { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStreamRxSubject: Observable<ModeActionableItem?>! { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStream: Observable<ModeActionableItem?> {
        get {
            if modeActionableItemStreamSubjectKind == 0 {
                return modeActionableItemStreamSubject
            } else if modeActionableItemStreamSubjectKind == 1 {
                return modeActionableItemStreamBehaviorSubject
            } else if modeActionableItemStreamSubjectKind == 2 {
                return modeActionableItemStreamReplaySubject
            } else {
                return modeActionableItemStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ModeActionableItem?> {
                modeActionableItemStreamSubject = val
                modeActionableItemStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ModeActionableItem?> {
                modeActionableItemStreamBehaviorSubject = val
                modeActionableItemStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ModeActionableItem?> {
                modeActionableItemStreamReplaySubject = val
                modeActionableItemStreamSubjectKind = 2
            } else {
                modeActionableItemStreamRxSubject = newValue
                modeActionableItemStreamSubjectKind = 3
            }
        }
    }
}

class DestinationPromptViewControllableMock: DestinationPromptViewControllable {

    

    init() {

    }
        
    var dismissDestinationEntryAccessoryCallCount = 0
    var dismissDestinationEntryAccessoryHandler: (() -> ())?
    func dismissDestinationEntryAccessory()  {
        dismissDestinationEntryAccessoryCallCount += 1
    
        if let dismissDestinationEntryAccessoryHandler = dismissDestinationEntryAccessoryHandler {
            dismissDestinationEntryAccessoryHandler()
        }
        
    }
    
    var presentDestinationEntryAccessoryCallCount = 0
    var presentDestinationEntryAccessoryHandler: ((UIViewController) -> ())?
    func presentDestinationEntryAccessory(viewController: UIViewController)  {
        presentDestinationEntryAccessoryCallCount += 1
    
        if let presentDestinationEntryAccessoryHandler = presentDestinationEntryAccessoryHandler {
            presentDestinationEntryAccessoryHandler(viewController)
        }
        
    }
    
    var updateBottomMarginCallCount = 0
    var updateBottomMarginHandler: ((Bool) -> ())?
    func updateBottomMargin(remove: Bool)  {
        updateBottomMarginCallCount += 1
    
        if let updateBottomMarginHandler = updateBottomMarginHandler {
            updateBottomMarginHandler(remove)
        }
        
    }
    
    var addTopAccessoryCallCount = 0
    var addTopAccessoryHandler: ((UIViewController) -> ())?
    func addTopAccessory(viewController: UIViewController)  {
        addTopAccessoryCallCount += 1
    
        if let addTopAccessoryHandler = addTopAccessoryHandler {
            addTopAccessoryHandler(viewController)
        }
        
    }
    
    var removeTopAccessoryCallCount = 0
    var removeTopAccessoryHandler: ((UIViewController) -> ())?
    func removeTopAccessory(viewController: UIViewController)  {
        removeTopAccessoryCallCount += 1
    
        if let removeTopAccessoryHandler = removeTopAccessoryHandler {
            removeTopAccessoryHandler(viewController)
        }
        
    }
}

class HomeInteractableMock: HomeInteractable {

    

    init() {

    }
        
    var updateDimmingCallCount = 0
    var updateDimmingHandler: ((CGFloat, Bool) -> ())?
    func updateDimming(to opacity: CGFloat, allowsInteraction: Bool)  {
        updateDimmingCallCount += 1
    
        if let updateDimmingHandler = updateDimmingHandler {
            updateDimmingHandler(opacity, allowsInteraction)
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: HomeRouting? = nil
    var router: HomeRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var acceleratorsListenerSetCallCount = 0
    var underlyingAcceleratorsListener: AcceleratorsListener_DEPRECATED? = nil
    var acceleratorsListener: AcceleratorsListener_DEPRECATED? {
        get {
            return underlyingAcceleratorsListener
        }
        set {
            underlyingAcceleratorsListener = newValue
            acceleratorsListenerSetCallCount += 1
        }
    }
    
    var homeListenerSetCallCount = 0
    var underlyingHomeListener: HomeListener? = nil
    var homeListener: HomeListener? {
        get {
            return underlyingHomeListener
        }
        set {
            underlyingHomeListener = newValue
            homeListenerSetCallCount += 1
        }
    }
    
    var didAttachFeedCallCount = 0
    var didAttachFeedHandler: ((FeedInteractable) -> ())?
    func didAttachFeed(feedInteractor: FeedInteractable)  {
        didAttachFeedCallCount += 1
    
        if let didAttachFeedHandler = didAttachFeedHandler {
            didAttachFeedHandler(feedInteractor)
        }
        
    }
}

class PlusOneInteractableCommonMock: PlusOneInteractableCommon {

    

    init() {

    }
        
    var plusOneListenerSetCallCount = 0
    var underlyingPlusOneListener: PlusOneInteractorListener? = nil
    var plusOneListener: PlusOneInteractorListener? {
        get {
            return underlyingPlusOneListener
        }
        set {
            underlyingPlusOneListener = newValue
            plusOneListenerSetCallCount += 1
        }
    }
}

class ProductConfigurationDataCachingMock: ProductConfigurationDataCaching {

    

    init() {

    }
        
    var saveCallCount = 0
    var saveHandler: ((RidersProductConfigurationData, CityId) -> ())?
    func save(productConfiguration: RidersProductConfigurationData, forCityId cityId: CityId)  {
        saveCallCount += 1
    
        if let saveHandler = saveHandler {
            saveHandler(productConfiguration, cityId)
        }
        
    }
    
    var productConfigurationCallCount = 0
    var productConfigurationHandler: ((CityId) -> (Observable<RidersProductConfigurationData?>))?
    func productConfiguration(forCityId cityId: CityId) -> Observable<RidersProductConfigurationData?> {
        productConfigurationCallCount += 1
    
        if let productConfigurationHandler = productConfigurationHandler {
            return productConfigurationHandler(cityId)
        }
        return Observable.empty()
    }
    
    var clearCallCount = 0
    var clearHandler: (() -> ())?
    func clear()  {
        clearCallCount += 1
    
        if let clearHandler = clearHandler {
            clearHandler()
        }
        
    }
}

class TripViewControllableMock: TripViewControllable {

    
    init() {}
    init(cardCollectionViewController: CardCollectionViewControllable, isShowingScrim: Bool = false) {
        self.cardCollectionViewController = cardCollectionViewController
        self.isShowingScrim = isShowingScrim
    }
        
    var titleSetCallCount = 0
    var underlyingTitle: String? = nil
    var title: String? {
        get {
            return underlyingTitle
        }
        set {
            underlyingTitle = newValue
            titleSetCallCount += 1
        }
    }
    
    var showTripHeaderViewControllerCallCount = 0
    public var showTripHeaderViewControllerHandler: ((TripHeaderViewControllable) -> ())?
    public func showTripHeaderViewController(viewController: TripHeaderViewControllable)  {
        showTripHeaderViewControllerCallCount += 1
    
        if let showTripHeaderViewControllerHandler = showTripHeaderViewControllerHandler {
            showTripHeaderViewControllerHandler(viewController)
        }
        
    }
    
    var cardCollectionViewControllerSetCallCount = 0
    var underlyingCardCollectionViewController: CardCollectionViewControllable! 
    var cardCollectionViewController: CardCollectionViewControllable {
        get {
            return underlyingCardCollectionViewController
        }
        set {
            underlyingCardCollectionViewController = newValue
            cardCollectionViewControllerSetCallCount += 1
        }
    }
    
    var removeTripHeaderViewControllerIfNeededCallCount = 0
    public var removeTripHeaderViewControllerIfNeededHandler: (() -> ())?
    public func removeTripHeaderViewControllerIfNeeded()  {
        removeTripHeaderViewControllerIfNeededCallCount += 1
    
        if let removeTripHeaderViewControllerIfNeededHandler = removeTripHeaderViewControllerIfNeededHandler {
            removeTripHeaderViewControllerIfNeededHandler()
        }
        
    }
    
    var navigationListenerSetCallCount = 0
    var underlyingNavigationListener: TripViewControllerListener? = nil
    var navigationListener: TripViewControllerListener? {
        get {
            return underlyingNavigationListener
        }
        set {
            underlyingNavigationListener = newValue
            navigationListenerSetCallCount += 1
        }
    }
    
    var presentTripDetailsSectionCallCount = 0
    var presentTripDetailsSectionHandler: ((TripDetailsSectionProviding) -> ())?
    func presentTripDetailsSection(_ sectionProvider: TripDetailsSectionProviding)  {
        presentTripDetailsSectionCallCount += 1
    
        if let presentTripDetailsSectionHandler = presentTripDetailsSectionHandler {
            presentTripDetailsSectionHandler(sectionProvider)
        }
        
    }
    
    var dismissTripDetailsSectionIfNeededCallCount = 0
    var dismissTripDetailsSectionIfNeededHandler: (() -> ())?
    func dismissTripDetailsSectionIfNeeded()  {
        dismissTripDetailsSectionIfNeededCallCount += 1
    
        if let dismissTripDetailsSectionIfNeededHandler = dismissTripDetailsSectionIfNeededHandler {
            dismissTripDetailsSectionIfNeededHandler()
        }
        
    }
    
    var insertSectionProviderCallCount = 0
    var insertSectionProviderHandler: ((CardCollectionViewSectionProviding, Int) -> ())?
    func insertSectionProvider(sectionProvider: CardCollectionViewSectionProviding, atIndex: Int)  {
        insertSectionProviderCallCount += 1
    
        if let insertSectionProviderHandler = insertSectionProviderHandler {
            insertSectionProviderHandler(sectionProvider, atIndex)
        }
        
    }
    
    var removeSectionProviderCallCount = 0
    var removeSectionProviderHandler: ((CardCollectionViewSectionProviding) -> ())?
    func removeSectionProvider(sectionProvider: CardCollectionViewSectionProviding)  {
        removeSectionProviderCallCount += 1
    
        if let removeSectionProviderHandler = removeSectionProviderHandler {
            removeSectionProviderHandler(sectionProvider)
        }
        
    }
    
    var presentFeedCallCount = 0
    var presentFeedHandler: ((CardCollectionViewSectionProviding) -> ())?
    func presentFeed(sectionProvider: CardCollectionViewSectionProviding)  {
        presentFeedCallCount += 1
    
        if let presentFeedHandler = presentFeedHandler {
            presentFeedHandler(sectionProvider)
        }
        
    }
    
    var collapseCardCollectionViewControllerCallCount = 0
    var collapseCardCollectionViewControllerHandler: ((Bool) -> ())?
    func collapseCardCollectionViewController(animated: Bool)  {
        collapseCardCollectionViewControllerCallCount += 1
    
        if let collapseCardCollectionViewControllerHandler = collapseCardCollectionViewControllerHandler {
            collapseCardCollectionViewControllerHandler(animated)
        }
        
    }
    
    var showCancellationViewControllerCallCount = 0
    var showCancellationViewControllerHandler: ((TripCancellationViewControllable) -> ())?
    func showCancellationViewController(viewController: TripCancellationViewControllable)  {
        showCancellationViewControllerCallCount += 1
    
        if let showCancellationViewControllerHandler = showCancellationViewControllerHandler {
            showCancellationViewControllerHandler(viewController)
        }
        
    }
    
    var hideCancellationViewControllerCallCount = 0
    var hideCancellationViewControllerHandler: (() -> ())?
    func hideCancellationViewController()  {
        hideCancellationViewControllerCallCount += 1
    
        if let hideCancellationViewControllerHandler = hideCancellationViewControllerHandler {
            hideCancellationViewControllerHandler()
        }
        
    }
    
    var showInstructionsViewControllerCallCount = 0
    var showInstructionsViewControllerHandler: ((TripInstructionsViewControllable) -> ())?
    func showInstructionsViewController(viewController: TripInstructionsViewControllable)  {
        showInstructionsViewControllerCallCount += 1
    
        if let showInstructionsViewControllerHandler = showInstructionsViewControllerHandler {
            showInstructionsViewControllerHandler(viewController)
        }
        
    }
    
    var hideInstructionsViewControllerCallCount = 0
    var hideInstructionsViewControllerHandler: ((Bool) -> ())?
    func hideInstructionsViewController(animated: Bool)  {
        hideInstructionsViewControllerCallCount += 1
    
        if let hideInstructionsViewControllerHandler = hideInstructionsViewControllerHandler {
            hideInstructionsViewControllerHandler(animated)
        }
        
    }
    
    var showTripModalRIBCallCount = 0
    var showTripModalRIBHandler: ((ViewControllable) -> ())?
    func showTripModalRIB(viewController: ViewControllable)  {
        showTripModalRIBCallCount += 1
    
        if let showTripModalRIBHandler = showTripModalRIBHandler {
            showTripModalRIBHandler(viewController)
        }
        
    }
    
    var hideTripModalRIBCallCount = 0
    var hideTripModalRIBHandler: (() -> ())?
    func hideTripModalRIB()  {
        hideTripModalRIBCallCount += 1
    
        if let hideTripModalRIBHandler = hideTripModalRIBHandler {
            hideTripModalRIBHandler()
        }
        
    }
    
    var showTrayViewControllerCallCount = 0
    var showTrayViewControllerHandler: ((TripTrayViewControllable) -> ())?
    func showTrayViewController(viewController: TripTrayViewControllable)  {
        showTrayViewControllerCallCount += 1
    
        if let showTrayViewControllerHandler = showTrayViewControllerHandler {
            showTrayViewControllerHandler(viewController)
        }
        
    }
    
    var hideTrayViewControllerCallCount = 0
    var hideTrayViewControllerHandler: (() -> ())?
    func hideTrayViewController()  {
        hideTrayViewControllerCallCount += 1
    
        if let hideTrayViewControllerHandler = hideTrayViewControllerHandler {
            hideTrayViewControllerHandler()
        }
        
    }
    
    var showAlertControllerCallCount = 0
    var showAlertControllerHandler: ((String?, String) -> ())?
    func showAlertController(title: String?, message: String)  {
        showAlertControllerCallCount += 1
    
        if let showAlertControllerHandler = showAlertControllerHandler {
            showAlertControllerHandler(title, message)
        }
        
    }
    
    var showLocationEditorCallCount = 0
    var showLocationEditorHandler: ((ViewControllable) -> ())?
    func showLocationEditor(viewController: ViewControllable)  {
        showLocationEditorCallCount += 1
    
        if let showLocationEditorHandler = showLocationEditorHandler {
            showLocationEditorHandler(viewController)
        }
        
    }
    
    var hideLocationEditorCallCount = 0
    var hideLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func hideLocationEditor(completion: ((Bool) -> ())?)  {
        hideLocationEditorCallCount += 1
    
        if let hideLocationEditorHandler = hideLocationEditorHandler {
            hideLocationEditorHandler(completion)
        }
        
    }
    
    var showGenericLocationEditorCallCount = 0
    var showGenericLocationEditorHandler: ((ViewControllable) -> ())?
    func showGenericLocationEditor(viewController: ViewControllable)  {
        showGenericLocationEditorCallCount += 1
    
        if let showGenericLocationEditorHandler = showGenericLocationEditorHandler {
            showGenericLocationEditorHandler(viewController)
        }
        
    }
    
    var hideGenericLocationEditorCallCount = 0
    var hideGenericLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func hideGenericLocationEditor(completion: ((Bool) -> ())?)  {
        hideGenericLocationEditorCallCount += 1
    
        if let hideGenericLocationEditorHandler = hideGenericLocationEditorHandler {
            hideGenericLocationEditorHandler(completion)
        }
        
    }
    
    var showMapAlertControllerCallCount = 0
    var showMapAlertControllerHandler: ((Bool, ModularMapAlertOptions, @escaping (_ backgroundViews: [UIView]) -> BaseAlertController) -> ())?
    func showMapAlertController(dismissPresentedViewController: Bool, options: ModularMapAlertOptions, alertControllerFactory: @escaping (_ backgroundViews: [UIView]) -> BaseAlertController)  {
        showMapAlertControllerCallCount += 1
    
        if let showMapAlertControllerHandler = showMapAlertControllerHandler {
            showMapAlertControllerHandler(dismissPresentedViewController, options, alertControllerFactory)
        }
        
    }
    
    var isShowingScrimSetCallCount = 0
    var underlyingIsShowingScrim: Bool = false
    var isShowingScrim: Bool {
        get {
            return underlyingIsShowingScrim
        }
        set {
            underlyingIsShowingScrim = newValue
            isShowingScrimSetCallCount += 1
        }
    }
    
    var showFeedPermalinkCallCount = 0
    var showFeedPermalinkHandler: ((ViewControllable) -> ())?
    func showFeedPermalink(with viewController: ViewControllable)  {
        showFeedPermalinkCallCount += 1
    
        if let showFeedPermalinkHandler = showFeedPermalinkHandler {
            showFeedPermalinkHandler(viewController)
        }
        
    }
    
    var dismissFeedPermalinkCallCount = 0
    var dismissFeedPermalinkHandler: (() -> ())?
    func dismissFeedPermalink()  {
        dismissFeedPermalinkCallCount += 1
    
        if let dismissFeedPermalinkHandler = dismissFeedPermalinkHandler {
            dismissFeedPermalinkHandler()
        }
        
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
    
    var dismissPresentedModalViewControllersCallCount = 0
    var dismissPresentedModalViewControllersHandler: (() -> ())?
    func dismissPresentedModalViewControllers()  {
        dismissPresentedModalViewControllersCallCount += 1
    
        if let dismissPresentedModalViewControllersHandler = dismissPresentedModalViewControllersHandler {
            dismissPresentedModalViewControllersHandler()
        }
        
    }
    
    var showOfferViewControllerCallCount = 0
    var showOfferViewControllerHandler: ((ViewControllable) -> ())?
    func showOfferViewController(viewController: ViewControllable)  {
        showOfferViewControllerCallCount += 1
    
        if let showOfferViewControllerHandler = showOfferViewControllerHandler {
            showOfferViewControllerHandler(viewController)
        }
        
    }
    
    var hideOfferViewControllerCallCount = 0
    var hideOfferViewControllerHandler: ((ViewControllable) -> ())?
    func hideOfferViewController(viewController: ViewControllable)  {
        hideOfferViewControllerCallCount += 1
    
        if let hideOfferViewControllerHandler = hideOfferViewControllerHandler {
            hideOfferViewControllerHandler(viewController)
        }
        
    }
}

class RequestInteractableMock: RequestInteractable {

    

    init() {

    }
        
    var plusOneCompletedCallCount = 0
    var plusOneCompletedHandler: (() -> ())?
    func plusOneCompleted()  {
        plusOneCompletedCallCount += 1
    
        if let plusOneCompletedHandler = plusOneCompletedHandler {
            plusOneCompletedHandler()
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: RequestRouting? = nil
    var router: RequestRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: RequestListener? = nil
    var listener: RequestListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var plusOneAbortedCallCount = 0
    var plusOneAbortedHandler: ((Bool) -> ())?
    func plusOneAborted(forceRefreshFares: Bool)  {
        plusOneAbortedCallCount += 1
    
        if let plusOneAbortedHandler = plusOneAbortedHandler {
            plusOneAbortedHandler(forceRefreshFares)
        }
        
    }
    
    var confirmationDidFinishCallCount = 0
    var confirmationDidFinishHandler: (() -> ())?
    func confirmationDidFinish()  {
        confirmationDidFinishCallCount += 1
    
        if let confirmationDidFinishHandler = confirmationDidFinishHandler {
            confirmationDidFinishHandler()
        }
        
    }
    
    var wantToEditPickupLocationCallCount = 0
    var wantToEditPickupLocationHandler: ((Bool) -> ())?
    func wantToEditPickupLocation(destinationHidden: Bool)  {
        wantToEditPickupLocationCallCount += 1
    
        if let wantToEditPickupLocationHandler = wantToEditPickupLocationHandler {
            wantToEditPickupLocationHandler(destinationHidden)
        }
        
    }
    
    var wantDestinationCallCount = 0
    var wantDestinationHandler: ((LocationEditorMode) -> ())?
    func wantDestination(mode: LocationEditorMode)  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler(mode)
        }
        
    }
    
    var wantLocationEditorCallCount = 0
    var wantLocationEditorHandler: ((LocationEditorContext, LocationEditorMode) -> ())?
    func wantLocationEditor(context: LocationEditorContext, mode: LocationEditorMode)  {
        wantLocationEditorCallCount += 1
    
        if let wantLocationEditorHandler = wantLocationEditorHandler {
            wantLocationEditorHandler(context, mode)
        }
        
    }
    
    var wantToEditDestinationLocationCallCount = 0
    var wantToEditDestinationLocationHandler: (() -> ())?
    func wantToEditDestinationLocation()  {
        wantToEditDestinationLocationCallCount += 1
    
        if let wantToEditDestinationLocationHandler = wantToEditDestinationLocationHandler {
            wantToEditDestinationLocationHandler()
        }
        
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
    
    var wantPickupCallCount = 0
    var wantPickupHandler: ((LocationEditorMode) -> ())?
    func wantPickup(mode: LocationEditorMode)  {
        wantPickupCallCount += 1
    
        if let wantPickupHandler = wantPickupHandler {
            wantPickupHandler(mode)
        }
        
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var didSelectStuntCallCount = 0
    var didSelectStuntHandler: ((HomeInteractable, VehicleViewId) -> ())?
    func didSelectStunt(interactor: HomeInteractable, vehicleViewId: VehicleViewId)  {
        didSelectStuntCallCount += 1
    
        if let didSelectStuntHandler = didSelectStuntHandler {
            didSelectStuntHandler(interactor, vehicleViewId)
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
    
    var wantToDismissCallCount = 0
    var wantToDismissHandler: (() -> ())?
    func wantToDismiss()  {
        wantToDismissCallCount += 1
    
        if let wantToDismissHandler = wantToDismissHandler {
            wantToDismissHandler()
        }
        
    }
}

class DualLocationEditorEntryViewControllableMock: DualLocationEditorEntryViewControllable {

    

    init() {

    }
        
    var dismissDestinationEntryAccessoryCallCount = 0
    var dismissDestinationEntryAccessoryHandler: (() -> ())?
    func dismissDestinationEntryAccessory()  {
        dismissDestinationEntryAccessoryCallCount += 1
    
        if let dismissDestinationEntryAccessoryHandler = dismissDestinationEntryAccessoryHandler {
            dismissDestinationEntryAccessoryHandler()
        }
        
    }
    
    var presentDestinationEntryAccessoryCallCount = 0
    var presentDestinationEntryAccessoryHandler: ((UIViewController) -> ())?
    func presentDestinationEntryAccessory(viewController: UIViewController)  {
        presentDestinationEntryAccessoryCallCount += 1
    
        if let presentDestinationEntryAccessoryHandler = presentDestinationEntryAccessoryHandler {
            presentDestinationEntryAccessoryHandler(viewController)
        }
        
    }
}

class TripRoutingMock: TripRouting {

    
    init() {}
    init(interactor: TripInteractable = TripInteractableMock(), viewController: TripViewControllable = TripViewControllableMock(), tripActionableItem: TripActionableItem) {
        self.interactor = interactor
        self.viewController = viewController
        self.tripActionableItem = tripActionableItem
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: TripInteractable = TripInteractableMock()
    var interactor: TripInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: TripViewControllable = TripViewControllableMock()
    var viewController: TripViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
    
    var tripActionableItemSetCallCount = 0
    var underlyingTripActionableItem: TripActionableItem! 
    var tripActionableItem: TripActionableItem {
        get {
            return underlyingTripActionableItem
        }
        set {
            underlyingTripActionableItem = newValue
            tripActionableItemSetCallCount += 1
        }
    }
    
    var routeToCancellationCallCount = 0
    var routeToCancellationHandler: ((TripCancellationBuildable) -> ())?
    func routeToCancellation(builder: TripCancellationBuildable)  {
        routeToCancellationCallCount += 1
    
        if let routeToCancellationHandler = routeToCancellationHandler {
            routeToCancellationHandler(builder)
        }
        
    }
    
    var routeAwayFromCancellationCallCount = 0
    var routeAwayFromCancellationHandler: (() -> ())?
    func routeAwayFromCancellation()  {
        routeAwayFromCancellationCallCount += 1
    
        if let routeAwayFromCancellationHandler = routeAwayFromCancellationHandler {
            routeAwayFromCancellationHandler()
        }
        
    }
    
    var routeToInstructionsCallCount = 0
    var routeToInstructionsHandler: ((TripInstructionsBuildable) -> ())?
    func routeToInstructions(builder: TripInstructionsBuildable)  {
        routeToInstructionsCallCount += 1
    
        if let routeToInstructionsHandler = routeToInstructionsHandler {
            routeToInstructionsHandler(builder)
        }
        
    }
    
    var routeAwayFromInstructionsCallCount = 0
    var routeAwayFromInstructionsHandler: ((Bool) -> ())?
    func routeAwayFromInstructions(animated: Bool)  {
        routeAwayFromInstructionsCallCount += 1
    
        if let routeAwayFromInstructionsHandler = routeAwayFromInstructionsHandler {
            routeAwayFromInstructionsHandler(animated)
        }
        
    }
    
    var routeToDispatchingMapCallCount = 0
    var routeToDispatchingMapHandler: ((DispatchingMapBuildable) -> ())?
    func routeToDispatchingMap(builder: DispatchingMapBuildable)  {
        routeToDispatchingMapCallCount += 1
    
        if let routeToDispatchingMapHandler = routeToDispatchingMapHandler {
            routeToDispatchingMapHandler(builder)
        }
        
    }
    
    var routeAwayFromDispatchingMapCallCount = 0
    var routeAwayFromDispatchingMapHandler: (() -> ())?
    func routeAwayFromDispatchingMap()  {
        routeAwayFromDispatchingMapCallCount += 1
    
        if let routeAwayFromDispatchingMapHandler = routeAwayFromDispatchingMapHandler {
            routeAwayFromDispatchingMapHandler()
        }
        
    }
    
    var routeToTripMapCallCount = 0
    var routeToTripMapHandler: ((TripMapBuildable) -> ())?
    func routeToTripMap(builder: TripMapBuildable)  {
        routeToTripMapCallCount += 1
    
        if let routeToTripMapHandler = routeToTripMapHandler {
            routeToTripMapHandler(builder)
        }
        
    }
    
    var routeAwayFromTripMapCallCount = 0
    var routeAwayFromTripMapHandler: (() -> ())?
    func routeAwayFromTripMap()  {
        routeAwayFromTripMapCallCount += 1
    
        if let routeAwayFromTripMapHandler = routeAwayFromTripMapHandler {
            routeAwayFromTripMapHandler()
        }
        
    }
    
    var routeToLocationEditorCallCount = 0
    var routeToLocationEditorHandler: ((LocationEditorConfiguration) -> ())?
    func routeToLocationEditor(configuration: LocationEditorConfiguration)  {
        routeToLocationEditorCallCount += 1
    
        if let routeToLocationEditorHandler = routeToLocationEditorHandler {
            routeToLocationEditorHandler(configuration)
        }
        
    }
    
    var routeAwayFromLocationEditorCallCount = 0
    var routeAwayFromLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func routeAwayFromLocationEditor(completion: ((Bool) -> ())?)  {
        routeAwayFromLocationEditorCallCount += 1
    
        if let routeAwayFromLocationEditorHandler = routeAwayFromLocationEditorHandler {
            routeAwayFromLocationEditorHandler(completion)
        }
        
    }
    
    var routeToGenericLocationEditorCallCount = 0
    var routeToGenericLocationEditorHandler: ((GenericLocationEditorConfiguration) -> ())?
    func routeToGenericLocationEditor(configuration: GenericLocationEditorConfiguration)  {
        routeToGenericLocationEditorCallCount += 1
    
        if let routeToGenericLocationEditorHandler = routeToGenericLocationEditorHandler {
            routeToGenericLocationEditorHandler(configuration)
        }
        
    }
    
    var routeAwayFromGenericLocationEditorCallCount = 0
    var routeAwayFromGenericLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func routeAwayFromGenericLocationEditor(completion: ((Bool) -> ())?)  {
        routeAwayFromGenericLocationEditorCallCount += 1
    
        if let routeAwayFromGenericLocationEditorHandler = routeAwayFromGenericLocationEditorHandler {
            routeAwayFromGenericLocationEditorHandler(completion)
        }
        
    }
    
    var routeToFeedPermalinkCallCount = 0
    var routeToFeedPermalinkHandler: ((String, FeedPermalinkBuildable) -> ())?
    func routeToFeedPermalink(with permalinkId: String, builder: FeedPermalinkBuildable)  {
        routeToFeedPermalinkCallCount += 1
    
        if let routeToFeedPermalinkHandler = routeToFeedPermalinkHandler {
            routeToFeedPermalinkHandler(permalinkId, builder)
        }
        
    }
    
    var routeAwayFromFeedPermalinkCallCount = 0
    var routeAwayFromFeedPermalinkHandler: (() -> ())?
    func routeAwayFromFeedPermalink()  {
        routeAwayFromFeedPermalinkCallCount += 1
    
        if let routeAwayFromFeedPermalinkHandler = routeAwayFromFeedPermalinkHandler {
            routeAwayFromFeedPermalinkHandler()
        }
        
    }
    
    var routeToTripCardsCallCount = 0
    var routeToTripCardsHandler: (() -> ())?
    func routeToTripCards()  {
        routeToTripCardsCallCount += 1
    
        if let routeToTripCardsHandler = routeToTripCardsHandler {
            routeToTripCardsHandler()
        }
        
    }
    
    var routeAwayFromTripCardsCallCount = 0
    var routeAwayFromTripCardsHandler: (() -> ())?
    func routeAwayFromTripCards()  {
        routeAwayFromTripCardsCallCount += 1
    
        if let routeAwayFromTripCardsHandler = routeAwayFromTripCardsHandler {
            routeAwayFromTripCardsHandler()
        }
        
    }
    
    var routeToTripTrayCallCount = 0
    var routeToTripTrayHandler: ((TripTrayBuildable) -> ())?
    func routeToTripTray(builder: TripTrayBuildable)  {
        routeToTripTrayCallCount += 1
    
        if let routeToTripTrayHandler = routeToTripTrayHandler {
            routeToTripTrayHandler(builder)
        }
        
    }
    
    var routeAwayFromTripTrayCallCount = 0
    var routeAwayFromTripTrayHandler: (() -> ())?
    func routeAwayFromTripTray()  {
        routeAwayFromTripTrayCallCount += 1
    
        if let routeAwayFromTripTrayHandler = routeAwayFromTripTrayHandler {
            routeAwayFromTripTrayHandler()
        }
        
    }
    
    var routeToSafetyActionSheetCallCount = 0
    var routeToSafetyActionSheetHandler: ((SafetyActionSheet, SafetyCenterActionSheetIncidentType) -> ())?
    func routeToSafetyActionSheet(with actionSheet: SafetyActionSheet, incidentType: SafetyCenterActionSheetIncidentType)  {
        routeToSafetyActionSheetCallCount += 1
    
        if let routeToSafetyActionSheetHandler = routeToSafetyActionSheetHandler {
            routeToSafetyActionSheetHandler(actionSheet, incidentType)
        }
        
    }
    
    var routeAwayFromSafetyActionSheetCallCount = 0
    var routeAwayFromSafetyActionSheetHandler: (() -> ())?
    func routeAwayFromSafetyActionSheet()  {
        routeAwayFromSafetyActionSheetCallCount += 1
    
        if let routeAwayFromSafetyActionSheetHandler = routeAwayFromSafetyActionSheetHandler {
            routeAwayFromSafetyActionSheetHandler()
        }
        
    }
    
    var routeToRiderOfferCallCount = 0
    var routeToRiderOfferHandler: ((RiderOfferBuildable, RiderOfferListener) -> ())?
    func routeToRiderOffer(buildable: RiderOfferBuildable, offerListener: RiderOfferListener)  {
        routeToRiderOfferCallCount += 1
    
        if let routeToRiderOfferHandler = routeToRiderOfferHandler {
            routeToRiderOfferHandler(buildable, offerListener)
        }
        
    }
    
    var routeAwayFromRiderOfferCallCount = 0
    var routeAwayFromRiderOfferHandler: (() -> ())?
    func routeAwayFromRiderOffer()  {
        routeAwayFromRiderOfferCallCount += 1
    
        if let routeAwayFromRiderOfferHandler = routeAwayFromRiderOfferHandler {
            routeAwayFromRiderOfferHandler()
        }
        
    }
    
    var routeToModalRIBCallCount = 0
    var routeToModalRIBHandler: ((ModalRIBRouting) -> ())?
    func routeToModalRIB(_ router: ModalRIBRouting)  {
        routeToModalRIBCallCount += 1
    
        if let routeToModalRIBHandler = routeToModalRIBHandler {
            routeToModalRIBHandler(router)
        }
        
    }
    
    var routeAwayFromModalRIBCallCount = 0
    var routeAwayFromModalRIBHandler: (() -> ())?
    func routeAwayFromModalRIB()  {
        routeAwayFromModalRIBCallCount += 1
    
        if let routeAwayFromModalRIBHandler = routeAwayFromModalRIBHandler {
            routeAwayFromModalRIBHandler()
        }
        
    }
}

class ConfirmationViewControllerListenerMock: ConfirmationViewControllerListener {

    

    init() {

    }
        
    var didTapDestinationEntryCallCount = 0
    var didTapDestinationEntryHandler: ((ConfirmationViewControllable) -> ())?
    func didTapDestinationEntry(confirmationViewController: ConfirmationViewControllable)  {
        didTapDestinationEntryCallCount += 1
    
        if let didTapDestinationEntryHandler = didTapDestinationEntryHandler {
            didTapDestinationEntryHandler(confirmationViewController)
        }
        
    }
    
    var didTapBackToUberHomeCallCount = 0
    var didTapBackToUberHomeHandler: (() -> ())?
    func didTapBackToUberHome()  {
        didTapBackToUberHomeCallCount += 1
    
        if let didTapBackToUberHomeHandler = didTapBackToUberHomeHandler {
            didTapBackToUberHomeHandler()
        }
        
    }
}

public class TripHeaderRootViewControllableMock: TripHeaderRootViewControllable {

    

    public init() {

    }
        
    var showTripHeaderViewControllerCallCount = 0
    public var showTripHeaderViewControllerHandler: ((TripHeaderViewControllable) -> ())?
    public func showTripHeaderViewController(viewController: TripHeaderViewControllable)  {
        showTripHeaderViewControllerCallCount += 1
    
        if let showTripHeaderViewControllerHandler = showTripHeaderViewControllerHandler {
            showTripHeaderViewControllerHandler(viewController)
        }
        
    }
    
    var removeTripHeaderViewControllerIfNeededCallCount = 0
    public var removeTripHeaderViewControllerIfNeededHandler: (() -> ())?
    public func removeTripHeaderViewControllerIfNeeded()  {
        removeTripHeaderViewControllerIfNeededCallCount += 1
    
        if let removeTripHeaderViewControllerIfNeededHandler = removeTripHeaderViewControllerIfNeededHandler {
            removeTripHeaderViewControllerIfNeededHandler()
        }
        
    }
}

class HomeRoutingMock: HomeRouting {

    
    init() {}
    init(interactor: HomeInteractable = HomeInteractableMock(), homeActionableItem: HomeActionableItem) {
        self.interactor = interactor
        self.homeActionableItem = homeActionableItem
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: HomeInteractable = HomeInteractableMock()
    var interactor: HomeInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var homeActionableItemSetCallCount = 0
    var underlyingHomeActionableItem: HomeActionableItem! 
    var homeActionableItem: HomeActionableItem {
        get {
            return underlyingHomeActionableItem
        }
        set {
            underlyingHomeActionableItem = newValue
            homeActionableItemSetCallCount += 1
        }
    }
    
    var routeToAccessoriesCallCount = 0
    var routeToAccessoriesHandler: (([DestinationEntryAccessoryBuildable]) -> ([DestinationEntryAccessoryActionableItem]))?
    func routeToAccessories(accessoryBuilders: [DestinationEntryAccessoryBuildable]) -> [DestinationEntryAccessoryActionableItem] {
        routeToAccessoriesCallCount += 1
    
        if let routeToAccessoriesHandler = routeToAccessoriesHandler {
            return routeToAccessoriesHandler(accessoryBuilders)
        }
        return [DestinationEntryAccessoryActionableItem]()
    }
    
    var routeToEdgesCallCount = 0
    var routeToEdgesHandler: ((DestinationEntryEdges<DestinationEntryEdgeBuildable>) -> ())?
    func routeToEdges(edgeBuilders: DestinationEntryEdges<DestinationEntryEdgeBuildable>)  {
        routeToEdgesCallCount += 1
    
        if let routeToEdgesHandler = routeToEdgesHandler {
            routeToEdgesHandler(edgeBuilders)
        }
        
    }
    
    var routeToPermalinkCallCount = 0
    var routeToPermalinkHandler: ((String, FeedPermalinkBuildable) -> ())?
    func routeToPermalink(with permalinkId: String, builder: FeedPermalinkBuildable)  {
        routeToPermalinkCallCount += 1
    
        if let routeToPermalinkHandler = routeToPermalinkHandler {
            routeToPermalinkHandler(permalinkId, builder)
        }
        
    }
    
    var detachPermalinkCallCount = 0
    var detachPermalinkHandler: (() -> ())?
    func detachPermalink()  {
        detachPermalinkCallCount += 1
    
        if let detachPermalinkHandler = detachPermalinkHandler {
            detachPermalinkHandler()
        }
        
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((HomeMapBuildable) -> ())?
    func routeToMap(builder: HomeMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToTopRowCallCount = 0
    var routeToTopRowHandler: ((TopRowBuildable) -> ())?
    func routeToTopRow(builder: TopRowBuildable)  {
        routeToTopRowCallCount += 1
    
        if let routeToTopRowHandler = routeToTopRowHandler {
            routeToTopRowHandler(builder)
        }
        
    }
    
    var routeFromTopRowCallCount = 0
    var routeFromTopRowHandler: (() -> ())?
    func routeFromTopRow()  {
        routeFromTopRowCallCount += 1
    
        if let routeFromTopRowHandler = routeFromTopRowHandler {
            routeFromTopRowHandler()
        }
        
    }
}

class ConfirmationViewControllableMock: ConfirmationViewControllable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationViewControllerListener? = nil
    var listener: ConfirmationViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var transitionListenerSetCallCount = 0
    var underlyingTransitionListener: ConfirmationViewControllerTransitionListener? = nil
    var transitionListener: ConfirmationViewControllerTransitionListener? {
        get {
            return underlyingTransitionListener
        }
        set {
            underlyingTransitionListener = newValue
            transitionListenerSetCallCount += 1
        }
    }
    
    var showProductSelectionViewControllerCallCount = 0
    var showProductSelectionViewControllerHandler: ((UIViewController, UIViewController) -> ())?
    func showProductSelectionViewController(productSelectionViewController: UIViewController, productOptionsViewController: UIViewController)  {
        showProductSelectionViewControllerCallCount += 1
    
        if let showProductSelectionViewControllerHandler = showProductSelectionViewControllerHandler {
            showProductSelectionViewControllerHandler(productSelectionViewController, productOptionsViewController)
        }
        
    }
    
    var showProductOptionsContentCallCount = 0
    var showProductOptionsContentHandler: ((ProductOptionsItemContentViewControllable) -> ())?
    func showProductOptionsContent(contentViewController viewController: ProductOptionsItemContentViewControllable)  {
        showProductOptionsContentCallCount += 1
    
        if let showProductOptionsContentHandler = showProductOptionsContentHandler {
            showProductOptionsContentHandler(viewController)
        }
        
    }
    
    var dismissProductOptionsContentCallCount = 0
    var dismissProductOptionsContentHandler: ((ProductOptionsItemContentViewControllable) -> ())?
    func dismissProductOptionsContent(contentViewController viewController: ProductOptionsItemContentViewControllable)  {
        dismissProductOptionsContentCallCount += 1
    
        if let dismissProductOptionsContentHandler = dismissProductOptionsContentHandler {
            dismissProductOptionsContentHandler(viewController)
        }
        
    }
    
    var showDestinationEntryCallCount = 0
    var showDestinationEntryHandler: (() -> ())?
    func showDestinationEntry()  {
        showDestinationEntryCallCount += 1
    
        if let showDestinationEntryHandler = showDestinationEntryHandler {
            showDestinationEntryHandler()
        }
        
    }
    
    var dismissDestinationEntryCallCount = 0
    var dismissDestinationEntryHandler: (() -> ())?
    func dismissDestinationEntry()  {
        dismissDestinationEntryCallCount += 1
    
        if let dismissDestinationEntryHandler = dismissDestinationEntryHandler {
            dismissDestinationEntryHandler()
        }
        
    }
    
    var showFirstTimeUserExperienceCallCount = 0
    var showFirstTimeUserExperienceHandler: ((Bool) -> ())?
    func showFirstTimeUserExperience(dismissOnCalloutTap: Bool)  {
        showFirstTimeUserExperienceCallCount += 1
    
        if let showFirstTimeUserExperienceHandler = showFirstTimeUserExperienceHandler {
            showFirstTimeUserExperienceHandler(dismissOnCalloutTap)
        }
        
    }
    
    var dismissFirstTimeUserExperienceCallCount = 0
    var dismissFirstTimeUserExperienceHandler: (() -> ())?
    func dismissFirstTimeUserExperience()  {
        dismissFirstTimeUserExperienceCallCount += 1
    
        if let dismissFirstTimeUserExperienceHandler = dismissFirstTimeUserExperienceHandler {
            dismissFirstTimeUserExperienceHandler()
        }
        
    }
    
    var showConfirmationMapViewControllableCallCount = 0
    var showConfirmationMapViewControllableHandler: ((ConfirmationMapLayerControllable) -> ())?
    func showConfirmationMapViewControllable(confirmationMapLayerControllable: ConfirmationMapLayerControllable)  {
        showConfirmationMapViewControllableCallCount += 1
    
        if let showConfirmationMapViewControllableHandler = showConfirmationMapViewControllableHandler {
            showConfirmationMapViewControllableHandler(confirmationMapLayerControllable)
        }
        
    }
    
    var showActionViewControllableCallCount = 0
    var showActionViewControllableHandler: ((ViewControllable) -> ())?
    func showActionViewControllable(_ actionViewControllable: ViewControllable)  {
        showActionViewControllableCallCount += 1
    
        if let showActionViewControllableHandler = showActionViewControllableHandler {
            showActionViewControllableHandler(actionViewControllable)
        }
        
    }
    
    var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
    
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }
    
    var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
    
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }
    
    var updateRideContextEntryTypeCallCount = 0
    var updateRideContextEntryTypeHandler: ((RideContextEntryType) -> ())?
    func updateRideContextEntryType(_ type: RideContextEntryType)  {
        updateRideContextEntryTypeCallCount += 1
    
        if let updateRideContextEntryTypeHandler = updateRideContextEntryTypeHandler {
            updateRideContextEntryTypeHandler(type)
        }
        
    }
}

class ConfirmationRoutingMock: ConfirmationRouting {

    
    init() {}
    init(interactor: ConfirmationInteractable = ConfirmationInteractableMock(), confirmationViewControllable: ConfirmationViewControllable = ConfirmationViewControllableMock()) {
        self.interactor = interactor
        self.confirmationViewControllable = confirmationViewControllable
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ConfirmationInteractable = ConfirmationInteractableMock()
    var interactor: ConfirmationInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var confirmationViewControllableSetCallCount = 0
    var underlyingConfirmationViewControllable: ConfirmationViewControllable = ConfirmationViewControllableMock()
    var confirmationViewControllable: ConfirmationViewControllable {
        get {
            return underlyingConfirmationViewControllable
        }
        set {
            underlyingConfirmationViewControllable = newValue
            confirmationViewControllableSetCallCount += 1
        }
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((ConfirmationMapBuildable) -> ())?
    func routeToMap(builder: ConfirmationMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToConfirmationActionAccessoryCallCount = 0
    var routeToConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryRouting?) -> ())?
    func routeToConfirmationActionAccessory(accessory: ConfirmationActionAccessoryRouting?)  {
        routeToConfirmationActionAccessoryCallCount += 1
    
        if let routeToConfirmationActionAccessoryHandler = routeToConfirmationActionAccessoryHandler {
            routeToConfirmationActionAccessoryHandler(accessory)
        }
        
    }
    
    var routeToActionCallCount = 0
    var routeToActionHandler: ((ConfirmationActionRouting) -> ())?
    func routeToAction(_ actionRouter: ConfirmationActionRouting)  {
        routeToActionCallCount += 1
    
        if let routeToActionHandler = routeToActionHandler {
            routeToActionHandler(actionRouter)
        }
        
    }
}

class SelectedProductPresentableMock: SelectedProductPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductPresentableListener? = nil
    var listener: SelectedProductPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateViewModelCallCount = 0
    var updateViewModelHandler: ((ProductSelectionCellViewModel) -> ())?
    func updateViewModel(_ viewModel: ProductSelectionCellViewModel)  {
        updateViewModelCallCount += 1
    
        if let updateViewModelHandler = updateViewModelHandler {
            updateViewModelHandler(viewModel)
        }
        
    }
    
    var updateFareBreakdownViewModelCallCount = 0
    var updateFareBreakdownViewModelHandler: ((ProductFareBreakdownViewModel) -> ())?
    func updateFareBreakdownViewModel(_ viewModel: ProductFareBreakdownViewModel)  {
        updateFareBreakdownViewModelCallCount += 1
    
        if let updateFareBreakdownViewModelHandler = updateFareBreakdownViewModelHandler {
            updateFareBreakdownViewModelHandler(viewModel)
        }
        
    }
}

class PlusOnePresentableMock: PlusOnePresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: PlusOnePresenterListener? = nil
    var listener: PlusOnePresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class ModeListenerMock: ModeListener {

    

    init() {

    }
    
}

class SelectedProductConfigurationPresentableMock: SelectedProductConfigurationPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductConfigurationPresentableListener? = nil
    var listener: SelectedProductConfigurationPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class TripDetailsListenerMock: TripDetailsListener {

    

    init() {

    }
        
    var cancelTripWithoutConfirmingCallCount = 0
    var cancelTripWithoutConfirmingHandler: (() -> ())?
    func cancelTripWithoutConfirming()  {
        cancelTripWithoutConfirmingCallCount += 1
    
        if let cancelTripWithoutConfirmingHandler = cancelTripWithoutConfirmingHandler {
            cancelTripWithoutConfirmingHandler()
        }
        
    }
    
    var tripDetailsDidCancelTripCallCount = 0
    var tripDetailsDidCancelTripHandler: (() -> ())?
    func tripDetailsDidCancelTrip()  {
        tripDetailsDidCancelTripCallCount += 1
    
        if let tripDetailsDidCancelTripHandler = tripDetailsDidCancelTripHandler {
            tripDetailsDidCancelTripHandler()
        }
        
    }
    
    var tripDetailsWillPresentEmergencyModalCallCount = 0
    var tripDetailsWillPresentEmergencyModalHandler: (() -> ())?
    func tripDetailsWillPresentEmergencyModal()  {
        tripDetailsWillPresentEmergencyModalCallCount += 1
    
        if let tripDetailsWillPresentEmergencyModalHandler = tripDetailsWillPresentEmergencyModalHandler {
            tripDetailsWillPresentEmergencyModalHandler()
        }
        
    }
    
    var tripDetailsWillDismissEmergencyModalCallCount = 0
    var tripDetailsWillDismissEmergencyModalHandler: ((Bool) -> ())?
    func tripDetailsWillDismissEmergencyModal(userDismissed: Bool)  {
        tripDetailsWillDismissEmergencyModalCallCount += 1
    
        if let tripDetailsWillDismissEmergencyModalHandler = tripDetailsWillDismissEmergencyModalHandler {
            tripDetailsWillDismissEmergencyModalHandler(userDismissed)
        }
        
    }
}

class ProductSelectionPresentableV2Mock: ProductSelectionPresentableV2 {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionPresentableListenerV2? = nil
    var listener: ProductSelectionPresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateViewModelsCallCount = 0
    var updateViewModelsHandler: (([ProductSelectionCategoryViewModel]) -> ())?
    func updateViewModels(_ viewModels: [ProductSelectionCategoryViewModel])  {
        updateViewModelsCallCount += 1
    
        if let updateViewModelsHandler = updateViewModelsHandler {
            updateViewModelsHandler(viewModels)
        }
        
    }
    
    var updateRecommendedCountCallCount = 0
    var updateRecommendedCountHandler: ((Int) -> ())?
    func updateRecommendedCount(_ count: Int)  {
        updateRecommendedCountCallCount += 1
    
        if let updateRecommendedCountHandler = updateRecommendedCountHandler {
            updateRecommendedCountHandler(count)
        }
        
    }
    
    var updateSelectedProductCallCount = 0
    var updateSelectedProductHandler: ((ProductItemId) -> ())?
    func updateSelectedProduct(productItemId: ProductItemId)  {
        updateSelectedProductCallCount += 1
    
        if let updateSelectedProductHandler = updateSelectedProductHandler {
            updateSelectedProductHandler(productItemId)
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
}

class SelectedProductConfigurationManagerListenerMock: SelectedProductConfigurationManagerListener {

    

    init() {

    }
        
    var productConfigurationDidUpdateCallCount = 0
    var productConfigurationDidUpdateHandler: ((CoreShared.Product) -> ())?
    func productConfigurationDidUpdate(product: CoreShared.Product)  {
        productConfigurationDidUpdateCallCount += 1
    
        if let productConfigurationDidUpdateHandler = productConfigurationDidUpdateHandler {
            productConfigurationDidUpdateHandler(product)
        }
        
    }
}

class RootViewControllableMock: RootViewControllable {

    
    init() {}
    init(statusBarStyle: UIStatusBarStyle) {
        self.statusBarStyle = statusBarStyle
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: RootViewControllerListener? = nil
    var listener: RootViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var clearSplashScreenCallCount = 0
    var clearSplashScreenHandler: ((@escaping SplashScreenClearCompletionCallback) -> ())?
    func clearSplashScreen(completion: @escaping SplashScreenClearCompletionCallback)  {
        clearSplashScreenCallCount += 1
    
        if let clearSplashScreenHandler = clearSplashScreenHandler {
            clearSplashScreenHandler(completion)
        }
        
    }
    
    var statusBarStyleSetCallCount = 0
    var underlyingStatusBarStyle: UIStatusBarStyle! 
    var statusBarStyle: UIStatusBarStyle {
        get {
            return underlyingStatusBarStyle
        }
        set {
            underlyingStatusBarStyle = newValue
            statusBarStyleSetCallCount += 1
        }
    }
}

class RequestRoutingMock: RequestRouting {

    
    init() {}
    init(interactor: RequestInteractable = RequestInteractableMock(), requestActionableItem: RequestActionableItem) {
        self.interactor = interactor
        self.requestActionableItem = requestActionableItem
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: RequestInteractable = RequestInteractableMock()
    var interactor: RequestInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var requestActionableItemSetCallCount = 0
    var underlyingRequestActionableItem: RequestActionableItem! 
    var requestActionableItem: RequestActionableItem {
        get {
            return underlyingRequestActionableItem
        }
        set {
            underlyingRequestActionableItem = newValue
            requestActionableItemSetCallCount += 1
        }
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((RequestMapBuildable) -> ())?
    func routeToMap(builder: RequestMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeToHomeCallCount = 0
    var routeToHomeHandler: (() -> (HomeActionableItem?))?
    func routeToHome() -> HomeActionableItem? {
        routeToHomeCallCount += 1
    
        if let routeToHomeHandler = routeToHomeHandler {
            return routeToHomeHandler()
        }
        return nil
    }
    
    var routeToHomeV2CallCount = 0
    var routeToHomeV2Handler: (() -> (HomeActionableItemV2?))?
    func routeToHomeV2() -> HomeActionableItemV2? {
        routeToHomeV2CallCount += 1
    
        if let routeToHomeV2Handler = routeToHomeV2Handler {
            return routeToHomeV2Handler()
        }
        return nil
    }
    
    var routeToLocationEditorCallCount = 0
    var routeToLocationEditorHandler: ((LocationEditorConfiguration, LocationEditorViewConfiguration?) -> ())?
    func routeToLocationEditor(configuration: LocationEditorConfiguration, viewConfiguration: LocationEditorViewConfiguration?)  {
        routeToLocationEditorCallCount += 1
    
        if let routeToLocationEditorHandler = routeToLocationEditorHandler {
            routeToLocationEditorHandler(configuration, viewConfiguration)
        }
        
    }
    
    var routeToConfirmationCallCount = 0
    var routeToConfirmationHandler: ((Bool) -> (ConfirmationActionableItem?))?
    func routeToConfirmation(requireDestination: Bool) -> ConfirmationActionableItem? {
        routeToConfirmationCallCount += 1
    
        if let routeToConfirmationHandler = routeToConfirmationHandler {
            return routeToConfirmationHandler(requireDestination)
        }
        return nil
    }
    
    var routeToConfirmationV2CallCount = 0
    var routeToConfirmationV2Handler: ((Bool) -> (ConfirmationActionableItemV2?))?
    func routeToConfirmationV2(requireDestination: Bool) -> ConfirmationActionableItemV2? {
        routeToConfirmationV2CallCount += 1
    
        if let routeToConfirmationV2Handler = routeToConfirmationV2Handler {
            return routeToConfirmationV2Handler(requireDestination)
        }
        return nil
    }
    
    var routeToPlusOneCallCount = 0
    var routeToPlusOneHandler: (() -> (PlusOneActionableItem?))?
    func routeToPlusOne() -> PlusOneActionableItem? {
        routeToPlusOneCallCount += 1
    
        if let routeToPlusOneHandler = routeToPlusOneHandler {
            return routeToPlusOneHandler()
        }
        return nil
    }
    
    var routeToServerErrorHandlingCallCount = 0
    var routeToServerErrorHandlingHandler: ((PickupRequestV2?, Error) -> ())?
    func routeToServerErrorHandling(request: PickupRequestV2?, error: Error)  {
        routeToServerErrorHandlingCallCount += 1
    
        if let routeToServerErrorHandlingHandler = routeToServerErrorHandlingHandler {
            routeToServerErrorHandlingHandler(request, error)
        }
        
    }
    
    var routeFromServerErrorHandlerCallCount = 0
    var routeFromServerErrorHandlerHandler: ((Bool, (() -> ())?) -> ())?
    func routeFromServerErrorHandler(immediately: Bool, completion: (() -> ())?)  {
        routeFromServerErrorHandlerCallCount += 1
    
        if let routeFromServerErrorHandlerHandler = routeFromServerErrorHandlerHandler {
            routeFromServerErrorHandlerHandler(immediately, completion)
        }
        
    }
    
    var routeToCustomTransientCallCount = 0
    var routeToCustomTransientHandler: ((RequestCustomStateRouter) -> ())?
    func routeToCustomTransient(stateRouter: RequestCustomStateRouter)  {
        routeToCustomTransientCallCount += 1
    
        if let routeToCustomTransientHandler = routeToCustomTransientHandler {
            routeToCustomTransientHandler(stateRouter)
        }
        
    }
}

public class RideDependencyMock: RideDependency {

    
    public init() {}
    public init(riderStream: RiderStreaming, marketplaceRiderService: MarketplaceRiderServicing, realtimeClient: RealtimeClient, cachedExperiments: CachedExperimenting, appLifecycle: ApplicationLifecycleBroadcaster, deviceLocationProvider: DeviceLocationProviding, userLocationProvider: UserLocationProviding, applicationLaunchStream: ApplicationLaunchStream, mutableRiderStatusTargetLocationStream: MutableRiderStatusTargetLocationStreaming, statusPollCompletedStream: StatusPollCompletedStreaming, modeExperiments: ModeExperimenting, modeEventStream: MutableModeEventStreaming) {
        self.riderStream = riderStream
        self.marketplaceRiderService = marketplaceRiderService
        self.realtimeClient = realtimeClient
        self.cachedExperiments = cachedExperiments
        self.appLifecycle = appLifecycle
        self.deviceLocationProvider = deviceLocationProvider
        self.userLocationProvider = userLocationProvider
        self.applicationLaunchStream = applicationLaunchStream
        self.mutableRiderStatusTargetLocationStream = mutableRiderStatusTargetLocationStream
        self.statusPollCompletedStream = statusPollCompletedStream
        self.modeExperiments = modeExperiments
        self.modeEventStream = modeEventStream
    }
        
    var riderStreamSetCallCount = 0
    var underlyingRiderStream: RiderStreaming! 
    public var riderStream: RiderStreaming {
        get {
            return underlyingRiderStream
        }
        set {
            underlyingRiderStream = newValue
            riderStreamSetCallCount += 1
        }
    }
    
    var marketplaceRiderServiceSetCallCount = 0
    var underlyingMarketplaceRiderService: MarketplaceRiderServicing! 
    public var marketplaceRiderService: MarketplaceRiderServicing {
        get {
            return underlyingMarketplaceRiderService
        }
        set {
            underlyingMarketplaceRiderService = newValue
            marketplaceRiderServiceSetCallCount += 1
        }
    }
    
    var realtimeClientSetCallCount = 0
    var underlyingRealtimeClient: RealtimeClient! 
    public var realtimeClient: RealtimeClient {
        get {
            return underlyingRealtimeClient
        }
        set {
            underlyingRealtimeClient = newValue
            realtimeClientSetCallCount += 1
        }
    }
    
    var cachedExperimentsSetCallCount = 0
    var underlyingCachedExperiments: CachedExperimenting! 
    public var cachedExperiments: CachedExperimenting {
        get {
            return underlyingCachedExperiments
        }
        set {
            underlyingCachedExperiments = newValue
            cachedExperimentsSetCallCount += 1
        }
    }
    
    var appLifecycleSetCallCount = 0
    var underlyingAppLifecycle: ApplicationLifecycleBroadcaster! 
    public var appLifecycle: ApplicationLifecycleBroadcaster {
        get {
            return underlyingAppLifecycle
        }
        set {
            underlyingAppLifecycle = newValue
            appLifecycleSetCallCount += 1
        }
    }
    
    var deviceLocationProviderSetCallCount = 0
    var underlyingDeviceLocationProvider: DeviceLocationProviding! 
    public var deviceLocationProvider: DeviceLocationProviding {
        get {
            return underlyingDeviceLocationProvider
        }
        set {
            underlyingDeviceLocationProvider = newValue
            deviceLocationProviderSetCallCount += 1
        }
    }
    
    var userLocationProviderSetCallCount = 0
    var underlyingUserLocationProvider: UserLocationProviding! 
    public var userLocationProvider: UserLocationProviding {
        get {
            return underlyingUserLocationProvider
        }
        set {
            underlyingUserLocationProvider = newValue
            userLocationProviderSetCallCount += 1
        }
    }
    
    var applicationLaunchStreamSetCallCount = 0
    var underlyingApplicationLaunchStream: ApplicationLaunchStream! 
    public var applicationLaunchStream: ApplicationLaunchStream {
        get {
            return underlyingApplicationLaunchStream
        }
        set {
            underlyingApplicationLaunchStream = newValue
            applicationLaunchStreamSetCallCount += 1
        }
    }
    
    var mutableRiderStatusTargetLocationStreamSetCallCount = 0
    var underlyingMutableRiderStatusTargetLocationStream: MutableRiderStatusTargetLocationStreaming! 
    public var mutableRiderStatusTargetLocationStream: MutableRiderStatusTargetLocationStreaming {
        get {
            return underlyingMutableRiderStatusTargetLocationStream
        }
        set {
            underlyingMutableRiderStatusTargetLocationStream = newValue
            mutableRiderStatusTargetLocationStreamSetCallCount += 1
        }
    }
    
    var statusPollCompletedStreamSetCallCount = 0
    var underlyingStatusPollCompletedStream: StatusPollCompletedStreaming! 
    public var statusPollCompletedStream: StatusPollCompletedStreaming {
        get {
            return underlyingStatusPollCompletedStream
        }
        set {
            underlyingStatusPollCompletedStream = newValue
            statusPollCompletedStreamSetCallCount += 1
        }
    }
    
    var modeExperimentsSetCallCount = 0
    var underlyingModeExperiments: ModeExperimenting! 
    public var modeExperiments: ModeExperimenting {
        get {
            return underlyingModeExperiments
        }
        set {
            underlyingModeExperiments = newValue
            modeExperimentsSetCallCount += 1
        }
    }
    
    var modeEventStreamSetCallCount = 0
    var underlyingModeEventStream: MutableModeEventStreaming! 
    public var modeEventStream: MutableModeEventStreaming {
        get {
            return underlyingModeEventStream
        }
        set {
            underlyingModeEventStream = newValue
            modeEventStreamSetCallCount += 1
        }
    }
}

class ConfirmationViewControllableV2Mock: ConfirmationViewControllableV2 {

    
    init() {}
    init(currentViewState: ConfirmationViewState) {
        self.currentViewState = currentViewState
    }
        
    var currentViewStateSetCallCount = 0
    var underlyingCurrentViewState: ConfirmationViewState! 
    var currentViewState: ConfirmationViewState {
        get {
            return underlyingCurrentViewState
        }
        set {
            underlyingCurrentViewState = newValue
            currentViewStateSetCallCount += 1
        }
    }
    
    var showProductOptionsViewControllerCallCount = 0
    var showProductOptionsViewControllerHandler: ((ProductOptionsViewControllable) -> ())?
    func showProductOptionsViewController(_ productOptionsViewController: ProductOptionsViewControllable)  {
        showProductOptionsViewControllerCallCount += 1
    
        if let showProductOptionsViewControllerHandler = showProductOptionsViewControllerHandler {
            showProductOptionsViewControllerHandler(productOptionsViewController)
        }
        
    }
    
    var showActionViewControllableCallCount = 0
    var showActionViewControllableHandler: ((ViewControllable) -> ())?
    func showActionViewControllable(_ actionViewControllable: ViewControllable)  {
        showActionViewControllableCallCount += 1
    
        if let showActionViewControllableHandler = showActionViewControllableHandler {
            showActionViewControllableHandler(actionViewControllable)
        }
        
    }
    
    var showConfirmationAlertViewControllableCallCount = 0
    var showConfirmationAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showConfirmationAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showConfirmationAlertViewControllableCallCount += 1
    
        if let showConfirmationAlertViewControllableHandler = showConfirmationAlertViewControllableHandler {
            showConfirmationAlertViewControllableHandler(alertViewControllable)
        }
        
    }
    
    var presentConfirmationSlidableCallCount = 0
    var presentConfirmationSlidableHandler: ((ConfirmationSlidable, Bool) -> ())?
    func presentConfirmationSlidable(_ slidable: ConfirmationSlidable, animated: Bool)  {
        presentConfirmationSlidableCallCount += 1
    
        if let presentConfirmationSlidableHandler = presentConfirmationSlidableHandler {
            presentConfirmationSlidableHandler(slidable, animated)
        }
        
    }
    
    var dismissConfirmationSlidableCallCount = 0
    var dismissConfirmationSlidableHandler: ((ConfirmationSlidable, Bool) -> ())?
    func dismissConfirmationSlidable(_ slidable: ConfirmationSlidable, animated: Bool)  {
        dismissConfirmationSlidableCallCount += 1
    
        if let dismissConfirmationSlidableHandler = dismissConfirmationSlidableHandler {
            dismissConfirmationSlidableHandler(slidable, animated)
        }
        
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationPresentableListenerV2? = nil
    var listener: ConfirmationPresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateDestinationEntryNeededCallCount = 0
    var updateDestinationEntryNeededHandler: ((Bool) -> ())?
    func updateDestinationEntryNeeded(_ destinationEntryNeeded: Bool)  {
        updateDestinationEntryNeededCallCount += 1
    
        if let updateDestinationEntryNeededHandler = updateDestinationEntryNeededHandler {
            updateDestinationEntryNeededHandler(destinationEntryNeeded)
        }
        
    }
    
    var updateViewStateIfNeededCallCount = 0
    var updateViewStateIfNeededHandler: (() -> ())?
    func updateViewStateIfNeeded()  {
        updateViewStateIfNeededCallCount += 1
    
        if let updateViewStateIfNeededHandler = updateViewStateIfNeededHandler {
            updateViewStateIfNeededHandler()
        }
        
    }
    
    var updateMapPaddingIfNeededCallCount = 0
    var updateMapPaddingIfNeededHandler: (() -> ())?
    func updateMapPaddingIfNeeded()  {
        updateMapPaddingIfNeededCallCount += 1
    
        if let updateMapPaddingIfNeededHandler = updateMapPaddingIfNeededHandler {
            updateMapPaddingIfNeededHandler()
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
}

class HomeViewControllableV2Mock: HomeViewControllableV2 {

    

    init() {

    }
        
    var dismissScheduledRidesHomeEntryCallCount = 0
    var dismissScheduledRidesHomeEntryHandler: (() -> ())?
    func dismissScheduledRidesHomeEntry()  {
        dismissScheduledRidesHomeEntryCallCount += 1
    
        if let dismissScheduledRidesHomeEntryHandler = dismissScheduledRidesHomeEntryHandler {
            dismissScheduledRidesHomeEntryHandler()
        }
        
    }
    
    var presentScheduledRidesHomeEntryCallCount = 0
    var presentScheduledRidesHomeEntryHandler: ((UIViewController) -> ())?
    func presentScheduledRidesHomeEntry(viewController: UIViewController)  {
        presentScheduledRidesHomeEntryCallCount += 1
    
        if let presentScheduledRidesHomeEntryHandler = presentScheduledRidesHomeEntryHandler {
            presentScheduledRidesHomeEntryHandler(viewController)
        }
        
    }
    
    var dismissAcceleratorsCallCount = 0
    var dismissAcceleratorsHandler: (() -> ())?
    func dismissAccelerators()  {
        dismissAcceleratorsCallCount += 1
    
        if let dismissAcceleratorsHandler = dismissAcceleratorsHandler {
            dismissAcceleratorsHandler()
        }
        
    }
    
    var presentAcceleratorsCallCount = 0
    var presentAcceleratorsHandler: ((UIViewController) -> ())?
    func presentAccelerators(viewController: UIViewController)  {
        presentAcceleratorsCallCount += 1
    
        if let presentAcceleratorsHandler = presentAcceleratorsHandler {
            presentAcceleratorsHandler(viewController)
        }
        
    }
    
    var presentCommunicationBannerCallCount = 0
    var presentCommunicationBannerHandler: ((UIViewController) -> ())?
    func presentCommunicationBanner(viewController: UIViewController)  {
        presentCommunicationBannerCallCount += 1
    
        if let presentCommunicationBannerHandler = presentCommunicationBannerHandler {
            presentCommunicationBannerHandler(viewController)
        }
        
    }
    
    var dismissLocationEditorEntryCallCount = 0
    var dismissLocationEditorEntryHandler: (() -> ())?
    func dismissLocationEditorEntry()  {
        dismissLocationEditorEntryCallCount += 1
    
        if let dismissLocationEditorEntryHandler = dismissLocationEditorEntryHandler {
            dismissLocationEditorEntryHandler()
        }
        
    }
    
    var presentLocationEditorEntryCallCount = 0
    var presentLocationEditorEntryHandler: ((UIViewController) -> ())?
    func presentLocationEditorEntry(viewController: UIViewController)  {
        presentLocationEditorEntryCallCount += 1
    
        if let presentLocationEditorEntryHandler = presentLocationEditorEntryHandler {
            presentLocationEditorEntryHandler(viewController)
        }
        
    }
    
    var dismissRewardsRiderStatusBarCallCount = 0
    var dismissRewardsRiderStatusBarHandler: (() -> ())?
    func dismissRewardsRiderStatusBar()  {
        dismissRewardsRiderStatusBarCallCount += 1
    
        if let dismissRewardsRiderStatusBarHandler = dismissRewardsRiderStatusBarHandler {
            dismissRewardsRiderStatusBarHandler()
        }
        
    }
    
    var presentRewardsRiderStatusBarCallCount = 0
    var presentRewardsRiderStatusBarHandler: ((UIViewController) -> ())?
    func presentRewardsRiderStatusBar(viewController: UIViewController)  {
        presentRewardsRiderStatusBarCallCount += 1
    
        if let presentRewardsRiderStatusBarHandler = presentRewardsRiderStatusBarHandler {
            presentRewardsRiderStatusBarHandler(viewController)
        }
        
    }
}

class RideRoutingMock: RideRouting {

    
    init() {}
    init(interactor: RideInteractable = RideInteractableMock(), rideActionableItem: RideActionableItem) {
        self.interactor = interactor
        self.rideActionableItem = rideActionableItem
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: RideInteractable = RideInteractableMock()
    var interactor: RideInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var rideActionableItemSetCallCount = 0
    var underlyingRideActionableItem: RideActionableItem! 
    var rideActionableItem: RideActionableItem {
        get {
            return underlyingRideActionableItem
        }
        set {
            underlyingRideActionableItem = newValue
            rideActionableItemSetCallCount += 1
        }
    }
    
    var routeToRequestCallCount = 0
    var routeToRequestHandler: (() -> (RequestActionableItem))?
    func routeToRequest() -> RequestActionableItem {
        routeToRequestCallCount += 1
    
        if let routeToRequestHandler = routeToRequestHandler {
            return routeToRequestHandler()
        }
        fatalError("routeToRequestHandler returns can't have a default value thus its handler must be set")
    }
    
    var routeToTripCallCount = 0
    var routeToTripHandler: (() -> (TripActionableItem))?
    func routeToTrip() -> TripActionableItem {
        routeToTripCallCount += 1
    
        if let routeToTripHandler = routeToTripHandler {
            return routeToTripHandler()
        }
        fatalError("routeToTripHandler returns can't have a default value thus its handler must be set")
    }
    
    var routeToAlternativeTripCallCount = 0
    var routeToAlternativeTripHandler: ((AlternativeTripBuildable) -> ())?
    func routeToAlternativeTrip(alternativeTripRouter: AlternativeTripBuildable)  {
        routeToAlternativeTripCallCount += 1
    
        if let routeToAlternativeTripHandler = routeToAlternativeTripHandler {
            routeToAlternativeTripHandler(alternativeTripRouter)
        }
        
    }
    
    var releaseRequestCallCount = 0
    var releaseRequestHandler: (() -> ())?
    func releaseRequest()  {
        releaseRequestCallCount += 1
    
        if let releaseRequestHandler = releaseRequestHandler {
            releaseRequestHandler()
        }
        
    }
    
    var routeToModalCallCount = 0
    var routeToModalHandler: ((ViewableRouting) -> ())?
    func routeToModal(router: ViewableRouting)  {
        routeToModalCallCount += 1
    
        if let routeToModalHandler = routeToModalHandler {
            routeToModalHandler(router)
        }
        
    }
    
    var routeAwayFromModalCallCount = 0
    var routeAwayFromModalHandler: (() -> ())?
    func routeAwayFromModal()  {
        routeAwayFromModalCallCount += 1
    
        if let routeAwayFromModalHandler = routeAwayFromModalHandler {
            routeAwayFromModalHandler()
        }
        
    }
}

class ProductOptionsInteractableMock: ProductOptionsInteractable {

    

    init() {

    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ProductOptionsRouting? = nil
    var router: ProductOptionsRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ProductOptionsListener? = nil
    var listener: ProductOptionsListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var productOptionsItemListenerSetCallCount = 0
    var underlyingProductOptionsItemListener: ProductOptionsItemListener? = nil
    var productOptionsItemListener: ProductOptionsItemListener? {
        get {
            return underlyingProductOptionsItemListener
        }
        set {
            underlyingProductOptionsItemListener = newValue
            productOptionsItemListenerSetCallCount += 1
        }
    }
}

class ConfirmationAlertBuildableMock: ConfirmationAlertBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ConfirmationAlertRouting))?
    func build() -> ConfirmationAlertRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ConfirmationAlertRoutingMock()
    }
}

class PlusOneInteractorListenerMock: PlusOneInteractorListener {

    

    init() {

    }
        
    var plusOneCompletedCallCount = 0
    var plusOneCompletedHandler: (() -> ())?
    func plusOneCompleted()  {
        plusOneCompletedCallCount += 1
    
        if let plusOneCompletedHandler = plusOneCompletedHandler {
            plusOneCompletedHandler()
        }
        
    }
    
    var plusOneAbortedCallCount = 0
    var plusOneAbortedHandler: ((Bool) -> ())?
    func plusOneAborted(forceRefreshFares: Bool)  {
        plusOneAbortedCallCount += 1
    
        if let plusOneAbortedHandler = plusOneAbortedHandler {
            plusOneAbortedHandler(forceRefreshFares)
        }
        
    }
}

class DestinationPromptPresentableMock: DestinationPromptPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: DestinationPromptPresentableListener? = nil
    var listener: DestinationPromptPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var configureCallCount = 0
    var configureHandler: (() -> ())?
    func configure()  {
        configureCallCount += 1
    
        if let configureHandler = configureHandler {
            configureHandler()
        }
        
    }
}

class PlusOneMonitoringAnalyticsReporterMock: PlusOneMonitoringAnalyticsReporter {

    

    init() {

    }
        
    var reportEventCallCount = 0
    var reportEventHandler: ((PlusOneMonitoringAnalyticsEvent, String?) -> ())?
    func reportEvent(event: PlusOneMonitoringAnalyticsEvent, stepId: String?)  {
        reportEventCallCount += 1
    
        if let reportEventHandler = reportEventHandler {
            reportEventHandler(event, stepId)
        }
        
    }
    
    var reportTotalWaitTimeCallCount = 0
    var reportTotalWaitTimeHandler: (() -> ())?
    func reportTotalWaitTime()  {
        reportTotalWaitTimeCallCount += 1
    
        if let reportTotalWaitTimeHandler = reportTotalWaitTimeHandler {
            reportTotalWaitTimeHandler()
        }
        
    }
}

class ConfirmationActionRequestPresenterListenerMock: ConfirmationActionRequestPresenterListener {

    

    init() {

    }
        
    var performRequestActionCallCount = 0
    var performRequestActionHandler: (() -> ())?
    func performRequestAction()  {
        performRequestActionCallCount += 1
    
        if let performRequestActionHandler = performRequestActionHandler {
            performRequestActionHandler()
        }
        
    }
    
    var getTapAnalyticsMetadataCallCount = 0
    var getTapAnalyticsMetadataHandler: (() -> (AnalyticsMetadata?))?
    func getTapAnalyticsMetadata() -> AnalyticsMetadata? {
        getTapAnalyticsMetadataCallCount += 1
    
        if let getTapAnalyticsMetadataHandler = getTapAnalyticsMetadataHandler {
            return getTapAnalyticsMetadataHandler()
        }
        return nil
    }
}

class SelectedProductConfigurationListenerMock: SelectedProductConfigurationListener {

    

    init() {

    }
        
    var productItemIdSetCallCount = 0
    var underlyingProductItemId: ProductItemId? = nil
    var productItemId: ProductItemId? {
        get {
            return underlyingProductItemId
        }
        set {
            underlyingProductItemId = newValue
            productItemIdSetCallCount += 1
        }
    }
    
    var productConfigurationDidUpdateCallCount = 0
    var productConfigurationDidUpdateHandler: ((CoreShared.Product) -> ())?
    func productConfigurationDidUpdate(product: CoreShared.Product)  {
        productConfigurationDidUpdateCallCount += 1
    
        if let productConfigurationDidUpdateHandler = productConfigurationDidUpdateHandler {
            productConfigurationDidUpdateHandler(product)
        }
        
    }
}

class TripHeaderRootBuildableMock: TripHeaderRootBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (TripHeaderRootRouting))?
    func build() -> TripHeaderRootRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return TripHeaderRootRoutingMock()
    }
}

class ConfirmationViewControllerTransitionListenerMock: ConfirmationViewControllerTransitionListener {

    

    init() {

    }
        
    var buttonHidingTransitionDidProgressCallCount = 0
    var buttonHidingTransitionDidProgressHandler: ((CGFloat) -> ())?
    func buttonHidingTransitionDidProgress(progress: CGFloat)  {
        buttonHidingTransitionDidProgressCallCount += 1
    
        if let buttonHidingTransitionDidProgressHandler = buttonHidingTransitionDidProgressHandler {
            buttonHidingTransitionDidProgressHandler(progress)
        }
        
    }
}

class ConfirmationAlertViewControllerViewListenerMock: ConfirmationAlertViewControllerViewListener {

    

    init() {

    }
        
    var alertViewControllerDidUpdateCallCount = 0
    var alertViewControllerDidUpdateHandler: (() -> ())?
    func alertViewControllerDidUpdate()  {
        alertViewControllerDidUpdateCallCount += 1
    
        if let alertViewControllerDidUpdateHandler = alertViewControllerDidUpdateHandler {
            alertViewControllerDidUpdateHandler()
        }
        
    }
}

class ProductDetailListViewFareBreakdownListenerMock: ProductDetailListViewFareBreakdownListener {

    

    init() {

    }
        
    var detailListViewCallCount = 0
    var detailListViewHandler: ((ProductDetailListView, PricingLabel, ProductId, String?, FareBindingType) -> ())?
    func detailListView(_ detailListView: ProductDetailListView, didConfigurePricingView pricingView: PricingLabel, associatedId: ProductId, placeholder: String?, bindingType: FareBindingType)  {
        detailListViewCallCount += 1
    
        if let detailListViewHandler = detailListViewHandler {
            detailListViewHandler(detailListView, pricingView, associatedId, placeholder, bindingType)
        }
        
    }
}

class ProductBadgeNotificationStateStreamStoringMock: ProductBadgeNotificationStateStreamStoring {

    

    init() {

    }
        
    var fetchStreamPairCallCount = 0
    var fetchStreamPairHandler: ((VehicleViewId) -> (ProductBadgeNotificationStateStreamPair?))?
    func fetchStreamPair(vehicleViewId: VehicleViewId) -> ProductBadgeNotificationStateStreamPair? {
        fetchStreamPairCallCount += 1
    
        if let fetchStreamPairHandler = fetchStreamPairHandler {
            return fetchStreamPairHandler(vehicleViewId)
        }
        return nil
    }
    
    var createStateStreamPairIfNotExistsCallCount = 0
    var createStateStreamPairIfNotExistsHandler: ((VehicleViewId) -> (ProductBadgeNotificationStateStreamPair))?
    func createStateStreamPairIfNotExists(vehicleViewId: VehicleViewId) -> ProductBadgeNotificationStateStreamPair {
        createStateStreamPairIfNotExistsCallCount += 1
    
        if let createStateStreamPairIfNotExistsHandler = createStateStreamPairIfNotExistsHandler {
            return createStateStreamPairIfNotExistsHandler(vehicleViewId)
        }
        fatalError("createStateStreamPairIfNotExistsHandler returns can't have a default value thus its handler must be set")
    }
}

class DualLocationEditorEntryRoutingMock: DualLocationEditorEntryRouting {

    
    init() {}
    init(interactor: DualLocationEditorEntryInteractable = DualLocationEditorEntryInteractableMock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: DualLocationEditorEntryInteractable = DualLocationEditorEntryInteractableMock()
    var interactor: DualLocationEditorEntryInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeFromDestinationEntryAccessoryCallCount = 0
    var routeFromDestinationEntryAccessoryHandler: (() -> ())?
    func routeFromDestinationEntryAccessory()  {
        routeFromDestinationEntryAccessoryCallCount += 1
    
        if let routeFromDestinationEntryAccessoryHandler = routeFromDestinationEntryAccessoryHandler {
            routeFromDestinationEntryAccessoryHandler()
        }
        
    }
    
    var routeToDestinationEntryAccessoryCallCount = 0
    var routeToDestinationEntryAccessoryHandler: ((DestinationEntryAccessoryBuildable) -> (DestinationEntryAccessoryActionableItem))?
    func routeToDestinationEntryAccessory(builder: DestinationEntryAccessoryBuildable) -> DestinationEntryAccessoryActionableItem {
        routeToDestinationEntryAccessoryCallCount += 1
    
        if let routeToDestinationEntryAccessoryHandler = routeToDestinationEntryAccessoryHandler {
            return routeToDestinationEntryAccessoryHandler(builder)
        }
        fatalError("routeToDestinationEntryAccessoryHandler returns can't have a default value thus its handler must be set")
    }
}

class RideModalPresentationViewControllableMock: RideModalPresentationViewControllable {

    

    init() {

    }
        
    var presentModalCallCount = 0
    var presentModalHandler: ((ViewControllable) -> ())?
    func presentModal(viewController: ViewControllable)  {
        presentModalCallCount += 1
    
        if let presentModalHandler = presentModalHandler {
            presentModalHandler(viewController)
        }
        
    }
    
    var dismissModalCallCount = 0
    var dismissModalHandler: ((Bool, (() -> ())?) -> ())?
    func dismissModal(animated: Bool, completion: (() -> ())?)  {
        dismissModalCallCount += 1
    
        if let dismissModalHandler = dismissModalHandler {
            dismissModalHandler(animated, completion)
        }
        
    }
}

class ProductSelectionViewControllerImageFetchingListenerMock: ProductSelectionViewControllerImageFetchingListener {

    

    init() {

    }
        
    var imagesForProductCallCount = 0
    var imagesForProductHandler: ((ProductViewModel, @escaping (ProductImageMap?) -> ()) -> ())?
    func imagesForProduct(productViewModel: ProductViewModel, completion: @escaping (ProductImageMap?) -> ())  {
        imagesForProductCallCount += 1
    
        if let imagesForProductHandler = imagesForProductHandler {
            imagesForProductHandler(productViewModel, completion)
        }
        
    }
}

class ProductOptionsPresentableMock: ProductOptionsPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductOptionsPresenterListener? = nil
    var listener: ProductOptionsPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class ConfirmationListenerV2Mock: ConfirmationListenerV2 {

    

    init() {

    }
        
    var confirmationDidFinishCallCount = 0
    var confirmationDidFinishHandler: (() -> ())?
    func confirmationDidFinish()  {
        confirmationDidFinishCallCount += 1
    
        if let confirmationDidFinishHandler = confirmationDidFinishHandler {
            confirmationDidFinishHandler()
        }
        
    }
    
    var wantToEditPickupLocationCallCount = 0
    var wantToEditPickupLocationHandler: ((Bool) -> ())?
    func wantToEditPickupLocation(destinationHidden: Bool)  {
        wantToEditPickupLocationCallCount += 1
    
        if let wantToEditPickupLocationHandler = wantToEditPickupLocationHandler {
            wantToEditPickupLocationHandler(destinationHidden)
        }
        
    }
    
    var wantToEditDestinationLocationCallCount = 0
    var wantToEditDestinationLocationHandler: (() -> ())?
    func wantToEditDestinationLocation()  {
        wantToEditDestinationLocationCallCount += 1
    
        if let wantToEditDestinationLocationHandler = wantToEditDestinationLocationHandler {
            wantToEditDestinationLocationHandler()
        }
        
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
    
    var wantToDismissCallCount = 0
    var wantToDismissHandler: (() -> ())?
    func wantToDismiss()  {
        wantToDismissCallCount += 1
    
        if let wantToDismissHandler = wantToDismissHandler {
            wantToDismissHandler()
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
}

class MainPresenterListenerMock: MainPresenterListener {

    

    init() {

    }
        
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var mainViewDidAppearCallCount = 0
    var mainViewDidAppearHandler: (() -> ())?
    func mainViewDidAppear()  {
        mainViewDidAppearCallCount += 1
    
        if let mainViewDidAppearHandler = mainViewDidAppearHandler {
            mainViewDidAppearHandler()
        }
        
    }
    
    var mainViewDidDisappearCallCount = 0
    var mainViewDidDisappearHandler: (() -> ())?
    func mainViewDidDisappear()  {
        mainViewDidDisappearCallCount += 1
    
        if let mainViewDidDisappearHandler = mainViewDidDisappearHandler {
            mainViewDidDisappearHandler()
        }
        
    }
}

class HomeViewControllableMock: HomeViewControllable {

    
    init() {}
    init(cardCollectionViewController: CardCollectionViewControllable, destinationEntryEdgeViewsHidden: Bool = false) {
        self.cardCollectionViewController = cardCollectionViewController
        self.destinationEntryEdgeViewsHidden = destinationEntryEdgeViewsHidden
    }
        
    var updateDimmingCallCount = 0
    var updateDimmingHandler: ((CGFloat, Bool) -> ())?
    func updateDimming(to opacity: CGFloat, allowsInteraction: Bool)  {
        updateDimmingCallCount += 1
    
        if let updateDimmingHandler = updateDimmingHandler {
            updateDimmingHandler(opacity, allowsInteraction)
        }
        
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: HomeViewControllerListener? = nil
    var listener: HomeViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var cardCollectionViewControllerSetCallCount = 0
    var underlyingCardCollectionViewController: CardCollectionViewControllable! 
    var cardCollectionViewController: CardCollectionViewControllable {
        get {
            return underlyingCardCollectionViewController
        }
        set {
            underlyingCardCollectionViewController = newValue
            cardCollectionViewControllerSetCallCount += 1
        }
    }
    
    var presentAcceleratorsViewControllerCallCount = 0
    var presentAcceleratorsViewControllerHandler: ((UIViewController) -> ())?
    func presentAcceleratorsViewController(viewController: UIViewController)  {
        presentAcceleratorsViewControllerCallCount += 1
    
        if let presentAcceleratorsViewControllerHandler = presentAcceleratorsViewControllerHandler {
            presentAcceleratorsViewControllerHandler(viewController)
        }
        
    }
    
    var showDestinationEntryAccessoryViewsCallCount = 0
    var showDestinationEntryAccessoryViewsHandler: (([ViewControllable]) -> ())?
    func showDestinationEntryAccessoryViews(view: [ViewControllable])  {
        showDestinationEntryAccessoryViewsCallCount += 1
    
        if let showDestinationEntryAccessoryViewsHandler = showDestinationEntryAccessoryViewsHandler {
            showDestinationEntryAccessoryViewsHandler(view)
        }
        
    }
    
    var showDestinationEntryEdgesCallCount = 0
    var showDestinationEntryEdgesHandler: ((DestinationEntryEdges<ViewControllable>) -> ())?
    func showDestinationEntryEdges(edgeViews: DestinationEntryEdges<ViewControllable>)  {
        showDestinationEntryEdgesCallCount += 1
    
        if let showDestinationEntryEdgesHandler = showDestinationEntryEdgesHandler {
            showDestinationEntryEdgesHandler(edgeViews)
        }
        
    }
    
    var showDestinationEntryCallCount = 0
    var showDestinationEntryHandler: (() -> ())?
    func showDestinationEntry()  {
        showDestinationEntryCallCount += 1
    
        if let showDestinationEntryHandler = showDestinationEntryHandler {
            showDestinationEntryHandler()
        }
        
    }
    
    var showNoGPSExperienceCallCount = 0
    var showNoGPSExperienceHandler: (() -> ())?
    func showNoGPSExperience()  {
        showNoGPSExperienceCallCount += 1
    
        if let showNoGPSExperienceHandler = showNoGPSExperienceHandler {
            showNoGPSExperienceHandler()
        }
        
    }
    
    var hideNoGPSExperience_deprecatedCallCount = 0
    var hideNoGPSExperience_deprecatedHandler: (() -> ())?
    func hideNoGPSExperience_deprecated()  {
        hideNoGPSExperience_deprecatedCallCount += 1
    
        if let hideNoGPSExperience_deprecatedHandler = hideNoGPSExperience_deprecatedHandler {
            hideNoGPSExperience_deprecatedHandler()
        }
        
    }
    
    var showLocationEditorEntryPluginCallCount = 0
    var showLocationEditorEntryPluginHandler: ((HomeV1LocationEditorEntryViewable) -> ())?
    func showLocationEditorEntryPlugin(view: HomeV1LocationEditorEntryViewable)  {
        showLocationEditorEntryPluginCallCount += 1
    
        if let showLocationEditorEntryPluginHandler = showLocationEditorEntryPluginHandler {
            showLocationEditorEntryPluginHandler(view)
        }
        
    }
    
    var destinationEntryEdgeViewsHiddenSetCallCount = 0
    var underlyingDestinationEntryEdgeViewsHidden: Bool = false
    var destinationEntryEdgeViewsHidden: Bool {
        get {
            return underlyingDestinationEntryEdgeViewsHidden
        }
        set {
            underlyingDestinationEntryEdgeViewsHidden = newValue
            destinationEntryEdgeViewsHiddenSetCallCount += 1
        }
    }
    
    var showFeedPermalinkCallCount = 0
    var showFeedPermalinkHandler: ((ViewControllable) -> ())?
    func showFeedPermalink(with viewController: ViewControllable)  {
        showFeedPermalinkCallCount += 1
    
        if let showFeedPermalinkHandler = showFeedPermalinkHandler {
            showFeedPermalinkHandler(viewController)
        }
        
    }
    
    var dismissFeedPermalinkCallCount = 0
    var dismissFeedPermalinkHandler: (() -> ())?
    func dismissFeedPermalink()  {
        dismissFeedPermalinkCallCount += 1
    
        if let dismissFeedPermalinkHandler = dismissFeedPermalinkHandler {
            dismissFeedPermalinkHandler()
        }
        
    }
    
    var acceleratorsDidUpdateCallCount = 0
    var acceleratorsDidUpdateHandler: ((Bool) -> ())?
    func acceleratorsDidUpdate(areAvailable: Bool)  {
        acceleratorsDidUpdateCallCount += 1
    
        if let acceleratorsDidUpdateHandler = acceleratorsDidUpdateHandler {
            acceleratorsDidUpdateHandler(areAvailable)
        }
        
    }
    
    var hideFeedCallCount = 0
    var hideFeedHandler: (((@escaping () -> ()) -> ()) -> ())?
    func hideFeed(andPerform actions: (@escaping () -> ()) -> ())  {
        hideFeedCallCount += 1
    
        if let hideFeedHandler = hideFeedHandler {
            hideFeedHandler(actions)
        }
        
    }
}

class ProductSelectionRoutingMock: ProductSelectionRouting {

    
    init() {}
    init(interactor: ProductSelectionInteractable = ProductSelectionInteractableMock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ProductSelectionInteractable = ProductSelectionInteractableMock()
    var interactor: ProductSelectionInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
}

class RequestViewControllableMock: RequestViewControllable {

    

    init() {

    }
        
    var buttonHidingTransitionDidProgressCallCount = 0
    var buttonHidingTransitionDidProgressHandler: ((CGFloat) -> ())?
    func buttonHidingTransitionDidProgress(progress: CGFloat)  {
        buttonHidingTransitionDidProgressCallCount += 1
    
        if let buttonHidingTransitionDidProgressHandler = buttonHidingTransitionDidProgressHandler {
            buttonHidingTransitionDidProgressHandler(progress)
        }
        
    }
    
    var navigationListenerSetCallCount = 0
    var underlyingNavigationListener: RequestViewControllerListener? = nil
    var navigationListener: RequestViewControllerListener? {
        get {
            return underlyingNavigationListener
        }
        set {
            underlyingNavigationListener = newValue
            navigationListenerSetCallCount += 1
        }
    }
    
    var showModalCallCount = 0
    var showModalHandler: ((UIViewController) -> ())?
    func showModal(viewController: UIViewController)  {
        showModalCallCount += 1
    
        if let showModalHandler = showModalHandler {
            showModalHandler(viewController)
        }
        
    }
}

class ProductSelectionViewControllerPricingViewListenerMock: ProductSelectionViewControllerPricingViewListener {

    

    init() {

    }
        
    var didShowPricingViewForProductCallCount = 0
    var didShowPricingViewForProductHandler: ((ProductId, Any, String?, FareBindingType?) -> ())?
    func didShowPricingViewForProduct<T>(associatedId: ProductId, pricingView: T, placeholder: String?, fareBindingType: FareBindingType?)  {
        didShowPricingViewForProductCallCount += 1
    
        if let didShowPricingViewForProductHandler = didShowPricingViewForProductHandler {
            didShowPricingViewForProductHandler(associatedId, pricingView, placeholder, fareBindingType)
        }
        
    }
}

class ProductSelectionViewControllableMock: ProductSelectionViewControllable {

    
    init() {}
    init(transitionStateStream: Observable<ProductSelectionTransitionState> = PublishSubject()) {
        self.transitionStateStream = transitionStateStream
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionViewControllerListener? = nil
    var listener: ProductSelectionViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateProductsCallCount = 0
    var updateProductsHandler: ((ProductCatalogViewModel, ProductId?) -> ())?
    func updateProducts(productCatalog: ProductCatalogViewModel, selectedProductId: ProductId?)  {
        updateProductsCallCount += 1
    
        if let updateProductsHandler = updateProductsHandler {
            updateProductsHandler(productCatalog, selectedProductId)
        }
        
    }
    
    var updateProductsProductCatalogCallCount = 0
    var updateProductsProductCatalogHandler: ((ProductCatalogViewModel) -> ())?
    func updateProducts(productCatalog: ProductCatalogViewModel)  {
        updateProductsProductCatalogCallCount += 1
    
        if let updateProductsProductCatalogHandler = updateProductsProductCatalogHandler {
            updateProductsProductCatalogHandler(productCatalog)
        }
        
    }
    
    var updateSelectedProductCallCount = 0
    var updateSelectedProductHandler: ((ProductId) -> ())?
    func updateSelectedProduct(associatedId: ProductId)  {
        updateSelectedProductCallCount += 1
    
        if let updateSelectedProductHandler = updateSelectedProductHandler {
            updateSelectedProductHandler(associatedId)
        }
        
    }
    
    private var transitionStateStreamSubjectKind = 0
    var transitionStateStreamSubjectSetCallCount = 0
    var transitionStateStreamSubject = PublishSubject<ProductSelectionTransitionState>() { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStreamReplaySubject = ReplaySubject<ProductSelectionTransitionState>.create(bufferSize: 1) { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStreamBehaviorSubject: BehaviorSubject<ProductSelectionTransitionState>! { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStreamRxSubject: Observable<ProductSelectionTransitionState>! { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStream: Observable<ProductSelectionTransitionState> {
        get {
            if transitionStateStreamSubjectKind == 0 {
                return transitionStateStreamSubject
            } else if transitionStateStreamSubjectKind == 1 {
                return transitionStateStreamBehaviorSubject
            } else if transitionStateStreamSubjectKind == 2 {
                return transitionStateStreamReplaySubject
            } else {
                return transitionStateStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelectionTransitionState> {
                transitionStateStreamSubject = val
                transitionStateStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelectionTransitionState> {
                transitionStateStreamBehaviorSubject = val
                transitionStateStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelectionTransitionState> {
                transitionStateStreamReplaySubject = val
                transitionStateStreamSubjectKind = 2
            } else {
                transitionStateStreamRxSubject = newValue
                transitionStateStreamSubjectKind = 3
            }
        }
    }
    
    var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
    
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }
    
    var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
    
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }
    
    var dismissDetailCallCount = 0
    var dismissDetailHandler: (() -> ())?
    func dismissDetail()  {
        dismissDetailCallCount += 1
    
        if let dismissDetailHandler = dismissDetailHandler {
            dismissDetailHandler()
        }
        
    }
    
    var presentAlertControllerCallCount = 0
    var presentAlertControllerHandler: ((BaseAlertController) -> ())?
    func presentAlertController(alertController: BaseAlertController)  {
        presentAlertControllerCallCount += 1
    
        if let presentAlertControllerHandler = presentAlertControllerHandler {
            presentAlertControllerHandler(alertController)
        }
        
    }
    
    var showContentStateCallCount = 0
    var showContentStateHandler: ((ProductSelectionContentState) -> ())?
    func showContentState(state: ProductSelectionContentState)  {
        showContentStateCallCount += 1
    
        if let showContentStateHandler = showContentStateHandler {
            showContentStateHandler(state)
        }
        
    }
    
    var showTooltipCallCount = 0
    var showTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func showTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        showTooltipCallCount += 1
    
        if let showTooltipHandler = showTooltipHandler {
            showTooltipHandler(viewModel)
        }
        
    }
    
    var heightCallCount = 0
    var heightHandler: ((CGFloat) -> (CGFloat))?
    func height(adjustedProgress: CGFloat) -> CGFloat {
        heightCallCount += 1
    
        if let heightHandler = heightHandler {
            return heightHandler(adjustedProgress)
        }
        return 0.0
    }
    
    var hideTooltipCallCount = 0
    var hideTooltipHandler: (() -> ())?
    func hideTooltip()  {
        hideTooltipCallCount += 1
    
        if let hideTooltipHandler = hideTooltipHandler {
            hideTooltipHandler()
        }
        
    }
}

class SelectedProductListenerMock: SelectedProductListener {

    

    init() {

    }
        
    var updateSelectedProductAnchorPointValuesCallCount = 0
    var updateSelectedProductAnchorPointValuesHandler: (() -> ())?
    func updateSelectedProductAnchorPointValues()  {
        updateSelectedProductAnchorPointValuesCallCount += 1
    
        if let updateSelectedProductAnchorPointValuesHandler = updateSelectedProductAnchorPointValuesHandler {
            updateSelectedProductAnchorPointValuesHandler()
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
}

class DualLocationEditorEntryPresentableMock: DualLocationEditorEntryPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: DualLocationEditorEntryPresentableListener? = nil
    var listener: DualLocationEditorEntryPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var configureCallCount = 0
    var configureHandler: ((PickupLocationConfidence) -> ())?
    func configure(pickupLocationConfidence: PickupLocationConfidence)  {
        configureCallCount += 1
    
        if let configureHandler = configureHandler {
            configureHandler(pickupLocationConfidence)
        }
        
    }
}

class ProductOptionsListenerMock: ProductOptionsListener {

    

    init() {

    }
    
}

class SelectedProductConfigurationBuildableMock: SelectedProductConfigurationBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((SelectedProductConfigurationListener) -> (SelectedProductConfigurationRouting))?
    func build(withListener listener: SelectedProductConfigurationListener) -> SelectedProductConfigurationRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return SelectedProductConfigurationRoutingMock()
    }
}

class HomePresentableV2Mock: HomePresentableV2 {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: HomePresentableListenerV2? = nil
    var listener: HomePresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var acceleratorsUpdatedCallCount = 0
    var acceleratorsUpdatedHandler: ((Bool) -> ())?
    func acceleratorsUpdated(availability: Bool)  {
        acceleratorsUpdatedCallCount += 1
    
        if let acceleratorsUpdatedHandler = acceleratorsUpdatedHandler {
            acceleratorsUpdatedHandler(availability)
        }
        
    }
    
    var calculateAvailableSizeCallCount = 0
    var calculateAvailableSizeHandler: ((Bool) -> (CGSize?))?
    func calculateAvailableSize(_ toScreenTop: Bool) -> CGSize? {
        calculateAvailableSizeCallCount += 1
    
        if let calculateAvailableSizeHandler = calculateAvailableSizeHandler {
            return calculateAvailableSizeHandler(toScreenTop)
        }
        return nil
    }
    
    var updateDimCallCount = 0
    var updateDimHandler: ((Bool) -> ())?
    func updateDim(shouldDim: Bool)  {
        updateDimCallCount += 1
    
        if let updateDimHandler = updateDimHandler {
            updateDimHandler(shouldDim)
        }
        
    }
    
    var updateMapPaddingIfNeededCallCount = 0
    var updateMapPaddingIfNeededHandler: (() -> ())?
    func updateMapPaddingIfNeeded()  {
        updateMapPaddingIfNeededCallCount += 1
    
        if let updateMapPaddingIfNeededHandler = updateMapPaddingIfNeededHandler {
            updateMapPaddingIfNeededHandler()
        }
        
    }
    
    var modeNavigationUpdatedCallCount = 0
    var modeNavigationUpdatedHandler: ((ModeNavigationPosition?) -> ())?
    func modeNavigationUpdated(_ position: ModeNavigationPosition?)  {
        modeNavigationUpdatedCallCount += 1
    
        if let modeNavigationUpdatedHandler = modeNavigationUpdatedHandler {
            modeNavigationUpdatedHandler(position)
        }
        
    }
    
    var updateRideContextEntryTypeCallCount = 0
    var updateRideContextEntryTypeHandler: ((RideContextEntryType) -> ())?
    func updateRideContextEntryType(_ type: RideContextEntryType)  {
        updateRideContextEntryTypeCallCount += 1
    
        if let updateRideContextEntryTypeHandler = updateRideContextEntryTypeHandler {
            updateRideContextEntryTypeHandler(type)
        }
        
    }
}

class ConfirmationPresentableV2Mock: ConfirmationPresentableV2 {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationPresentableListenerV2? = nil
    var listener: ConfirmationPresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateDestinationEntryNeededCallCount = 0
    var updateDestinationEntryNeededHandler: ((Bool) -> ())?
    func updateDestinationEntryNeeded(_ destinationEntryNeeded: Bool)  {
        updateDestinationEntryNeededCallCount += 1
    
        if let updateDestinationEntryNeededHandler = updateDestinationEntryNeededHandler {
            updateDestinationEntryNeededHandler(destinationEntryNeeded)
        }
        
    }
    
    var updateViewStateIfNeededCallCount = 0
    var updateViewStateIfNeededHandler: (() -> ())?
    func updateViewStateIfNeeded()  {
        updateViewStateIfNeededCallCount += 1
    
        if let updateViewStateIfNeededHandler = updateViewStateIfNeededHandler {
            updateViewStateIfNeededHandler()
        }
        
    }
    
    var updateMapPaddingIfNeededCallCount = 0
    var updateMapPaddingIfNeededHandler: (() -> ())?
    func updateMapPaddingIfNeeded()  {
        updateMapPaddingIfNeededCallCount += 1
    
        if let updateMapPaddingIfNeededHandler = updateMapPaddingIfNeededHandler {
            updateMapPaddingIfNeededHandler()
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
}

class HomeListenerMock: HomeListener {

    

    init() {

    }
        
    var wantDestinationCallCount = 0
    var wantDestinationHandler: ((LocationEditorMode) -> ())?
    func wantDestination(mode: LocationEditorMode)  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler(mode)
        }
        
    }
    
    var wantPickupCallCount = 0
    var wantPickupHandler: ((LocationEditorMode) -> ())?
    func wantPickup(mode: LocationEditorMode)  {
        wantPickupCallCount += 1
    
        if let wantPickupHandler = wantPickupHandler {
            wantPickupHandler(mode)
        }
        
    }
    
    var didSelectStuntCallCount = 0
    var didSelectStuntHandler: ((HomeInteractable, VehicleViewId) -> ())?
    func didSelectStunt(interactor: HomeInteractable, vehicleViewId: VehicleViewId)  {
        didSelectStuntCallCount += 1
    
        if let didSelectStuntHandler = didSelectStuntHandler {
            didSelectStuntHandler(interactor, vehicleViewId)
        }
        
    }
}

class ProductOptionsBuildableMock: ProductOptionsBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ProductOptionsRouting))?
    func build() -> ProductOptionsRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ProductOptionsRoutingMock()
    }
}

class PlusOneBuildableMock: PlusOneBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (PlusOneRoutingCommon))?
    func build() -> PlusOneRoutingCommon {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        fatalError("buildHandler returns can't have a default value thus its handler must be set")
    }
}

class ProductSelectionPresentableMock: ProductSelectionPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionPresenterListener? = nil
    var listener: ProductSelectionPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateProductsCallCount = 0
    var updateProductsHandler: ((ProductCatalog, ProductSubtitleMap?, ProductToastMap?, ProductBadgeMap?, ProductDetailInfoMap?, ProductAnnotationsMap?, ProductFareBindingTypeMap?, ProductExplainerMap?, ProductId?, ProductDetailViewMap?, ProductViewEmphasisMap?, ProductStickerMap?, ProductRecommendationInfoMap?) -> ())?
    func updateProducts(productCatalog: ProductCatalog, productSubtitleMap: ProductSubtitleMap?, productToastMap: ProductToastMap?, productBadgeMap: ProductBadgeMap?, productDetailInfoMap: ProductDetailInfoMap?, productAnnotationsMap: ProductAnnotationsMap?, productFareBindingTypeMap: ProductFareBindingTypeMap?, productExplainerMap: ProductExplainerMap?, selectedProductId: ProductId?, productDetailViewMap: ProductDetailViewMap?, productViewEmphasisMap: ProductViewEmphasisMap?, productStickerMap: ProductStickerMap?, productRecommendationInfoMap: ProductRecommendationInfoMap?)  {
        updateProductsCallCount += 1
    
        if let updateProductsHandler = updateProductsHandler {
            updateProductsHandler(productCatalog, productSubtitleMap, productToastMap, productBadgeMap, productDetailInfoMap, productAnnotationsMap, productFareBindingTypeMap, productExplainerMap, selectedProductId, productDetailViewMap, productViewEmphasisMap, productStickerMap, productRecommendationInfoMap)
        }
        
    }
    
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductId) -> ())?
    func selectProduct(associatedId: ProductId)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(associatedId)
        }
        
    }
    
    var showFetchingFareCallCount = 0
    var showFetchingFareHandler: (() -> ())?
    func showFetchingFare()  {
        showFetchingFareCallCount += 1
    
        if let showFetchingFareHandler = showFetchingFareHandler {
            showFetchingFareHandler()
        }
        
    }
    
    var hideFetchingFareCallCount = 0
    var hideFetchingFareHandler: (() -> ())?
    func hideFetchingFare()  {
        hideFetchingFareCallCount += 1
    
        if let hideFetchingFareHandler = hideFetchingFareHandler {
            hideFetchingFareHandler()
        }
        
    }
    
    var showUpsellCallCount = 0
    var showUpsellHandler: ((Upsell) -> ())?
    func showUpsell(upsell: Upsell)  {
        showUpsellCallCount += 1
    
        if let showUpsellHandler = showUpsellHandler {
            showUpsellHandler(upsell)
        }
        
    }
    
    var showContentStateCallCount = 0
    var showContentStateHandler: ((ProductSelectionContentState) -> ())?
    func showContentState(state: ProductSelectionContentState)  {
        showContentStateCallCount += 1
    
        if let showContentStateHandler = showContentStateHandler {
            showContentStateHandler(state)
        }
        
    }
    
    var showTooltipCallCount = 0
    var showTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func showTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        showTooltipCallCount += 1
    
        if let showTooltipHandler = showTooltipHandler {
            showTooltipHandler(viewModel)
        }
        
    }
    
    var hideTooltipCallCount = 0
    var hideTooltipHandler: (() -> ())?
    func hideTooltip()  {
        hideTooltipCallCount += 1
    
        if let hideTooltipHandler = hideTooltipHandler {
            hideTooltipHandler()
        }
        
    }
}

class ConfirmationListenerMock: ConfirmationListener {

    

    init() {

    }
        
    var confirmationDidFinishCallCount = 0
    var confirmationDidFinishHandler: (() -> ())?
    func confirmationDidFinish()  {
        confirmationDidFinishCallCount += 1
    
        if let confirmationDidFinishHandler = confirmationDidFinishHandler {
            confirmationDidFinishHandler()
        }
        
    }
    
    var wantToEditPickupLocationCallCount = 0
    var wantToEditPickupLocationHandler: ((Bool) -> ())?
    func wantToEditPickupLocation(destinationHidden: Bool)  {
        wantToEditPickupLocationCallCount += 1
    
        if let wantToEditPickupLocationHandler = wantToEditPickupLocationHandler {
            wantToEditPickupLocationHandler(destinationHidden)
        }
        
    }
    
    var wantToEditDestinationLocationCallCount = 0
    var wantToEditDestinationLocationHandler: (() -> ())?
    func wantToEditDestinationLocation()  {
        wantToEditDestinationLocationCallCount += 1
    
        if let wantToEditDestinationLocationHandler = wantToEditDestinationLocationHandler {
            wantToEditDestinationLocationHandler()
        }
        
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
    
    var wantToDismissCallCount = 0
    var wantToDismissHandler: (() -> ())?
    func wantToDismiss()  {
        wantToDismissCallCount += 1
    
        if let wantToDismissHandler = wantToDismissHandler {
            wantToDismissHandler()
        }
        
    }
}

class MenuPresenterListenerMock: MenuPresenterListener {

    

    init() {

    }
        
    var didTapMenuHeaderCallCount = 0
    var didTapMenuHeaderHandler: (() -> ())?
    func didTapMenuHeader()  {
        didTapMenuHeaderCallCount += 1
    
        if let didTapMenuHeaderHandler = didTapMenuHeaderHandler {
            didTapMenuHeaderHandler()
        }
        
    }
    
    var didTapNavigationItemAtIndexCallCount = 0
    var didTapNavigationItemAtIndexHandler: ((Int) -> ())?
    func didTapNavigationItemAtIndex(index: Int)  {
        didTapNavigationItemAtIndexCallCount += 1
    
        if let didTapNavigationItemAtIndexHandler = didTapNavigationItemAtIndexHandler {
            didTapNavigationItemAtIndexHandler(index)
        }
        
    }
    
    var didTapActionItemAtIndexCallCount = 0
    var didTapActionItemAtIndexHandler: ((Int) -> ())?
    func didTapActionItemAtIndex(index: Int)  {
        didTapActionItemAtIndexCallCount += 1
    
        if let didTapActionItemAtIndexHandler = didTapActionItemAtIndexHandler {
            didTapActionItemAtIndexHandler(index)
        }
        
    }
    
    var wantHideMenuCallCount = 0
    var wantHideMenuHandler: (((() -> ())?) -> ())?
    func wantHideMenu(completion: (() -> ())?)  {
        wantHideMenuCallCount += 1
    
        if let wantHideMenuHandler = wantHideMenuHandler {
            wantHideMenuHandler(completion)
        }
        
    }
}

class SelectedProductPresentableListenerMock: SelectedProductPresentableListener {

    

    init() {

    }
        
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
}

public class ProductSelectionTooltipShowingMock: ProductSelectionTooltipShowing {

    

    public init() {

    }
        
    var tooltipShowingListenerSetCallCount = 0
    var underlyingTooltipShowingListener: ProductSelectionTooltipShowingListener? = nil
    public var tooltipShowingListener: ProductSelectionTooltipShowingListener? {
        get {
            return underlyingTooltipShowingListener
        }
        set {
            underlyingTooltipShowingListener = newValue
            tooltipShowingListenerSetCallCount += 1
        }
    }
    
    var showTooltipCallCount = 0
    public var showTooltipHandler: ((ProductTooltipViewModel, TooltipViewBindable?, ProductSelectionTooltipContextProviding?) -> ())?
    public func showTooltip(withViewModel viewModel: ProductTooltipViewModel, tooltipBindable: TooltipViewBindable?, contextProvider: ProductSelectionTooltipContextProviding?)  {
        showTooltipCallCount += 1
    
        if let showTooltipHandler = showTooltipHandler {
            showTooltipHandler(viewModel, tooltipBindable, contextProvider)
        }
        
    }
    
    var hideTooltipCallCount = 0
    public var hideTooltipHandler: ((ProductTooltipViewModel) -> ())?
    public func hideTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        hideTooltipCallCount += 1
    
        if let hideTooltipHandler = hideTooltipHandler {
            hideTooltipHandler(viewModel)
        }
        
    }
}

class MainPresentableMock: MainPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MainPresenterListener? = nil
    var listener: MainPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
}

class RootDynamicComponentMock: RootDynamicComponent {

    

    init() {

    }
        
    var setStatusUpdateLoggerCallCount = 0
    var setStatusUpdateLoggerHandler: ((StatusUpdateLogger?) -> ())?
    func setStatusUpdateLogger(logger: StatusUpdateLogger?)  {
        setStatusUpdateLoggerCallCount += 1
    
        if let setStatusUpdateLoggerHandler = setStatusUpdateLoggerHandler {
            setStatusUpdateLoggerHandler(logger)
        }
        
    }
}

class TripDetailsBuildableMock: TripDetailsBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((TripDetailsListener) -> (TripDetailsRouting))?
    func build(withListener listener: TripDetailsListener) -> TripDetailsRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return TripDetailsRoutingMock()
    }
}

class MenuPresentableMock: MenuPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MenuPresenterListener? = nil
    var listener: MenuPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var reloadNavigationItemsCallCount = 0
    var reloadNavigationItemsHandler: (([MenuItemPresentingInternal]) -> ())?
    func reloadNavigationItems(items: [MenuItemPresentingInternal])  {
        reloadNavigationItemsCallCount += 1
    
        if let reloadNavigationItemsHandler = reloadNavigationItemsHandler {
            reloadNavigationItemsHandler(items)
        }
        
    }
    
    var reloadActionItemsCallCount = 0
    var reloadActionItemsHandler: (([MenuItemPresentingInternal]) -> ())?
    func reloadActionItems(items: [MenuItemPresentingInternal])  {
        reloadActionItemsCallCount += 1
    
        if let reloadActionItemsHandler = reloadActionItemsHandler {
            reloadActionItemsHandler(items)
        }
        
    }
    
    var setClientCallCount = 0
    var setClientHandler: ((Rider) -> ())?
    func setClient(client: Rider)  {
        setClientCallCount += 1
    
        if let setClientHandler = setClientHandler {
            setClientHandler(client)
        }
        
    }
    
    var setClientImageCallCount = 0
    var setClientImageHandler: ((UIImage) -> ())?
    func setClientImage(image: UIImage)  {
        setClientImageCallCount += 1
    
        if let setClientImageHandler = setClientImageHandler {
            setClientImageHandler(image)
        }
        
    }
}

class RootRoutingMock: RootRouting {

    
    init() {}
    init(interactor: RootInteractable = RootInteractableMock()) {
        self.interactor = interactor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: RootInteractable = RootInteractableMock()
    var interactor: RootInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var applicationOpenURLHandlerSetCallCount = 0
    var underlyingApplicationOpenURLHandler: ApplicationOpenURLHandler! 
    var applicationOpenURLHandler: ApplicationOpenURLHandler {
        get {
            return underlyingApplicationOpenURLHandler
        }
        set {
            underlyingApplicationOpenURLHandler = newValue
            applicationOpenURLHandlerSetCallCount += 1
        }
    }
    
    var routeToEntryCallCount = 0
    var routeToEntryHandler: (() -> (EntryActionableItem))?
    func routeToEntry() -> EntryActionableItem {
        routeToEntryCallCount += 1
    
        if let routeToEntryHandler = routeToEntryHandler {
            return routeToEntryHandler()
        }
        fatalError("routeToEntryHandler returns can't have a default value thus its handler must be set")
    }
    
    var routeToMainCallCount = 0
    var routeToMainHandler: ((Session, ImmutableSession) -> (MainActionableItem))?
    func routeToMain(session: Session, immutableSession: ImmutableSession) -> MainActionableItem {
        routeToMainCallCount += 1
    
        if let routeToMainHandler = routeToMainHandler {
            return routeToMainHandler(session, immutableSession)
        }
        fatalError("routeToMainHandler returns can't have a default value thus its handler must be set")
    }
}

public class OrchestratorPluginExtensionMock: OrchestratorPluginExtension {

    
    public init() {}
    public init(networkStatusStream: OrchestratorNetworkStatusStreaming, mutableNetworkStatusStream: MutableOrchestratorNetworkStatusStreaming) {
        self.networkStatusStream = networkStatusStream
        self.mutableNetworkStatusStream = mutableNetworkStatusStream
    }
        
    var addPaymentFlowProviderSetCallCount = 0
    var underlyingAddPaymentFlowProvider: AddPaymentFlowProvider? = nil
    public var addPaymentFlowProvider: AddPaymentFlowProvider? {
        get {
            return underlyingAddPaymentFlowProvider
        }
        set {
            underlyingAddPaymentFlowProvider = newValue
            addPaymentFlowProviderSetCallCount += 1
        }
    }
    
    var addPaymentAddonProviderSetCallCount = 0
    var underlyingAddPaymentAddonProvider: AddPaymentAddonProvider? = nil
    public var addPaymentAddonProvider: AddPaymentAddonProvider? {
        get {
            return underlyingAddPaymentAddonProvider
        }
        set {
            underlyingAddPaymentAddonProvider = newValue
            addPaymentAddonProviderSetCallCount += 1
        }
    }
    
    var addPaymentPlusOneAddonProviderSetCallCount = 0
    var underlyingAddPaymentPlusOneAddonProvider: AddPaymentPlusOneAddonProvider? = nil
    public var addPaymentPlusOneAddonProvider: AddPaymentPlusOneAddonProvider? {
        get {
            return underlyingAddPaymentPlusOneAddonProvider
        }
        set {
            underlyingAddPaymentPlusOneAddonProvider = newValue
            addPaymentPlusOneAddonProviderSetCallCount += 1
        }
    }
    
    var legalConsentDisclaimerPluginPointSetCallCount = 0
    var underlyingLegalConsentDisclaimerPluginPoint: LegalConsentDisclaimerPluginPoint? = nil
    public var legalConsentDisclaimerPluginPoint: LegalConsentDisclaimerPluginPoint? {
        get {
            return underlyingLegalConsentDisclaimerPluginPoint
        }
        set {
            underlyingLegalConsentDisclaimerPluginPoint = newValue
            legalConsentDisclaimerPluginPointSetCallCount += 1
        }
    }
    
    var paymentMethodDisplayableProviderSetCallCount = 0
    var underlyingPaymentMethodDisplayableProvider: PaymentMethodDisplayableProvider? = nil
    public var paymentMethodDisplayableProvider: PaymentMethodDisplayableProvider? {
        get {
            return underlyingPaymentMethodDisplayableProvider
        }
        set {
            underlyingPaymentMethodDisplayableProvider = newValue
            paymentMethodDisplayableProviderSetCallCount += 1
        }
    }
    
    var postAddPaymentAddonProviderSetCallCount = 0
    var underlyingPostAddPaymentAddonProvider: PostAddPaymentAddonProvider? = nil
    public var postAddPaymentAddonProvider: PostAddPaymentAddonProvider? {
        get {
            return underlyingPostAddPaymentAddonProvider
        }
        set {
            underlyingPostAddPaymentAddonProvider = newValue
            postAddPaymentAddonProviderSetCallCount += 1
        }
    }
    
    var verifyPaymentFlowProviderSetCallCount = 0
    var underlyingVerifyPaymentFlowProvider: VerifyPaymentFlowProvider? = nil
    public var verifyPaymentFlowProvider: VerifyPaymentFlowProvider? {
        get {
            return underlyingVerifyPaymentFlowProvider
        }
        set {
            underlyingVerifyPaymentFlowProvider = newValue
            verifyPaymentFlowProviderSetCallCount += 1
        }
    }
    
    var helpIssuePluginPointOptionalSetCallCount = 0
    var underlyingHelpIssuePluginPointOptional: HelpIssuePluginPoint? = nil
    public var helpIssuePluginPointOptional: HelpIssuePluginPoint? {
        get {
            return underlyingHelpIssuePluginPointOptional
        }
        set {
            underlyingHelpIssuePluginPointOptional = newValue
            helpIssuePluginPointOptionalSetCallCount += 1
        }
    }
    
    var postAuthenticationStepPluginPointSetCallCount = 0
    var underlyingPostAuthenticationStepPluginPoint: PostAuthenticationStepPluginPoint? = nil
    public var postAuthenticationStepPluginPoint: PostAuthenticationStepPluginPoint? {
        get {
            return underlyingPostAuthenticationStepPluginPoint
        }
        set {
            underlyingPostAuthenticationStepPluginPoint = newValue
            postAuthenticationStepPluginPointSetCallCount += 1
        }
    }
    
    var networkStatusStreamSetCallCount = 0
    var underlyingNetworkStatusStream: OrchestratorNetworkStatusStreaming! 
    public var networkStatusStream: OrchestratorNetworkStatusStreaming {
        get {
            return underlyingNetworkStatusStream
        }
        set {
            underlyingNetworkStatusStream = newValue
            networkStatusStreamSetCallCount += 1
        }
    }
    
    var mutableNetworkStatusStreamSetCallCount = 0
    var underlyingMutableNetworkStatusStream: MutableOrchestratorNetworkStatusStreaming! 
    public var mutableNetworkStatusStream: MutableOrchestratorNetworkStatusStreaming {
        get {
            return underlyingMutableNetworkStatusStream
        }
        set {
            underlyingMutableNetworkStatusStream = newValue
            mutableNetworkStatusStreamSetCallCount += 1
        }
    }
}

class RequestPresentableMock: RequestPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: RequestPresenterListener? = nil
    var listener: RequestPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class HomeListenerV2Mock: HomeListenerV2 {

    

    init() {

    }
        
    var wantLocationEditorCallCount = 0
    var wantLocationEditorHandler: ((LocationEditorContext, LocationEditorMode) -> ())?
    func wantLocationEditor(context: LocationEditorContext, mode: LocationEditorMode)  {
        wantLocationEditorCallCount += 1
    
        if let wantLocationEditorHandler = wantLocationEditorHandler {
            wantLocationEditorHandler(context, mode)
        }
        
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
}

class ProductSelectionListenerV2Mock: ProductSelectionListenerV2 {

    

    init() {

    }
        
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductItemId, Bool) -> ())?
    func selectProduct(productItemId: ProductItemId, shouldRouteToSelectedProduct: Bool)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(productItemId, shouldRouteToSelectedProduct)
        }
        
    }
    
    var updateProductSelectionViewStateTransitionProgressCallCount = 0
    var updateProductSelectionViewStateTransitionProgressHandler: (() -> ())?
    func updateProductSelectionViewStateTransitionProgress()  {
        updateProductSelectionViewStateTransitionProgressCallCount += 1
    
        if let updateProductSelectionViewStateTransitionProgressHandler = updateProductSelectionViewStateTransitionProgressHandler {
            updateProductSelectionViewStateTransitionProgressHandler()
        }
        
    }
    
    var updateProductSelectionAnchorPointValuesCallCount = 0
    var updateProductSelectionAnchorPointValuesHandler: (() -> ())?
    func updateProductSelectionAnchorPointValues()  {
        updateProductSelectionAnchorPointValuesCallCount += 1
    
        if let updateProductSelectionAnchorPointValuesHandler = updateProductSelectionAnchorPointValuesHandler {
            updateProductSelectionAnchorPointValuesHandler()
        }
        
    }
}

class RequestListenerMock: RequestListener {

    

    init() {

    }
        
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var pickupLocationUpdatedCallCount = 0
    var pickupLocationUpdatedHandler: ((CLLocationCoordinate2D, Date?) -> ())?
    func pickupLocationUpdated(locationCoordinate: CLLocationCoordinate2D, timestamp: Date?)  {
        pickupLocationUpdatedCallCount += 1
    
        if let pickupLocationUpdatedHandler = pickupLocationUpdatedHandler {
            pickupLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var destinationLocationUpdatedCallCount = 0
    var destinationLocationUpdatedHandler: ((CLLocationCoordinate2D?, Date?) -> ())?
    func destinationLocationUpdated(locationCoordinate: CLLocationCoordinate2D?, timestamp: Date?)  {
        destinationLocationUpdatedCallCount += 1
    
        if let destinationLocationUpdatedHandler = destinationLocationUpdatedHandler {
            destinationLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var sendCallCount = 0
    var sendHandler: ((PickupRequestV2, CoreShared.Product?) -> ())?
    func send(pickupRequest: PickupRequestV2, product: CoreShared.Product?)  {
        sendCallCount += 1
    
        if let sendHandler = sendHandler {
            sendHandler(pickupRequest, product)
        }
        
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
}

public class ProductSelectionTooltipShowingListenerMock: ProductSelectionTooltipShowingListener {

    

    public init() {

    }
        
    var tooltipShowerCallCount = 0
    public var tooltipShowerHandler: ((ProductSelectionTooltipShowing, ProductTooltipViewModel) -> ())?
    public func tooltipShower(_ shower: ProductSelectionTooltipShowing, didShowTooltipWithViewModel tooltipViewModel: ProductTooltipViewModel)  {
        tooltipShowerCallCount += 1
    
        if let tooltipShowerHandler = tooltipShowerHandler {
            tooltipShowerHandler(shower, tooltipViewModel)
        }
        
    }
    
    var tooltipShowerDidHideTooltipWithViewModelCallCount = 0
    public var tooltipShowerDidHideTooltipWithViewModelHandler: ((ProductSelectionTooltipShowing, ProductTooltipViewModel) -> ())?
    public func tooltipShower(_ shower: ProductSelectionTooltipShowing, didHideTooltipWithViewModel tooltipViewModel: ProductTooltipViewModel)  {
        tooltipShowerDidHideTooltipWithViewModelCallCount += 1
    
        if let tooltipShowerDidHideTooltipWithViewModelHandler = tooltipShowerDidHideTooltipWithViewModelHandler {
            tooltipShowerDidHideTooltipWithViewModelHandler(shower, tooltipViewModel)
        }
        
    }
}

class MenuListenerMock: MenuListener {

    

    init() {

    }
        
    var wantHideMenuCallCount = 0
    var wantHideMenuHandler: (((() -> ())?) -> ())?
    func wantHideMenu(completion: (() -> ())?)  {
        wantHideMenuCallCount += 1
    
        if let wantHideMenuHandler = wantHideMenuHandler {
            wantHideMenuHandler(completion)
        }
        
    }
    
    var openMenuItemCallCount = 0
    var openMenuItemHandler: ((MenuItemRouting, Bool) -> (Observable<(MenuItemActionableItem, ())>))?
    func openMenuItem(_ menuItem: MenuItemRouting, shouldShowInFullScreen: Bool) -> Observable<(MenuItemActionableItem, ())> {
        openMenuItemCallCount += 1
    
        if let openMenuItemHandler = openMenuItemHandler {
            return openMenuItemHandler(menuItem, shouldShowInFullScreen)
        }
        return Observable.empty()
    }
}

class RideInteractableMock: RideInteractable {

    

    init() {

    }
        
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var pickupLocationUpdatedCallCount = 0
    var pickupLocationUpdatedHandler: ((CLLocationCoordinate2D, Date?) -> ())?
    func pickupLocationUpdated(locationCoordinate: CLLocationCoordinate2D, timestamp: Date?)  {
        pickupLocationUpdatedCallCount += 1
    
        if let pickupLocationUpdatedHandler = pickupLocationUpdatedHandler {
            pickupLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var destinationLocationUpdatedCallCount = 0
    var destinationLocationUpdatedHandler: ((CLLocationCoordinate2D?, Date?) -> ())?
    func destinationLocationUpdated(locationCoordinate: CLLocationCoordinate2D?, timestamp: Date?)  {
        destinationLocationUpdatedCallCount += 1
    
        if let destinationLocationUpdatedHandler = destinationLocationUpdatedHandler {
            destinationLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var sendCallCount = 0
    var sendHandler: ((PickupRequestV2, CoreShared.Product?) -> ())?
    func send(pickupRequest: PickupRequestV2, product: CoreShared.Product?)  {
        sendCallCount += 1
    
        if let sendHandler = sendHandler {
            sendHandler(pickupRequest, product)
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: RideRouting? = nil
    var router: RideRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var rideListenerSetCallCount = 0
    var underlyingRideListener: RideListener? = nil
    var rideListener: RideListener? {
        get {
            return underlyingRideListener
        }
        set {
            underlyingRideListener = newValue
            rideListenerSetCallCount += 1
        }
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
    
    var updateRideContextCallCount = 0
    var updateRideContextHandler: ((RideContext) -> ())?
    func updateRideContext(_ context: RideContext)  {
        updateRideContextCallCount += 1
    
        if let updateRideContextHandler = updateRideContextHandler {
            updateRideContextHandler(context)
        }
        
    }
    
    var cancelTripCallCount = 0
    var cancelTripHandler: (() -> ())?
    func cancelTrip()  {
        cancelTripCallCount += 1
    
        if let cancelTripHandler = cancelTripHandler {
            cancelTripHandler()
        }
        
    }
    
    var didTripStateReachOnTripCallCount = 0
    var didTripStateReachOnTripHandler: (() -> ())?
    func didTripStateReachOnTrip()  {
        didTripStateReachOnTripCallCount += 1
    
        if let didTripStateReachOnTripHandler = didTripStateReachOnTripHandler {
            didTripStateReachOnTripHandler()
        }
        
    }
    
    var completeTripIfNeededCallCount = 0
    var completeTripIfNeededHandler: ((RiderUuid, TripUuid) -> ())?
    func completeTripIfNeeded(riderUUID: RiderUuid, tripUUID: TripUuid)  {
        completeTripIfNeededCallCount += 1
    
        if let completeTripIfNeededHandler = completeTripIfNeededHandler {
            completeTripIfNeededHandler(riderUUID, tripUUID)
        }
        
    }
}

class ProductBadgeNotificationStateShowingMock: ProductBadgeNotificationStateShowing {

    

    init() {

    }
        
    var setBadgeNotificationStateCallCount = 0
    var setBadgeNotificationStateHandler: ((ProductBadgeNotificationState) -> ())?
    func setBadgeNotificationState(state: ProductBadgeNotificationState)  {
        setBadgeNotificationStateCallCount += 1
    
        if let setBadgeNotificationStateHandler = setBadgeNotificationStateHandler {
            setBadgeNotificationStateHandler(state)
        }
        
    }
    
    var productViewModelSetCallCount = 0
    var underlyingProductViewModel: ProductViewModel? = nil
    var productViewModel: ProductViewModel? {
        get {
            return underlyingProductViewModel
        }
        set {
            underlyingProductViewModel = newValue
            productViewModelSetCallCount += 1
        }
    }
    
    var productBadgeNotificationStreamInfoSetCallCount = 0
    var underlyingProductBadgeNotificationStreamInfo: ProductBadgeNotificationStateStreamPair? = nil
    var productBadgeNotificationStreamInfo: ProductBadgeNotificationStateStreamPair? {
        get {
            return underlyingProductBadgeNotificationStreamInfo
        }
        set {
            underlyingProductBadgeNotificationStreamInfo = newValue
            productBadgeNotificationStreamInfoSetCallCount += 1
        }
    }
}

class HomePresentableMock: HomePresentable {

    
    init() {}
    init(destinationEntryEdgeViewsHidden: Bool = false) {
        self.destinationEntryEdgeViewsHidden = destinationEntryEdgeViewsHidden
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: HomePresenterListener? = nil
    var listener: HomePresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var presentDestinationEntryCallCount = 0
    var presentDestinationEntryHandler: (() -> ())?
    func presentDestinationEntry()  {
        presentDestinationEntryCallCount += 1
    
        if let presentDestinationEntryHandler = presentDestinationEntryHandler {
            presentDestinationEntryHandler()
        }
        
    }
    
    var presentNoGPSExperienceCallCount = 0
    var presentNoGPSExperienceHandler: (() -> ())?
    func presentNoGPSExperience()  {
        presentNoGPSExperienceCallCount += 1
    
        if let presentNoGPSExperienceHandler = presentNoGPSExperienceHandler {
            presentNoGPSExperienceHandler()
        }
        
    }
    
    var presentLocationEditorEntryPluginCallCount = 0
    var presentLocationEditorEntryPluginHandler: ((HomeV1LocationEditorEntryViewable) -> ())?
    func presentLocationEditorEntryPlugin(view: HomeV1LocationEditorEntryViewable)  {
        presentLocationEditorEntryPluginCallCount += 1
    
        if let presentLocationEditorEntryPluginHandler = presentLocationEditorEntryPluginHandler {
            presentLocationEditorEntryPluginHandler(view)
        }
        
    }
    
    var dismissNoGPSExperience_deprecatedCallCount = 0
    var dismissNoGPSExperience_deprecatedHandler: (() -> ())?
    func dismissNoGPSExperience_deprecated()  {
        dismissNoGPSExperience_deprecatedCallCount += 1
    
        if let dismissNoGPSExperience_deprecatedHandler = dismissNoGPSExperience_deprecatedHandler {
            dismissNoGPSExperience_deprecatedHandler()
        }
        
    }
    
    var destinationEntryEdgeViewsHiddenSetCallCount = 0
    var underlyingDestinationEntryEdgeViewsHidden: Bool = false
    var destinationEntryEdgeViewsHidden: Bool {
        get {
            return underlyingDestinationEntryEdgeViewsHidden
        }
        set {
            underlyingDestinationEntryEdgeViewsHidden = newValue
            destinationEntryEdgeViewsHiddenSetCallCount += 1
        }
    }
    
    var acceleratorsDidUpdateCallCount = 0
    var acceleratorsDidUpdateHandler: ((Bool) -> ())?
    func acceleratorsDidUpdate(available: Bool)  {
        acceleratorsDidUpdateCallCount += 1
    
        if let acceleratorsDidUpdateHandler = acceleratorsDidUpdateHandler {
            acceleratorsDidUpdateHandler(available)
        }
        
    }
    
    var updateDimmingCallCount = 0
    var updateDimmingHandler: ((CGFloat, Bool) -> ())?
    func updateDimming(to opacity: CGFloat, allowsInteraction: Bool)  {
        updateDimmingCallCount += 1
    
        if let updateDimmingHandler = updateDimmingHandler {
            updateDimmingHandler(opacity, allowsInteraction)
        }
        
    }
    
    var hideFeedCallCount = 0
    var hideFeedHandler: (((@escaping () -> ()) -> ()) -> ())?
    func hideFeed(andPerform actions: (@escaping () -> ()) -> ())  {
        hideFeedCallCount += 1
    
        if let hideFeedHandler = hideFeedHandler {
            hideFeedHandler(actions)
        }
        
    }
}

class ConfirmationPresentableMock: ConfirmationPresentable {

    

    init() {

    }
        
    var didTapDestinationEntryCallCount = 0
    var didTapDestinationEntryHandler: ((ConfirmationViewControllable) -> ())?
    func didTapDestinationEntry(confirmationViewController: ConfirmationViewControllable)  {
        didTapDestinationEntryCallCount += 1
    
        if let didTapDestinationEntryHandler = didTapDestinationEntryHandler {
            didTapDestinationEntryHandler(confirmationViewController)
        }
        
    }
    
    var didTapBackToUberHomeCallCount = 0
    var didTapBackToUberHomeHandler: (() -> ())?
    func didTapBackToUberHome()  {
        didTapBackToUberHomeCallCount += 1
    
        if let didTapBackToUberHomeHandler = didTapBackToUberHomeHandler {
            didTapBackToUberHomeHandler()
        }
        
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationPresenterListener? = nil
    var listener: ConfirmationPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showDestinationEntryCallCount = 0
    var showDestinationEntryHandler: (() -> ())?
    func showDestinationEntry()  {
        showDestinationEntryCallCount += 1
    
        if let showDestinationEntryHandler = showDestinationEntryHandler {
            showDestinationEntryHandler()
        }
        
    }
    
    var dismissDestinationEntryCallCount = 0
    var dismissDestinationEntryHandler: (() -> ())?
    func dismissDestinationEntry()  {
        dismissDestinationEntryCallCount += 1
    
        if let dismissDestinationEntryHandler = dismissDestinationEntryHandler {
            dismissDestinationEntryHandler()
        }
        
    }
    
    var showFirstTimeUserExperienceCallCount = 0
    var showFirstTimeUserExperienceHandler: ((Bool) -> ())?
    func showFirstTimeUserExperience(dismissOnCalloutTap: Bool)  {
        showFirstTimeUserExperienceCallCount += 1
    
        if let showFirstTimeUserExperienceHandler = showFirstTimeUserExperienceHandler {
            showFirstTimeUserExperienceHandler(dismissOnCalloutTap)
        }
        
    }
    
    var dismissFirstTimeUserExperienceCallCount = 0
    var dismissFirstTimeUserExperienceHandler: (() -> ())?
    func dismissFirstTimeUserExperience()  {
        dismissFirstTimeUserExperienceCallCount += 1
    
        if let dismissFirstTimeUserExperienceHandler = dismissFirstTimeUserExperienceHandler {
            dismissFirstTimeUserExperienceHandler()
        }
        
    }
    
    var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
    
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }
    
    var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
    
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }
    
    var updateRideContextEntryTypeCallCount = 0
    var updateRideContextEntryTypeHandler: ((RideContextEntryType) -> ())?
    func updateRideContextEntryType(_ type: RideContextEntryType)  {
        updateRideContextEntryTypeCallCount += 1
    
        if let updateRideContextEntryTypeHandler = updateRideContextEntryTypeHandler {
            updateRideContextEntryTypeHandler(type)
        }
        
    }
}

public class ProductSelectionTooltipContextProvidingMock: ProductSelectionTooltipContextProviding {

    

    public init() {

    }
        
    var selectedProductIdSetCallCount = 0
    var underlyingSelectedProductId: ProductId? = nil
    public var selectedProductId: ProductId? {
        get {
            return underlyingSelectedProductId
        }
        set {
            underlyingSelectedProductId = newValue
            selectedProductIdSetCallCount += 1
        }
    }
}

class RideViewControllableMock: RideViewControllable {

    

    init() {

    }
        
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var pushNavigationViewControllerWithViewControllerCallCount = 0
    var pushNavigationViewControllerWithViewControllerHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
    func pushNavigationViewControllerWithViewController(viewController: UIViewController, animated flag: Bool, completion: (() -> ())?)  {
        pushNavigationViewControllerWithViewControllerCallCount += 1
    
        if let pushNavigationViewControllerWithViewControllerHandler = pushNavigationViewControllerWithViewControllerHandler {
            pushNavigationViewControllerWithViewControllerHandler(viewController, flag, completion)
        }
        
    }
    
    var presentModalCallCount = 0
    var presentModalHandler: ((ViewControllable) -> ())?
    func presentModal(viewController: ViewControllable)  {
        presentModalCallCount += 1
    
        if let presentModalHandler = presentModalHandler {
            presentModalHandler(viewController)
        }
        
    }
    
    var dismissModalCallCount = 0
    var dismissModalHandler: ((Bool, (() -> ())?) -> ())?
    func dismissModal(animated: Bool, completion: (() -> ())?)  {
        dismissModalCallCount += 1
    
        if let dismissModalHandler = dismissModalHandler {
            dismissModalHandler(animated, completion)
        }
        
    }
}

class ProductBadgeNotificationManagingMock: ProductBadgeNotificationManaging {

    

    init() {

    }
        
    var setActiveCallCount = 0
    var setActiveHandler: ((Bool, ProductBadgeNotificationStateShowing) -> ())?
    func setActive(_ isActive: Bool, notificationShowing: ProductBadgeNotificationStateShowing)  {
        setActiveCallCount += 1
    
        if let setActiveHandler = setActiveHandler {
            setActiveHandler(isActive, notificationShowing)
        }
        
    }
}

class ConfirmationSlidableMock: ConfirmationSlidable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
}

class ProductSelectionObservabilityManagerViewListenerMock: ProductSelectionObservabilityManagerViewListener {

    
    init() {}
    init(currentState: ProductSelectionViewState) {
        self.currentState = currentState
    }
        
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ProductSelectionViewState! 
    var currentState: ProductSelectionViewState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
    
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: ((IndexPath) -> (ProductSelectionCellViewModel?))?
    func viewModelForCell(at indexPath: IndexPath) -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler(indexPath)
        }
        return nil
    }
    
    var productCellCallCount = 0
    var productCellHandler: ((IndexPath) -> (ProductCell?))?
    func productCell(at indexPath: IndexPath) -> ProductCell? {
        productCellCallCount += 1
    
        if let productCellHandler = productCellHandler {
            return productCellHandler(indexPath)
        }
        return nil
    }
}

class MenuBuilderFactoryMock: MenuBuilderFactory {

    

    init() {

    }
        
    var getMenuBuilderCallCount = 0
    var getMenuBuilderHandler: ((String?) -> (MenuBuildable))?
    func getMenuBuilder(_ landingUrl: String?) -> MenuBuildable {
        getMenuBuilderCallCount += 1
    
        if let getMenuBuilderHandler = getMenuBuilderHandler {
            return getMenuBuilderHandler(landingUrl)
        }
        return MenuBuildableMock()
    }
}

class MainBuilderFactoryMock: MainBuilderFactory {

    

    init() {

    }
        
    var getMainBuilderCallCount = 0
    var getMainBuilderHandler: ((Session) -> (MainBuildable))?
    func getMainBuilder(_ session: Session) -> MainBuildable {
        getMainBuilderCallCount += 1
    
        if let getMainBuilderHandler = getMainBuilderHandler {
            return getMainBuilderHandler(session)
        }
        return MainBuildableMock()
    }
}

class MenuBuildableMock: MenuBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (MenuRouting))?
    func build() -> MenuRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return MenuRoutingMock()
    }
}

class ConfirmationBuildableV2Mock: ConfirmationBuildableV2 {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((ConfirmationListenerV2) -> (ConfirmationRoutingV2))?
    func build(withListener listener: ConfirmationListenerV2) -> ConfirmationRoutingV2 {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ConfirmationRoutingV2Mock()
    }
}

class ProductSelectionPresentableListenerV2Mock: ProductSelectionPresentableListenerV2 {

    

    init() {

    }
        
    var currentlySelectedIdSetCallCount = 0
    var underlyingCurrentlySelectedId: ProductItemId? = nil
    var currentlySelectedId: ProductItemId? {
        get {
            return underlyingCurrentlySelectedId
        }
        set {
            underlyingCurrentlySelectedId = newValue
            currentlySelectedIdSetCallCount += 1
        }
    }
    
    var didSelectProductItemIdCallCount = 0
    var didSelectProductItemIdHandler: ((ProductItemId, ProductSelectionViewState) -> ())?
    func didSelectProductItemId(_ productItemId: ProductItemId, viewState: ProductSelectionViewState)  {
        didSelectProductItemIdCallCount += 1
    
        if let didSelectProductItemIdHandler = didSelectProductItemIdHandler {
            didSelectProductItemIdHandler(productItemId, viewState)
        }
        
    }
    
    var didUpdateRecommendedCompareTransitionProgressCallCount = 0
    var didUpdateRecommendedCompareTransitionProgressHandler: (() -> ())?
    func didUpdateRecommendedCompareTransitionProgress()  {
        didUpdateRecommendedCompareTransitionProgressCallCount += 1
    
        if let didUpdateRecommendedCompareTransitionProgressHandler = didUpdateRecommendedCompareTransitionProgressHandler {
            didUpdateRecommendedCompareTransitionProgressHandler()
        }
        
    }
    
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didSwitchToRecommendedViewStateCallCount = 0
    var didSwitchToRecommendedViewStateHandler: (() -> ())?
    func didSwitchToRecommendedViewState()  {
        didSwitchToRecommendedViewStateCallCount += 1
    
        if let didSwitchToRecommendedViewStateHandler = didSwitchToRecommendedViewStateHandler {
            didSwitchToRecommendedViewStateHandler()
        }
        
    }
    
    var didSwitchToCompareViewStateCallCount = 0
    var didSwitchToCompareViewStateHandler: (() -> ())?
    func didSwitchToCompareViewState()  {
        didSwitchToCompareViewStateCallCount += 1
    
        if let didSwitchToCompareViewStateHandler = didSwitchToCompareViewStateHandler {
            didSwitchToCompareViewStateHandler()
        }
        
    }
    
    var bindCallCount = 0
    var bindHandler: ((ProductCell, ProductCollectionViewCellDisplayable) -> ())?
    func bind(productCell: ProductCell, viewCell: ProductCollectionViewCellDisplayable)  {
        bindCallCount += 1
    
        if let bindHandler = bindHandler {
            bindHandler(productCell, viewCell)
        }
        
    }
    
    var unbindCallCount = 0
    var unbindHandler: ((ProductCell) -> ())?
    func unbind(productCell: ProductCell)  {
        unbindCallCount += 1
    
        if let unbindHandler = unbindHandler {
            unbindHandler(productCell)
        }
        
    }
}

class SelectedProductBuildableMock: SelectedProductBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((SelectedProductListener, ProductItemId?) -> (SelectedProductRouting))?
    func build(withListener listener: SelectedProductListener, productItemId: ProductItemId?) -> SelectedProductRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener, productItemId)
        }
        return SelectedProductRoutingMock()
    }
}

class ProductSelectionBuildableV2Mock: ProductSelectionBuildableV2 {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((ProductSelectionListenerV2) -> (ProductSelectionRoutingV2))?
    func build(withListener listener: ProductSelectionListenerV2) -> ProductSelectionRoutingV2 {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ProductSelectionRoutingV2Mock()
    }
}

class ProductSelectionBuildableMock: ProductSelectionBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ProductSelectionRouting))?
    func build() -> ProductSelectionRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ProductSelectionRoutingMock()
    }
}

class HomeBuildableMock: HomeBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (HomeRouting))?
    func build() -> HomeRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return HomeRoutingMock()
    }
}

class DestinationPromptViewListenerMock: DestinationPromptViewListener {

    

    init() {

    }
        
    var didTapLocationEditorEntryButtonCallCount = 0
    var didTapLocationEditorEntryButtonHandler: (() -> ())?
    func didTapLocationEditorEntryButton()  {
        didTapLocationEditorEntryButtonCallCount += 1
    
        if let didTapLocationEditorEntryButtonHandler = didTapLocationEditorEntryButtonHandler {
            didTapLocationEditorEntryButtonHandler()
        }
        
    }
}

class TripPresentableMock: TripPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: TripPresenterListener? = nil
    var listener: TripPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateTripTitleCallCount = 0
    var updateTripTitleHandler: ((String?) -> ())?
    func updateTripTitle(_ title: String?)  {
        updateTripTitleCallCount += 1
    
        if let updateTripTitleHandler = updateTripTitleHandler {
            updateTripTitleHandler(title)
        }
        
    }
    
    var showCancellationErrorAlertCallCount = 0
    var showCancellationErrorAlertHandler: ((String, String) -> ())?
    func showCancellationErrorAlert(title: String, message: String)  {
        showCancellationErrorAlertCallCount += 1
    
        if let showCancellationErrorAlertHandler = showCancellationErrorAlertHandler {
            showCancellationErrorAlertHandler(title, message)
        }
        
    }
    
    var expandFeedIfNeededCallCount = 0
    var expandFeedIfNeededHandler: (() -> ())?
    func expandFeedIfNeeded()  {
        expandFeedIfNeededCallCount += 1
    
        if let expandFeedIfNeededHandler = expandFeedIfNeededHandler {
            expandFeedIfNeededHandler()
        }
        
    }
    
    var collapseFeedCallCount = 0
    var collapseFeedHandler: (() -> ())?
    func collapseFeed()  {
        collapseFeedCallCount += 1
    
        if let collapseFeedHandler = collapseFeedHandler {
            collapseFeedHandler()
        }
        
    }
    
    var handleDispatchingMapReadyCallCount = 0
    var handleDispatchingMapReadyHandler: (() -> ())?
    func handleDispatchingMapReady()  {
        handleDispatchingMapReadyCallCount += 1
    
        if let handleDispatchingMapReadyHandler = handleDispatchingMapReadyHandler {
            handleDispatchingMapReadyHandler()
        }
        
    }
    
    var displayAlertCallCount = 0
    var displayAlertHandler: ((String?, String) -> ())?
    func displayAlert(title: String?, message: String)  {
        displayAlertCallCount += 1
    
        if let displayAlertHandler = displayAlertHandler {
            displayAlertHandler(title, message)
        }
        
    }
    
    var showMapAlertControllerCallCount = 0
    var showMapAlertControllerHandler: ((Bool, ModularMapAlertOptions, @escaping (_ backgroundViews: [UIView]) -> BaseAlertController) -> ())?
    func showMapAlertController(dismissPresentedViewController: Bool, options: ModularMapAlertOptions, alertControllerFactory: @escaping (_ backgroundViews: [UIView]) -> BaseAlertController)  {
        showMapAlertControllerCallCount += 1
    
        if let showMapAlertControllerHandler = showMapAlertControllerHandler {
            showMapAlertControllerHandler(dismissPresentedViewController, options, alertControllerFactory)
        }
        
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
    
    var dismissPresentedModalViewControllersCallCount = 0
    var dismissPresentedModalViewControllersHandler: (() -> ())?
    func dismissPresentedModalViewControllers()  {
        dismissPresentedModalViewControllersCallCount += 1
    
        if let dismissPresentedModalViewControllersHandler = dismissPresentedModalViewControllersHandler {
            dismissPresentedModalViewControllersHandler()
        }
        
    }
}

class AlertableConfirmationSlidableMock: AlertableConfirmationSlidable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
    
    var showAlertViewControllableCallCount = 0
    var showAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showAlertViewControllableCallCount += 1
    
        if let showAlertViewControllableHandler = showAlertViewControllableHandler {
            showAlertViewControllableHandler(alertViewControllable)
        }
        
    }
}

class ConfirmationBuildableMock: ConfirmationBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ConfirmationRouting))?
    func build() -> ConfirmationRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ConfirmationRoutingMock()
    }
}

class HomeBuildableV2Mock: HomeBuildableV2 {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (HomeRoutingV2))?
    func build() -> HomeRoutingV2 {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return HomeRoutingV2Mock()
    }
}

class ProductViewModelUpdatableMock: ProductViewModelUpdatable {

    

    init() {

    }
    
}

class TripInteractorListenerMock: TripInteractorListener {

    

    init() {

    }
        
    var pickupLocationUpdatedCallCount = 0
    var pickupLocationUpdatedHandler: ((CLLocationCoordinate2D, Date?) -> ())?
    func pickupLocationUpdated(locationCoordinate: CLLocationCoordinate2D, timestamp: Date?)  {
        pickupLocationUpdatedCallCount += 1
    
        if let pickupLocationUpdatedHandler = pickupLocationUpdatedHandler {
            pickupLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var cancelTripCallCount = 0
    var cancelTripHandler: (() -> ())?
    func cancelTrip()  {
        cancelTripCallCount += 1
    
        if let cancelTripHandler = cancelTripHandler {
            cancelTripHandler()
        }
        
    }
    
    var didTripStateReachOnTripCallCount = 0
    var didTripStateReachOnTripHandler: (() -> ())?
    func didTripStateReachOnTrip()  {
        didTripStateReachOnTripCallCount += 1
    
        if let didTripStateReachOnTripHandler = didTripStateReachOnTripHandler {
            didTripStateReachOnTripHandler()
        }
        
    }
    
    var completeTripIfNeededCallCount = 0
    var completeTripIfNeededHandler: ((RiderUuid, TripUuid) -> ())?
    func completeTripIfNeeded(riderUUID: RiderUuid, tripUUID: TripUuid)  {
        completeTripIfNeededCallCount += 1
    
        if let completeTripIfNeededHandler = completeTripIfNeededHandler {
            completeTripIfNeededHandler(riderUUID, tripUUID)
        }
        
    }
}

class DualLocationEditorEntryViewListenerMock: DualLocationEditorEntryViewListener {

    

    init() {

    }
        
    var didTapLocationEditorEntryButtonCallCount = 0
    var didTapLocationEditorEntryButtonHandler: ((LocationEditorEntryButtonType) -> ())?
    func didTapLocationEditorEntryButton(type: LocationEditorEntryButtonType)  {
        didTapLocationEditorEntryButtonCallCount += 1
    
        if let didTapLocationEditorEntryButtonHandler = didTapLocationEditorEntryButtonHandler {
            didTapLocationEditorEntryButtonHandler(type)
        }
        
    }
}

class RideBuildableMock: RideBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (RideRouting))?
    func build() -> RideRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RideRoutingMock()
    }
}

class TripBuildableMock: TripBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (TripRouting))?
    func build() -> TripRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return TripRoutingMock()
    }
}

class ModeBuildableMock: ModeBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((ModeListener) -> (ModeRouting))?
    func build(withListener listener: ModeListener) -> ModeRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ModeRoutingMock()
    }
}

class MenuViewListenerMock: MenuViewListener {

    

    init() {

    }
        
    var didTapMenuHeaderCallCount = 0
    var didTapMenuHeaderHandler: (() -> ())?
    func didTapMenuHeader()  {
        didTapMenuHeaderCallCount += 1
    
        if let didTapMenuHeaderHandler = didTapMenuHeaderHandler {
            didTapMenuHeaderHandler()
        }
        
    }
}

class MainBuildableMock: MainBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (MainRouting))?
    func build() -> MainRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return MainRoutingMock()
    }
}

class RequestBuildableMock: RequestBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (RequestRouting))?
    func build() -> RequestRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RequestRoutingMock()
    }
}

