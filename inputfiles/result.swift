///
/// @Generated by Mockolo
///



import ARKit
import AVFoundation
import AVKit
import AbstractClassFoundation
import Accelerators
import AdSupport
import AddressBook
import Adyen3DS2
import AlternativeTrip
import AppSharedProtocols
import AudioCore
import AudioNonCore
import AudioRecording
import AudioToolbox
import Audit
import AuditRider
import AugmentedReality
import AugmentedRealityRider
import Authentication
import AuthenticationRider
import Box
import BraintreePayPal
import BraintreeVenmo
import BugReporter
import BugReporterCore
import BugReporterExperience
import Camera
import CardIO
import CardScan
import ChatWidget
import CobrandCard
import CommunicationBanner
import Concurrency
import ContactPicker
import Contacts
import ContactsObjc
import ContactsUIObjc
import ContextualImagery
import ConversationalAiCore
import ConversationalAiGRPC
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMotion
import CoreNFC
import CoreServices
import CoreShared
import Credits
import CryptoObjc
import DashcamInformation
import DefaultStoreRegistry
import DeviceCheck
import DeviceInspection
import DeviceUtil
import DifferenceKit
import DirectedDispatch
import Dispatch
import Dispatching
import DriverOnboarding
import DriverOnboardingLegacyObjc
import DriverOnboardingWeb
import EMobility
import EMobilityRider
import EMobilityShared
import EaterOnboarding
import EatsTutorial
import EmergencyAssistance
import ExperimentOverrides
import Experimentation
import ExperimentsObjc
import FacebookZero
import Family
import Favorites
import FeatureHealth
import FeatureMonitor
import Feed
import FeedCards
import FlowFramework
import FormsDeprecatedObjc
import Foundation
import FraudLegacyObjc
import Freddy
import Gift
import GiveGet
import GuestRequest
import Healthline
import HelixUI
import Help
import HelpChat
import Home
import HubMessaging
import HubMessagingRider
import IdentityConfig
import Image
import Intercom
import KSCrash
import LearningTopic
import Legal
import LocalNotifications
import LocationEditor
import LocationEditorNonCore
import LocationObjc
import LocationServicesCore
import LocationServicesNonCore
import Lottie
import MXLCalendarManagerSwift
import MainWorker
import MapDisplayAPI
import MapKit
import MediaPlayer
import Menu
import MessageUI
import MobileStudio
import MobileStudioHelix
import MobileStudioSharedPlugins
import Mode
import ModeSwitcher
import MotionStash
import MultipleDestination
import NeedleFoundation
import NetworkOrchestratorObjc
import NetworkingObjc
import OSAtomicObjcWrappers
import Octopus
import Pass
import PassKit
import PayPalDataCollector
import PaymentFeature
import PaymentFoundation
import PaymentProviderApplePay
import PaymentProviderBankAccount
import PaymentProviderBraintree
import PaymentProviderCash
import PaymentProviderGiftCard
import PaymentProviderPaypalVZero
import PaymentProviderPaytm
import PaymentProviderStoredValue
import PaymentProviderVenmo
import PaymentProviderZaakpay
import PaymentRewardAmex
import PaymentRewardCommuterBenefits
import PaymentRewards
import PerformanceConfigObjc
import PerformanceMetricsObjc
import PerformanceSDKObjc
import PermissionManagerCamera
import PermissionManagerContacts
import PermissionManagerPhotoLibrary
import Permissions
import PhotoFlow
import PhotoFlowObjc
import Pickup
import PlaceCache
import PlaceCacheObjc
import PlatformUI
import PluginShared
import PlusOne
import Pool
import Premium
import Presidio
import PresidioFoundation
import PresidioMapsFoundation
import PresidioUtilities
import Pricing
import PricingRider
import Profile
import ProfileApp
import Promotion
import QRScanner
import QuartzCore
import RamenObjc
import Rating
import ReachabilityObjc
import Realtime
import RealtimeAudit
import RealtimeAuthentication
import RealtimeCommunicationBanner
import RealtimeConversationalAi
import RealtimeEMobility
import RealtimeHubMessaging
import RealtimeIntercom
import RealtimeLearning
import RealtimePayment
import RealtimePolaris
import RealtimePremium
import RealtimePresidio
import RealtimeProfile
import RealtimeReceipt
import RealtimeRewards
import RealtimeRider
import RealtimeRiderFavorites
import RealtimeSafety
import RealtimeScreenflow
import RealtimeServiceObjc
import RealtimeSocialProfiles
import RealtimeWallet
import ReceiptFeature
import RequestCore
import RequestNonCore
import Rewards
import RewardsRider
import RideAndSave
import RiderAnimation
import RiderContact
import RiderCredits
import RiderEducation
import RiderHelp
import RiderIdentityVerification
import RiderIntegration
import RiderMapKit
import RiderMaps
import RiderNetworking
import RiderPayment
import RiderRisk
import RiderWallet
import Risk
import RootWorkflow
import RxBlocking
import RxCocoa
import RxOptional
import RxSwift
import SafariServices
import Safety
import SafetyToolkitBase
import SceneKit
import ScheduledRides
import Screenflow
import ScreenflowSDK
import SelfDriving
import SessionManagerObjc
import SharedMaps
import SharedUI
import SingleSignOn
import SnapKit
import SocialAuth
import SocialProfiles
import SocialProfilesRider
import SocialProfilesUIObjc
import StateManagement
import Storage
import StoreKit
import Survey
import Swift
import SwiftProtobuf
import TensorFlowWrapper
import ThemesHelix
import Tokenizer
import TokenizerCoreObjc
import TrainingWheels
import TransactionHistory
import Transit
import TripDetailsCards
import TripFareRow
import TripInstructions
import TripModal
import TripShare
import TripStatusTracker
import TripTime
import UIKit
import USnap
import UberAir
import UberPreferences
import Ultrasound
import UltrasoundHelix
import UnifiedReportingObjc
import UpdateMobile
import Upgrade
import UserAccount
import UserAccount //
import UserIdentityFlow
import UserNotifications
import UtilitiesLegacyObjc
import Venue
import VisaRewards
import VoIP
import Wallet
import Web
import WebKit
import WebLoginUIObjc
import class PresidioFoundation.DispatchQueue
import os.signpost


class MutableSelectedProductLeadingButtonStreamingMock: MutableSelectedProductLeadingButtonStreaming {

    
    init() {}
    init(leadingButtonTappedStream: Observable<()> = PublishSubject()) {
        self.leadingButtonTappedStream = leadingButtonTappedStream
    }
        
    var leadingButtonTappedCallCount = 0
    var leadingButtonTappedHandler: (() -> ())?
    func leadingButtonTapped()  {
        leadingButtonTappedCallCount += 1
    
        if let leadingButtonTappedHandler = leadingButtonTappedHandler {
            leadingButtonTappedHandler()
        }
        
    }
    
    private var leadingButtonTappedStreamSubjectKind = 0
    var leadingButtonTappedStreamSubjectSetCallCount = 0
    var leadingButtonTappedStreamSubject = PublishSubject<()>() { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamBehaviorSubject: BehaviorSubject<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamRxSubject: Observable<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    public var leadingButtonTappedStream: Observable<()> {
        get {
            if leadingButtonTappedStreamSubjectKind == 0 {
                return leadingButtonTappedStreamSubject
            } else if leadingButtonTappedStreamSubjectKind == 1 {
                return leadingButtonTappedStreamBehaviorSubject
            } else if leadingButtonTappedStreamSubjectKind == 2 {
                return leadingButtonTappedStreamReplaySubject
            } else {
                return leadingButtonTappedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                leadingButtonTappedStreamSubject = val
                leadingButtonTappedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                leadingButtonTappedStreamBehaviorSubject = val
                leadingButtonTappedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                leadingButtonTappedStreamReplaySubject = val
                leadingButtonTappedStreamSubjectKind = 2
            } else {
                leadingButtonTappedStreamRxSubject = newValue
                leadingButtonTappedStreamSubjectKind = 3
            }
        }
    }
}

class ConfirmationAlertInteractableMock: ConfirmationAlertInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ConfirmationAlertRouting? = nil
    var router: ConfirmationAlertRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class OutOfCoverageInteractableMock: OutOfCoverageInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: OutOfCoverageRouting? = nil
    var router: OutOfCoverageRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class BaseRequestErrorHandlerViewControllableMock: BaseRequestErrorHandlerViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: BaseRequestErrorHandlerViewControllerListener? = nil
    var listener: BaseRequestErrorHandlerViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class MutableProductSelectionStateStreamingMock: MutableProductSelectionStateStreaming {

    
    init() {}
    init(currentState: ProductSelectionState, productSelectionState: Observable<ProductSelectionState> = PublishSubject()) {
        self.currentState = currentState
        self.productSelectionState = productSelectionState
    }
        
    var updateCallCount = 0
    var updateHandler: ((ProductSelectionState) -> ())?
    func update(productSelectionState: ProductSelectionState)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(productSelectionState)
        }
        
    }
    
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ProductSelectionState! 
    var currentState: ProductSelectionState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
private var productSelectionStateSubjectKind = 0
var productSelectionStateSubjectSetCallCount = 0
var productSelectionStateSubject = PublishSubject<ProductSelectionState>() { didSet { productSelectionStateSubjectSetCallCount += 1 } }
var productSelectionStateReplaySubject = ReplaySubject<ProductSelectionState>.create(bufferSize: 1) { didSet { productSelectionStateSubjectSetCallCount += 1 } }
var productSelectionStateBehaviorSubject: BehaviorSubject<ProductSelectionState>! { didSet { productSelectionStateSubjectSetCallCount += 1 } }
var productSelectionStateRxSubject: Observable<ProductSelectionState>! { didSet { productSelectionStateSubjectSetCallCount += 1 } }
public var productSelectionState: Observable<ProductSelectionState> {
        get {
            if productSelectionStateSubjectKind == 0 {
                return productSelectionStateSubject
            } else if productSelectionStateSubjectKind == 1 {
                return productSelectionStateBehaviorSubject
            } else if productSelectionStateSubjectKind == 2 {
                return productSelectionStateReplaySubject
            } else {
                return productSelectionStateRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelectionState> {
                productSelectionStateSubject = val
                productSelectionStateSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelectionState> {
                productSelectionStateBehaviorSubject = val
                productSelectionStateSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelectionState> {
                productSelectionStateReplaySubject = val
                productSelectionStateSubjectKind = 2
            } else {
                productSelectionStateRxSubject = newValue
                productSelectionStateSubjectKind = 3
            }
        }
    }
}

class ProductSelectionInteractableMock: ProductSelectionInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ProductSelectionRouting? = nil
    var router: ProductSelectionRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var productSelectionListenerSetCallCount = 0
    var underlyingProductSelectionListener: ProductSelectionListener? = nil
    var productSelectionListener: ProductSelectionListener? {
        get {
            return underlyingProductSelectionListener
        }
        set {
            underlyingProductSelectionListener = newValue
            productSelectionListenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

public class MutableNoGPSExperienceCanShowCenterMeStreamingMock: MutableNoGPSExperienceCanShowCenterMeStreaming {

    
    public init() {}
    public init(canShow: Observable<Bool> = PublishSubject()) {
        self.canShow = canShow
    }
        
    var updateCallCount = 0
    public var updateHandler: ((Bool) -> ())?
    public func update(canShow: Bool)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(canShow)
        }
        
    }
private var canShowSubjectKind = 0
var canShowSubjectSetCallCount = 0
var canShowSubject = PublishSubject<Bool>() { didSet { canShowSubjectSetCallCount += 1 } }
var canShowReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { canShowSubjectSetCallCount += 1 } }
var canShowBehaviorSubject: BehaviorSubject<Bool>! { didSet { canShowSubjectSetCallCount += 1 } }
var canShowRxSubject: Observable<Bool>! { didSet { canShowSubjectSetCallCount += 1 } }
public var canShow: Observable<Bool> {
        get {
            if canShowSubjectKind == 0 {
                return canShowSubject
            } else if canShowSubjectKind == 1 {
                return canShowBehaviorSubject
            } else if canShowSubjectKind == 2 {
                return canShowReplaySubject
            } else {
                return canShowRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                canShowSubject = val
                canShowSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                canShowBehaviorSubject = val
                canShowSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                canShowReplaySubject = val
                canShowSubjectKind = 2
            } else {
                canShowRxSubject = newValue
                canShowSubjectKind = 3
            }
        }
    }
}

public class MutableRideContextStreamingMock: MutableRideContextStreaming {

    
    public init() {}
    public init(context: Observable<RideContext> = PublishSubject()) {
        self.context = context
    }
        
    var updateCallCount = 0
    public var updateHandler: ((RideContext) -> ())?
    public func update(context: RideContext)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(context)
        }
        
    }
    
    private var contextSubjectKind = 0
    var contextSubjectSetCallCount = 0
    var contextSubject = PublishSubject<RideContext>() { didSet { contextSubjectSetCallCount += 1 } }
    var contextReplaySubject = ReplaySubject<RideContext>.create(bufferSize: 1) { didSet { contextSubjectSetCallCount += 1 } }
    var contextBehaviorSubject: BehaviorSubject<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    var contextRxSubject: Observable<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    public var context: Observable<RideContext> {
        get {
            if contextSubjectKind == 0 {
                return contextSubject
            } else if contextSubjectKind == 1 {
                return contextBehaviorSubject
            } else if contextSubjectKind == 2 {
                return contextReplaySubject
            } else {
                return contextRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RideContext> {
                contextSubject = val
                contextSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RideContext> {
                contextBehaviorSubject = val
                contextSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RideContext> {
                contextReplaySubject = val
                contextSubjectKind = 2
            } else {
                contextRxSubject = newValue
                contextSubjectKind = 3
            }
        }
    }
}

public class SelectedProductPackageStreamingMock: SelectedProductPackageStreaming {

    
    public init() {}
    public init(selectedProductPackage: Observable<ProductPackage> = PublishSubject()) {
        self.selectedProductPackage = selectedProductPackage
    }
        
    private var selectedProductPackageSubjectKind = 0
    var selectedProductPackageSubjectSetCallCount = 0
    var selectedProductPackageSubject = PublishSubject<ProductPackage>() { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageReplaySubject = ReplaySubject<ProductPackage>.create(bufferSize: 1) { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageBehaviorSubject: BehaviorSubject<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageRxSubject: Observable<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    public var selectedProductPackage: Observable<ProductPackage> {
        get {
            if selectedProductPackageSubjectKind == 0 {
                return selectedProductPackageSubject
            } else if selectedProductPackageSubjectKind == 1 {
                return selectedProductPackageBehaviorSubject
            } else if selectedProductPackageSubjectKind == 2 {
                return selectedProductPackageReplaySubject
            } else {
                return selectedProductPackageRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductPackage> {
                selectedProductPackageSubject = val
                selectedProductPackageSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductPackage> {
                selectedProductPackageBehaviorSubject = val
                selectedProductPackageSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductPackage> {
                selectedProductPackageReplaySubject = val
                selectedProductPackageSubjectKind = 2
            } else {
                selectedProductPackageRxSubject = newValue
                selectedProductPackageSubjectKind = 3
            }
        }
    }
}

class MutableCardCollectionViewStreamingMock: MutableCardCollectionViewStreaming {

    
    init() {}
    init(percentExpanded: Observable<CGFloat> = PublishSubject(), cardsAreVisibleInBottomNonSafeArea: Observable<Bool> = PublishSubject(), didScroll: Observable<()> = PublishSubject()) {
        self.percentExpanded = percentExpanded
        self.cardsAreVisibleInBottomNonSafeArea = cardsAreVisibleInBottomNonSafeArea
        self.didScroll = didScroll
    }
        
    var updateCallCount = 0
    var updateHandler: ((CGFloat) -> ())?
    func update(percentExpanded: CGFloat)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(percentExpanded)
        }
        
    }
    
    var updateCardsAreVisibleInBottomNonSafeAreaCallCount = 0
    var updateCardsAreVisibleInBottomNonSafeAreaHandler: ((Bool) -> ())?
    func update(cardsAreVisibleInBottomNonSafeArea: Bool)  {
        updateCardsAreVisibleInBottomNonSafeAreaCallCount += 1
    
        if let updateCardsAreVisibleInBottomNonSafeAreaHandler = updateCardsAreVisibleInBottomNonSafeAreaHandler {
            updateCardsAreVisibleInBottomNonSafeAreaHandler(cardsAreVisibleInBottomNonSafeArea)
        }
        
    }
    
    var updateDidScrollCallCount = 0
    var updateDidScrollHandler: (() -> ())?
    func updateDidScroll()  {
        updateDidScrollCallCount += 1
    
        if let updateDidScrollHandler = updateDidScrollHandler {
            updateDidScrollHandler()
        }
        
    }
private var percentExpandedSubjectKind = 0
var percentExpandedSubjectSetCallCount = 0
var percentExpandedSubject = PublishSubject<CGFloat>() { didSet { percentExpandedSubjectSetCallCount += 1 } }
var percentExpandedReplaySubject = ReplaySubject<CGFloat>.create(bufferSize: 1) { didSet { percentExpandedSubjectSetCallCount += 1 } }
var percentExpandedBehaviorSubject: BehaviorSubject<CGFloat>! { didSet { percentExpandedSubjectSetCallCount += 1 } }
var percentExpandedRxSubject: Observable<CGFloat>! { didSet { percentExpandedSubjectSetCallCount += 1 } }
public var percentExpanded: Observable<CGFloat> {
        get {
            if percentExpandedSubjectKind == 0 {
                return percentExpandedSubject
            } else if percentExpandedSubjectKind == 1 {
                return percentExpandedBehaviorSubject
            } else if percentExpandedSubjectKind == 2 {
                return percentExpandedReplaySubject
            } else {
                return percentExpandedRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<CGFloat> {
                percentExpandedSubject = val
                percentExpandedSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<CGFloat> {
                percentExpandedBehaviorSubject = val
                percentExpandedSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<CGFloat> {
                percentExpandedReplaySubject = val
                percentExpandedSubjectKind = 2
            } else {
                percentExpandedRxSubject = newValue
                percentExpandedSubjectKind = 3
            }
        }
    }
private var cardsAreVisibleInBottomNonSafeAreaSubjectKind = 0
var cardsAreVisibleInBottomNonSafeAreaSubjectSetCallCount = 0
var cardsAreVisibleInBottomNonSafeAreaSubject = PublishSubject<Bool>() { didSet { cardsAreVisibleInBottomNonSafeAreaSubjectSetCallCount += 1 } }
var cardsAreVisibleInBottomNonSafeAreaReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { cardsAreVisibleInBottomNonSafeAreaSubjectSetCallCount += 1 } }
var cardsAreVisibleInBottomNonSafeAreaBehaviorSubject: BehaviorSubject<Bool>! { didSet { cardsAreVisibleInBottomNonSafeAreaSubjectSetCallCount += 1 } }
var cardsAreVisibleInBottomNonSafeAreaRxSubject: Observable<Bool>! { didSet { cardsAreVisibleInBottomNonSafeAreaSubjectSetCallCount += 1 } }
public var cardsAreVisibleInBottomNonSafeArea: Observable<Bool> {
        get {
            if cardsAreVisibleInBottomNonSafeAreaSubjectKind == 0 {
                return cardsAreVisibleInBottomNonSafeAreaSubject
            } else if cardsAreVisibleInBottomNonSafeAreaSubjectKind == 1 {
                return cardsAreVisibleInBottomNonSafeAreaBehaviorSubject
            } else if cardsAreVisibleInBottomNonSafeAreaSubjectKind == 2 {
                return cardsAreVisibleInBottomNonSafeAreaReplaySubject
            } else {
                return cardsAreVisibleInBottomNonSafeAreaRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                cardsAreVisibleInBottomNonSafeAreaSubject = val
                cardsAreVisibleInBottomNonSafeAreaSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                cardsAreVisibleInBottomNonSafeAreaBehaviorSubject = val
                cardsAreVisibleInBottomNonSafeAreaSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                cardsAreVisibleInBottomNonSafeAreaReplaySubject = val
                cardsAreVisibleInBottomNonSafeAreaSubjectKind = 2
            } else {
                cardsAreVisibleInBottomNonSafeAreaRxSubject = newValue
                cardsAreVisibleInBottomNonSafeAreaSubjectKind = 3
            }
        }
    }
private var didScrollSubjectKind = 0
var didScrollSubjectSetCallCount = 0
var didScrollSubject = PublishSubject<()>() { didSet { didScrollSubjectSetCallCount += 1 } }
var didScrollReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { didScrollSubjectSetCallCount += 1 } }
var didScrollBehaviorSubject: BehaviorSubject<()>! { didSet { didScrollSubjectSetCallCount += 1 } }
var didScrollRxSubject: Observable<()>! { didSet { didScrollSubjectSetCallCount += 1 } }
public var didScroll: Observable<()> {
        get {
            if didScrollSubjectKind == 0 {
                return didScrollSubject
            } else if didScrollSubjectKind == 1 {
                return didScrollBehaviorSubject
            } else if didScrollSubjectKind == 2 {
                return didScrollReplaySubject
            } else {
                return didScrollRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                didScrollSubject = val
                didScrollSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                didScrollBehaviorSubject = val
                didScrollSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                didScrollReplaySubject = val
                didScrollSubjectKind = 2
            } else {
                didScrollRxSubject = newValue
                didScrollSubjectKind = 3
            }
        }
    }
}

class SelectedProductConfigurationInteractableMock: SelectedProductConfigurationInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: SelectedProductConfigurationRouting? = nil
    var router: SelectedProductConfigurationRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductConfigurationListener? = nil
    var listener: SelectedProductConfigurationListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var rowDidChangeCallCount = 0
public var rowDidChangeHandler: ((ProductConfigurationRowData, ProductConfigurationRowChangeEvent) -> ())?
public func rowDidChange(rowData: ProductConfigurationRowData, event: ProductConfigurationRowChangeEvent)  {
        rowDidChangeCallCount += 1
    
        if let rowDidChangeHandler = rowDidChangeHandler {
            rowDidChangeHandler(rowData, event)
        }
        
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var attachConfigurationChildCallCount = 0
public var attachConfigurationChildHandler: ((ViewableRouting) -> ())?
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func attachConfigurationChild(router: ViewableRouting)  {
        attachConfigurationChildCallCount += 1
    
        if let attachConfigurationChildHandler = attachConfigurationChildHandler {
            attachConfigurationChildHandler(router)
        }
        
    }
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var detachConfigurationChildCallCount = 0
public var detachConfigurationChildHandler: (() -> ())?
public func detachConfigurationChild()  {
        detachConfigurationChildCallCount += 1
    
        if let detachConfigurationChildHandler = detachConfigurationChildHandler {
            detachConfigurationChildHandler()
        }
        
    }
}

class OutOfCoverageRoutingMock: OutOfCoverageRouting {

    
    init() {}
    init(viewController: OutOfCoverageViewControllable = OutOfCoverageViewControllableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.viewController = viewController
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var viewControllerSetCallCount = 0
    var underlyingViewController: OutOfCoverageViewControllable = OutOfCoverageViewControllableMock()
    var viewController: OutOfCoverageViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ProductSelectionInteractableV2Mock: ProductSelectionInteractableV2 {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ProductSelectionRoutingV2? = nil
    var router: ProductSelectionRoutingV2? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionListenerV2? = nil
    var listener: ProductSelectionListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class RouteableModeHandlerStreamingMock: RouteableModeHandlerStreaming {

    

    init() {

    }
        
    private var routeableModeHandlerSubjectKind = 0
    var routeableModeHandlerSubjectSetCallCount = 0
    var routeableModeHandlerSubject = PublishSubject<RouteableModeHandling>() { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandlerReplaySubject = ReplaySubject<RouteableModeHandling>.create(bufferSize: 1) { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandlerBehaviorSubject: BehaviorSubject<RouteableModeHandling>! { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandlerRxSubject: Observable<RouteableModeHandling>! { didSet { routeableModeHandlerSubjectSetCallCount += 1 } }
    var routeableModeHandler: Observable<RouteableModeHandling> {
        get {
            if routeableModeHandlerSubjectKind == 0 {
                return routeableModeHandlerSubject
            } else if routeableModeHandlerSubjectKind == 1 {
                return routeableModeHandlerBehaviorSubject
            } else if routeableModeHandlerSubjectKind == 2 {
                return routeableModeHandlerReplaySubject
            } else {
                return routeableModeHandlerRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouteableModeHandling> {
                routeableModeHandlerSubject = val
                routeableModeHandlerSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouteableModeHandling> {
                routeableModeHandlerBehaviorSubject = val
                routeableModeHandlerSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouteableModeHandling> {
                routeableModeHandlerReplaySubject = val
                routeableModeHandlerSubjectKind = 2
            } else {
                routeableModeHandlerRxSubject = newValue
                routeableModeHandlerSubjectKind = 3
            }
        }
    }
}

class MutableConfirmationStateStreamingMock: MutableConfirmationStateStreaming {

    
    init() {}
    init(currentState: ConfirmationState, confirmationState: Observable<ConfirmationState> = PublishSubject()) {
        self.currentState = currentState
        self.confirmationState = confirmationState
    }
        
    var updateCallCount = 0
    var updateHandler: ((ConfirmationState) -> ())?
    func update(confirmationState: ConfirmationState)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(confirmationState)
        }
        
    }
    
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ConfirmationState! 
    var currentState: ConfirmationState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
private var confirmationStateSubjectKind = 0
var confirmationStateSubjectSetCallCount = 0
var confirmationStateSubject = PublishSubject<ConfirmationState>() { didSet { confirmationStateSubjectSetCallCount += 1 } }
var confirmationStateReplaySubject = ReplaySubject<ConfirmationState>.create(bufferSize: 1) { didSet { confirmationStateSubjectSetCallCount += 1 } }
var confirmationStateBehaviorSubject: BehaviorSubject<ConfirmationState>! { didSet { confirmationStateSubjectSetCallCount += 1 } }
var confirmationStateRxSubject: Observable<ConfirmationState>! { didSet { confirmationStateSubjectSetCallCount += 1 } }
public var confirmationState: Observable<ConfirmationState> {
        get {
            if confirmationStateSubjectKind == 0 {
                return confirmationStateSubject
            } else if confirmationStateSubjectKind == 1 {
                return confirmationStateBehaviorSubject
            } else if confirmationStateSubjectKind == 2 {
                return confirmationStateReplaySubject
            } else {
                return confirmationStateRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ConfirmationState> {
                confirmationStateSubject = val
                confirmationStateSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ConfirmationState> {
                confirmationStateBehaviorSubject = val
                confirmationStateSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ConfirmationState> {
                confirmationStateReplaySubject = val
                confirmationStateSubjectKind = 2
            } else {
                confirmationStateRxSubject = newValue
                confirmationStateSubjectKind = 3
            }
        }
    }
}

class ModeInteractableMock: ModeInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ModeRouting? = nil
    var router: ModeRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ModeListener? = nil
    var listener: ModeListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var willAttachCallCount = 0
public var willAttachHandler: ((Routing) -> ())?
public func willAttach(router: Routing)  {
        willAttachCallCount += 1
    
        if let willAttachHandler = willAttachHandler {
            willAttachHandler(router)
        }
        
    }
var didAttachCallCount = 0
public var didAttachHandler: ((Routing) -> ())?
public func didAttach(router: Routing)  {
        didAttachCallCount += 1
    
        if let didAttachHandler = didAttachHandler {
            didAttachHandler(router)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var showModeNavigationCallCount = 0
public var showModeNavigationHandler: (() -> ())?
public func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
var hideModeNavigationCallCount = 0
public var hideModeNavigationHandler: (() -> ())?
public func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
var didInitiateMenuOpenCallCount = 0
public var didInitiateMenuOpenHandler: (() -> ())?
public func didInitiateMenuOpen()  {
        didInitiateMenuOpenCallCount += 1
    
        if let didInitiateMenuOpenHandler = didInitiateMenuOpenHandler {
            didInitiateMenuOpenHandler()
        }
        
    }
var didInitiateMenuItemCloseCallCount = 0
public var didInitiateMenuItemCloseHandler: (() -> ())?
public func didInitiateMenuItemClose()  {
        didInitiateMenuItemCloseCallCount += 1
    
        if let didInitiateMenuItemCloseHandler = didInitiateMenuItemCloseHandler {
            didInitiateMenuItemCloseHandler()
        }
        
    }
}

public class MutableConfirmationNextStepStreamingMock: MutableConfirmationNextStepStreaming {

    
    public init() {}
    public init(nextStep: Observable<ConfirmationNextStep> = PublishSubject()) {
        self.nextStep = nextStep
    }
        
    var updateCallCount = 0
    public var updateHandler: ((ConfirmationNextStep) -> ())?
    public func update(nextStep: ConfirmationNextStep)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(nextStep)
        }
        
    }
private var nextStepSubjectKind = 0
var nextStepSubjectSetCallCount = 0
var nextStepSubject = PublishSubject<ConfirmationNextStep>() { didSet { nextStepSubjectSetCallCount += 1 } }
var nextStepReplaySubject = ReplaySubject<ConfirmationNextStep>.create(bufferSize: 1) { didSet { nextStepSubjectSetCallCount += 1 } }
var nextStepBehaviorSubject: BehaviorSubject<ConfirmationNextStep>! { didSet { nextStepSubjectSetCallCount += 1 } }
var nextStepRxSubject: Observable<ConfirmationNextStep>! { didSet { nextStepSubjectSetCallCount += 1 } }
public var nextStep: Observable<ConfirmationNextStep> {
        get {
            if nextStepSubjectKind == 0 {
                return nextStepSubject
            } else if nextStepSubjectKind == 1 {
                return nextStepBehaviorSubject
            } else if nextStepSubjectKind == 2 {
                return nextStepReplaySubject
            } else {
                return nextStepRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ConfirmationNextStep> {
                nextStepSubject = val
                nextStepSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ConfirmationNextStep> {
                nextStepBehaviorSubject = val
                nextStepSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ConfirmationNextStep> {
                nextStepReplaySubject = val
                nextStepSubjectKind = 2
            } else {
                nextStepRxSubject = newValue
                nextStepSubjectKind = 3
            }
        }
    }
}

class BaseRequestErrorHandlerInteractableMock: BaseRequestErrorHandlerInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: RequestErrorHandlerRouting? = nil
    var router: RequestErrorHandlerRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
var requestErrorHandlerListenerSetCallCount = 0
var underlyingRequestErrorHandlerListener: RequestErrorHandlerListener? = nil
public var requestErrorHandlerListener: RequestErrorHandlerListener? {
        get {
            return underlyingRequestErrorHandlerListener
        }
        set {
            underlyingRequestErrorHandlerListener = newValue
            requestErrorHandlerListenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class MenuCellBadgingMock: MenuCellBadging {

    
    init() {}
    init(shouldBadge: Bool = false, badgeView: ThemeableDotBadge) {
        self.shouldBadge = shouldBadge
        self.badgeView = badgeView
    }
        
    var shouldBadgeSetCallCount = 0
    var underlyingShouldBadge: Bool = false
    var shouldBadge: Bool {
        get {
            return underlyingShouldBadge
        }
        set {
            underlyingShouldBadge = newValue
            shouldBadgeSetCallCount += 1
        }
    }
    
    var badgeViewSetCallCount = 0
    var underlyingBadgeView: ThemeableDotBadge! 
    var badgeView: ThemeableDotBadge {
        get {
            return underlyingBadgeView
        }
        set {
            underlyingBadgeView = newValue
            badgeViewSetCallCount += 1
        }
    }
var registerCustomEventCallCount = 0
public var registerCustomEventHandler: ((AnalyticsID, AnalyticsMetadata?) -> ())?
public func registerCustomEvent(_ name: AnalyticsID, value: AnalyticsMetadata?)  {
        registerCustomEventCallCount += 1
    
        if let registerCustomEventHandler = registerCustomEventHandler {
            registerCustomEventHandler(name, value)
        }
        
    }
var registerEventCallCount = 0
public var registerEventHandler: ((AnalyticsID, EventType, AnalyticsMetadata?) -> ())?
public func registerEvent(_ name: AnalyticsID, type: EventType, value: AnalyticsMetadata?)  {
        registerEventCallCount += 1
    
        if let registerEventHandler = registerEventHandler {
            registerEventHandler(name, type, value)
        }
        
    }
}

class DestinationPromptInteractableMock: DestinationPromptInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: DestinationPromptRouting? = nil
    var router: DestinationPromptRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: LocationEditorEntryListener? = nil
    var listener: LocationEditorEntryListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var wantDestinationCallCount = 0
public var wantDestinationHandler: (() -> ())?
public func wantDestination()  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler()
        }
        
    }
var waitForScheduledRidesCallCount = 0
public var waitForScheduledRidesHandler: (() -> (Observable<(ScheduledRidesDestinationEntryAccessoryActionableItem, ())>))?
public func waitForScheduledRides() -> Observable<(ScheduledRidesDestinationEntryAccessoryActionableItem, ())> {
        waitForScheduledRidesCallCount += 1
    
        if let waitForScheduledRidesHandler = waitForScheduledRidesHandler {
            return waitForScheduledRidesHandler()
        }
        return Observable.empty()
    }
}

class DualLocationEditorEntryInteractableMock: DualLocationEditorEntryInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: DualLocationEditorEntryRouting? = nil
    var router: DualLocationEditorEntryRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: LocationEditorEntryListener? = nil
    var listener: LocationEditorEntryListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var wantDestinationCallCount = 0
public var wantDestinationHandler: (() -> ())?
public func wantDestination()  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler()
        }
        
    }
var waitForScheduledRidesCallCount = 0
public var waitForScheduledRidesHandler: (() -> (Observable<(ScheduledRidesDestinationEntryAccessoryActionableItem, ())>))?
public func waitForScheduledRides() -> Observable<(ScheduledRidesDestinationEntryAccessoryActionableItem, ())> {
        waitForScheduledRidesCallCount += 1
    
        if let waitForScheduledRidesHandler = waitForScheduledRidesHandler {
            return waitForScheduledRidesHandler()
        }
        return Observable.empty()
    }
}

class RequestFilterProductExclusionWorkingMock: RequestFilterProductExclusionWorking {

    
    init() {}
    init(vehicleViewUUIDsExcludedFromFiltering: Observable<[String]> = PublishSubject(), isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.vehicleViewUUIDsExcludedFromFiltering = vehicleViewUUIDsExcludedFromFiltering
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
        
    var setVehicleViewUUIDsExcludedFromFilteringCallCount = 0
    var setVehicleViewUUIDsExcludedFromFilteringHandler: (([String]) -> ())?
    func setVehicleViewUUIDsExcludedFromFiltering(_ vehicleViewUUIDs: [String])  {
        setVehicleViewUUIDsExcludedFromFilteringCallCount += 1
    
        if let setVehicleViewUUIDsExcludedFromFilteringHandler = setVehicleViewUUIDsExcludedFromFilteringHandler {
            setVehicleViewUUIDsExcludedFromFilteringHandler(vehicleViewUUIDs)
        }
        
    }
private var vehicleViewUUIDsExcludedFromFilteringSubjectKind = 0
var vehicleViewUUIDsExcludedFromFilteringSubjectSetCallCount = 0
var vehicleViewUUIDsExcludedFromFilteringSubject = PublishSubject<[String]>() { didSet { vehicleViewUUIDsExcludedFromFilteringSubjectSetCallCount += 1 } }
var vehicleViewUUIDsExcludedFromFilteringReplaySubject = ReplaySubject<[String]>.create(bufferSize: 1) { didSet { vehicleViewUUIDsExcludedFromFilteringSubjectSetCallCount += 1 } }
var vehicleViewUUIDsExcludedFromFilteringBehaviorSubject: BehaviorSubject<[String]>! { didSet { vehicleViewUUIDsExcludedFromFilteringSubjectSetCallCount += 1 } }
var vehicleViewUUIDsExcludedFromFilteringRxSubject: Observable<[String]>! { didSet { vehicleViewUUIDsExcludedFromFilteringSubjectSetCallCount += 1 } }
public var vehicleViewUUIDsExcludedFromFiltering: Observable<[String]> {
        get {
            if vehicleViewUUIDsExcludedFromFilteringSubjectKind == 0 {
                return vehicleViewUUIDsExcludedFromFilteringSubject
            } else if vehicleViewUUIDsExcludedFromFilteringSubjectKind == 1 {
                return vehicleViewUUIDsExcludedFromFilteringBehaviorSubject
            } else if vehicleViewUUIDsExcludedFromFilteringSubjectKind == 2 {
                return vehicleViewUUIDsExcludedFromFilteringReplaySubject
            } else {
                return vehicleViewUUIDsExcludedFromFilteringRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[String]> {
                vehicleViewUUIDsExcludedFromFilteringSubject = val
                vehicleViewUUIDsExcludedFromFilteringSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[String]> {
                vehicleViewUUIDsExcludedFromFilteringBehaviorSubject = val
                vehicleViewUUIDsExcludedFromFilteringSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[String]> {
                vehicleViewUUIDsExcludedFromFilteringReplaySubject = val
                vehicleViewUUIDsExcludedFromFilteringSubjectKind = 2
            } else {
                vehicleViewUUIDsExcludedFromFilteringRxSubject = newValue
                vehicleViewUUIDsExcludedFromFilteringSubjectKind = 3
            }
        }
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
}

class SelectedProductInteractableMock: SelectedProductInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: SelectedProductRouting? = nil
    var router: SelectedProductRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductListener? = nil
    var listener: SelectedProductListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var productItemIdSetCallCount = 0
    var underlyingProductItemId: ProductItemId? = nil
    var productItemId: ProductItemId? {
        get {
            return underlyingProductItemId
        }
        set {
            underlyingProductItemId = newValue
            productItemIdSetCallCount += 1
        }
    }
    
    var productConfigurationDidUpdateCallCount = 0
    var productConfigurationDidUpdateHandler: ((CoreShared.Product) -> ())?
    func productConfigurationDidUpdate(product: CoreShared.Product)  {
        productConfigurationDidUpdateCallCount += 1
    
        if let productConfigurationDidUpdateHandler = productConfigurationDidUpdateHandler {
            productConfigurationDidUpdateHandler(product)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class TripDetailsInteractableMock: TripDetailsInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: TripDetailsRouting? = nil
    var router: TripDetailsRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: TripDetailsListener? = nil
    var listener: TripDetailsListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var cancelTripButtonTappedCallCount = 0
public var cancelTripButtonTappedHandler: (() -> ())?
public func cancelTripButtonTapped()  {
        cancelTripButtonTappedCallCount += 1
    
        if let cancelTripButtonTappedHandler = cancelTripButtonTappedHandler {
            cancelTripButtonTappedHandler()
        }
        
    }
var cancelTripWithoutConfirmingCallCount = 0
public var cancelTripWithoutConfirmingHandler: (() -> ())?
public func cancelTripWithoutConfirming()  {
        cancelTripWithoutConfirmingCallCount += 1
    
        if let cancelTripWithoutConfirmingHandler = cancelTripWithoutConfirmingHandler {
            cancelTripWithoutConfirmingHandler()
        }
        
    }
var willPresentEmergencyModalCallCount = 0
public var willPresentEmergencyModalHandler: (() -> ())?
public func willPresentEmergencyModal()  {
        willPresentEmergencyModalCallCount += 1
    
        if let willPresentEmergencyModalHandler = willPresentEmergencyModalHandler {
            willPresentEmergencyModalHandler()
        }
        
    }
var willDismissEmergencyModalCallCount = 0
public var willDismissEmergencyModalHandler: ((Bool) -> ())?
public func willDismissEmergencyModal(userDismissed: Bool)  {
        willDismissEmergencyModalCallCount += 1
    
        if let willDismissEmergencyModalHandler = willDismissEmergencyModalHandler {
            willDismissEmergencyModalHandler(userDismissed)
        }
        
    }
}

class BaseRequestErrorHandlerPresentableMock: BaseRequestErrorHandlerPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: BaseRequestErrorHandlerPresenterListener? = nil
    var listener: BaseRequestErrorHandlerPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class RequestFilterWorkingMock: RequestFilterWorking {

    
    init() {}
    init(filters: Observable<[ProductFiltering]> = PublishSubject(), isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.filters = filters
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
        
    private var filtersSubjectKind = 0
    var filtersSubjectSetCallCount = 0
    var filtersSubject = PublishSubject<[ProductFiltering]>() { didSet { filtersSubjectSetCallCount += 1 } }
    var filtersReplaySubject = ReplaySubject<[ProductFiltering]>.create(bufferSize: 1) { didSet { filtersSubjectSetCallCount += 1 } }
    var filtersBehaviorSubject: BehaviorSubject<[ProductFiltering]>! { didSet { filtersSubjectSetCallCount += 1 } }
    var filtersRxSubject: Observable<[ProductFiltering]>! { didSet { filtersSubjectSetCallCount += 1 } }
    var filters: Observable<[ProductFiltering]> {
        get {
            if filtersSubjectKind == 0 {
                return filtersSubject
            } else if filtersSubjectKind == 1 {
                return filtersBehaviorSubject
            } else if filtersSubjectKind == 2 {
                return filtersReplaySubject
            } else {
                return filtersRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[ProductFiltering]> {
                filtersSubject = val
                filtersSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[ProductFiltering]> {
                filtersBehaviorSubject = val
                filtersSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[ProductFiltering]> {
                filtersReplaySubject = val
                filtersSubjectKind = 2
            } else {
                filtersRxSubject = newValue
                filtersSubjectKind = 3
            }
        }
    }
    
    var resetFiltersCallCount = 0
    var resetFiltersHandler: (() -> ())?
    func resetFilters()  {
        resetFiltersCallCount += 1
    
        if let resetFiltersHandler = resetFiltersHandler {
            resetFiltersHandler()
        }
        
    }
    
    var filterSingleVehicleViewIdCallCount = 0
    var filterSingleVehicleViewIdHandler: ((VehicleViewId) -> ())?
    func filterSingleVehicleViewId(vehicleViewId: VehicleViewId)  {
        filterSingleVehicleViewIdCallCount += 1
    
        if let filterSingleVehicleViewIdHandler = filterSingleVehicleViewIdHandler {
            filterSingleVehicleViewIdHandler(vehicleViewId)
        }
        
    }
    
    var filterMultipleVehicleViewIdsCallCount = 0
    var filterMultipleVehicleViewIdsHandler: (([VehicleViewId]) -> ())?
    func filterMultipleVehicleViewIds(vehicleViewIds: [VehicleViewId])  {
        filterMultipleVehicleViewIdsCallCount += 1
    
        if let filterMultipleVehicleViewIdsHandler = filterMultipleVehicleViewIdsHandler {
            filterMultipleVehicleViewIdsHandler(vehicleViewIds)
        }
        
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
}

class ConfirmationAlertRoutingMock: ConfirmationAlertRouting {

    
    init() {}
    init(viewController: ConfirmationAlertViewControllable = ConfirmationAlertViewControllableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.viewController = viewController
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var viewControllerSetCallCount = 0
    var underlyingViewController: ConfirmationAlertViewControllable = ConfirmationAlertViewControllableMock()
    var viewController: ConfirmationAlertViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ProductOptionsViewControllableMock: ProductOptionsViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductOptionsViewControllerListener? = nil
    var listener: ProductOptionsViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showButtonViewControllersCallCount = 0
    var showButtonViewControllersHandler: (([ViewControllable], [ViewControllable]) -> ())?
    func showButtonViewControllers(leadingViewControllers: [ViewControllable], trailingViewControllers: [ViewControllable])  {
        showButtonViewControllersCallCount += 1
    
        if let showButtonViewControllersHandler = showButtonViewControllersHandler {
            showButtonViewControllersHandler(leadingViewControllers, trailingViewControllers)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class PlusOnePresenterListenerMock: PlusOnePresenterListener {

    

    init() {

    }
        
    var abortPlusOneCallCount = 0
    var abortPlusOneHandler: (() -> ())?
    func abortPlusOne()  {
        abortPlusOneCallCount += 1
    
        if let abortPlusOneHandler = abortPlusOneHandler {
            abortPlusOneHandler()
        }
        
    }
}

class SelectedProductConfigurationManagingMock: SelectedProductConfigurationManaging {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductConfigurationManagerListener? = nil
    var listener: SelectedProductConfigurationManagerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateProductPackageCallCount = 0
    var updateProductPackageHandler: ((ProductPackage) -> ())?
    func updateProductPackage(_ productPackage: ProductPackage)  {
        updateProductPackageCallCount += 1
    
        if let updateProductPackageHandler = updateProductPackageHandler {
            updateProductPackageHandler(productPackage)
        }
        
    }
    
    var determineDefaultProductCallCount = 0
    var determineDefaultProductHandler: (() -> (CoreShared.Product?))?
    func determineDefaultProduct() -> CoreShared.Product? {
        determineDefaultProductCallCount += 1
    
        if let determineDefaultProductHandler = determineDefaultProductHandler {
            return determineDefaultProductHandler()
        }
        return nil
    }
    
    var updateConfigurationCallCount = 0
    var updateConfigurationHandler: ((ProductConfigurationRowData, ProductConfigurationValue) -> ())?
    func updateConfiguration(rowData: ProductConfigurationRowData, newValue: ProductConfigurationValue)  {
        updateConfigurationCallCount += 1
    
        if let updateConfigurationHandler = updateConfigurationHandler {
            updateConfigurationHandler(rowData, newValue)
        }
        
    }
}

class TripDetailsRoutingMock: TripDetailsRouting {

    
    init() {}
    init(sectionProvider: TripDetailsSectionProviding = TripDetailsSectionProvidingMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.sectionProvider = sectionProvider
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
    }
        
    var sectionProviderSetCallCount = 0
    var underlyingSectionProvider: TripDetailsSectionProviding = TripDetailsSectionProvidingMock()
    var sectionProvider: TripDetailsSectionProviding {
        get {
            return underlyingSectionProvider
        }
        set {
            underlyingSectionProvider = newValue
            sectionProviderSetCallCount += 1
        }
    }
    
    var routeToRowsCallCount = 0
    var routeToRowsHandler: (([TripDetailsRow]) -> ())?
    func routeToRows(_ rows: [TripDetailsRow])  {
        routeToRowsCallCount += 1
    
        if let routeToRowsHandler = routeToRowsHandler {
            routeToRowsHandler(rows)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ProductBadgeNotificationStateStreamingMock: ProductBadgeNotificationStateStreaming {

    
    init() {}
    init(state: Observable<ProductBadgeNotificationState> = PublishSubject()) {
        self.state = state
    }
        
    private var stateSubjectKind = 0
    var stateSubjectSetCallCount = 0
    var stateSubject = PublishSubject<ProductBadgeNotificationState>() { didSet { stateSubjectSetCallCount += 1 } }
    var stateReplaySubject = ReplaySubject<ProductBadgeNotificationState>.create(bufferSize: 1) { didSet { stateSubjectSetCallCount += 1 } }
    var stateBehaviorSubject: BehaviorSubject<ProductBadgeNotificationState>! { didSet { stateSubjectSetCallCount += 1 } }
    var stateRxSubject: Observable<ProductBadgeNotificationState>! { didSet { stateSubjectSetCallCount += 1 } }
    var state: Observable<ProductBadgeNotificationState> {
        get {
            if stateSubjectKind == 0 {
                return stateSubject
            } else if stateSubjectKind == 1 {
                return stateBehaviorSubject
            } else if stateSubjectKind == 2 {
                return stateReplaySubject
            } else {
                return stateRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductBadgeNotificationState> {
                stateSubject = val
                stateSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductBadgeNotificationState> {
                stateBehaviorSubject = val
                stateSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductBadgeNotificationState> {
                stateReplaySubject = val
                stateSubjectKind = 2
            } else {
                stateRxSubject = newValue
                stateSubjectKind = 3
            }
        }
    }
}

public class ProductPackageStreamingMock: ProductPackageStreaming {

    
    public init() {}
    public init(productPackages: Observable<[ProductPackage]> = PublishSubject()) {
        self.productPackages = productPackages
    }
        
    private var productPackagesSubjectKind = 0
    var productPackagesSubjectSetCallCount = 0
    var productPackagesSubject = PublishSubject<[ProductPackage]>() { didSet { productPackagesSubjectSetCallCount += 1 } }
    var productPackagesReplaySubject = ReplaySubject<[ProductPackage]>.create(bufferSize: 1) { didSet { productPackagesSubjectSetCallCount += 1 } }
    var productPackagesBehaviorSubject: BehaviorSubject<[ProductPackage]>! { didSet { productPackagesSubjectSetCallCount += 1 } }
    var productPackagesRxSubject: Observable<[ProductPackage]>! { didSet { productPackagesSubjectSetCallCount += 1 } }
    public var productPackages: Observable<[ProductPackage]> {
        get {
            if productPackagesSubjectKind == 0 {
                return productPackagesSubject
            } else if productPackagesSubjectKind == 1 {
                return productPackagesBehaviorSubject
            } else if productPackagesSubjectKind == 2 {
                return productPackagesReplaySubject
            } else {
                return productPackagesRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[ProductPackage]> {
                productPackagesSubject = val
                productPackagesSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[ProductPackage]> {
                productPackagesBehaviorSubject = val
                productPackagesSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[ProductPackage]> {
                productPackagesReplaySubject = val
                productPackagesSubjectKind = 2
            } else {
                productPackagesRxSubject = newValue
                productPackagesSubjectKind = 3
            }
        }
    }
}

class ConfirmationInteractableV2Mock: ConfirmationInteractableV2 {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ConfirmationRoutingV2? = nil
    var router: ConfirmationRoutingV2? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationListenerV2? = nil
    var listener: ConfirmationListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateSelectedProductAnchorPointValuesCallCount = 0
    var updateSelectedProductAnchorPointValuesHandler: (() -> ())?
    func updateSelectedProductAnchorPointValues()  {
        updateSelectedProductAnchorPointValuesCallCount += 1
    
        if let updateSelectedProductAnchorPointValuesHandler = updateSelectedProductAnchorPointValuesHandler {
            updateSelectedProductAnchorPointValuesHandler()
        }
        
    }
    
    var updateProductSelectionViewStateTransitionProgressCallCount = 0
    var updateProductSelectionViewStateTransitionProgressHandler: (() -> ())?
    func updateProductSelectionViewStateTransitionProgress()  {
        updateProductSelectionViewStateTransitionProgressCallCount += 1
    
        if let updateProductSelectionViewStateTransitionProgressHandler = updateProductSelectionViewStateTransitionProgressHandler {
            updateProductSelectionViewStateTransitionProgressHandler()
        }
        
    }
    
    var updateProductSelectionAnchorPointValuesCallCount = 0
    var updateProductSelectionAnchorPointValuesHandler: (() -> ())?
    func updateProductSelectionAnchorPointValues()  {
        updateProductSelectionAnchorPointValuesCallCount += 1
    
        if let updateProductSelectionAnchorPointValuesHandler = updateProductSelectionAnchorPointValuesHandler {
            updateProductSelectionAnchorPointValuesHandler()
        }
        
    }
var wantSelectedProductCallCount = 0
public var wantSelectedProductHandler: ((ProductId) -> ())?
public func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var wantsToEditPickupLocationCallCount = 0
public var wantsToEditPickupLocationHandler: ((Bool) -> ())?
public func wantsToEditPickupLocation(destinationHidden: Bool)  {
        wantsToEditPickupLocationCallCount += 1
    
        if let wantsToEditPickupLocationHandler = wantsToEditPickupLocationHandler {
            wantsToEditPickupLocationHandler(destinationHidden)
        }
        
    }
var wantsToEditDropoffLocationCallCount = 0
public var wantsToEditDropoffLocationHandler: (() -> ())?
public func wantsToEditDropoffLocation()  {
        wantsToEditDropoffLocationCallCount += 1
    
        if let wantsToEditDropoffLocationHandler = wantsToEditDropoffLocationHandler {
            wantsToEditDropoffLocationHandler()
        }
        
    }
var didFinishDrawingRoutelineCallCount = 0
public var didFinishDrawingRoutelineHandler: (() -> ())?
public func didFinishDrawingRouteline()  {
        didFinishDrawingRoutelineCallCount += 1
    
        if let didFinishDrawingRoutelineHandler = didFinishDrawingRoutelineHandler {
            didFinishDrawingRoutelineHandler()
        }
        
    }
var didFinishDrawingHaversineCallCount = 0
public var didFinishDrawingHaversineHandler: (() -> ())?
public func didFinishDrawingHaversine()  {
        didFinishDrawingHaversineCallCount += 1
    
        if let didFinishDrawingHaversineHandler = didFinishDrawingHaversineHandler {
            didFinishDrawingHaversineHandler()
        }
        
    }
var didFinishCallCount = 0
public var didFinishHandler: ((ConfirmationActionInteractable) -> ())?
public func didFinish(interactor: ConfirmationActionInteractable)  {
        didFinishCallCount += 1
    
        if let didFinishHandler = didFinishHandler {
            didFinishHandler(interactor)
        }
        
    }
var didInitiateLocationEditorCallCount = 0
public var didInitiateLocationEditorHandler: ((ConfirmationActionInteractable) -> ())?
public func didInitiateLocationEditor(interactor: ConfirmationActionInteractable)  {
        didInitiateLocationEditorCallCount += 1
    
        if let didInitiateLocationEditorHandler = didInitiateLocationEditorHandler {
            didInitiateLocationEditorHandler(interactor)
        }
        
    }
var getConfirmationActionTapMetadataCallCount = 0
public var getConfirmationActionTapMetadataHandler: (() -> (AnalyticsMetadata?))?
public func getConfirmationActionTapMetadata() -> AnalyticsMetadata? {
        getConfirmationActionTapMetadataCallCount += 1
    
        if let getConfirmationActionTapMetadataHandler = getConfirmationActionTapMetadataHandler {
            return getConfirmationActionTapMetadataHandler()
        }
        return nil
    }
var selectProductCallCount = 0
public var selectProductHandler: ((ProductItemId, Bool) -> ())?
public func selectProduct(productItemId: ProductItemId, shouldRouteToSelectedProduct: Bool)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(productItemId, shouldRouteToSelectedProduct)
        }
        
    }
}

class MainViewControllableMock: MainViewControllable {

    
    init() {}
    init(isShowingNetworkError: Bool = false, uiviewController: UIViewController = UIViewController()) {
        self.isShowingNetworkError = isShowingNetworkError
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MainViewControllerListener? = nil
    var listener: MainViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showMenuCallCount = 0
    var showMenuHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
    func showMenu(viewController: UIViewController, animated: Bool, completion: (() -> ())?)  {
        showMenuCallCount += 1
    
        if let showMenuHandler = showMenuHandler {
            showMenuHandler(viewController, animated, completion)
        }
        
    }
    
    var embedModeNavigationCallCount = 0
    public var embedModeNavigationHandler: ((ModeNavigationViewControllable) -> ())?
    public func embedModeNavigation(viewController: ModeNavigationViewControllable)  {
        embedModeNavigationCallCount += 1
    
        if let embedModeNavigationHandler = embedModeNavigationHandler {
            embedModeNavigationHandler(viewController)
        }
        
    }
    
    var hideMenuCallCount = 0
    var hideMenuHandler: ((UIViewController, (() -> ())?) -> ())?
    func hideMenu(viewController: UIViewController, completion: (() -> ())?)  {
        hideMenuCallCount += 1
    
        if let hideMenuHandler = hideMenuHandler {
            hideMenuHandler(viewController, completion)
        }
        
    }
    
    var removeCurrentModeNavigationCallCount = 0
    public var removeCurrentModeNavigationHandler: (() -> ())?
    public func removeCurrentModeNavigation()  {
        removeCurrentModeNavigationCallCount += 1
    
        if let removeCurrentModeNavigationHandler = removeCurrentModeNavigationHandler {
            removeCurrentModeNavigationHandler()
        }
        
    }
    
    var showFullScreenCallCount = 0
    var showFullScreenHandler: ((UIViewController, NavigationViewType) -> ())?
    func showFullScreen(viewController: UIViewController, inNavigationView: NavigationViewType)  {
        showFullScreenCallCount += 1
    
        if let showFullScreenHandler = showFullScreenHandler {
            showFullScreenHandler(viewController, inNavigationView)
        }
        
    }
    
    var hideFullScreenCallCount = 0
    var hideFullScreenHandler: ((UIViewController, (() -> ())?) -> ())?
    func hideFullScreen(viewController: UIViewController, completion: (() -> ())?)  {
        hideFullScreenCallCount += 1
    
        if let hideFullScreenHandler = hideFullScreenHandler {
            hideFullScreenHandler(viewController, completion)
        }
        
    }
    
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
    
    var isShowingNetworkErrorSetCallCount = 0
    var underlyingIsShowingNetworkError: Bool = false
    var isShowingNetworkError: Bool {
        get {
            return underlyingIsShowingNetworkError
        }
        set {
            underlyingIsShowingNetworkError = newValue
            isShowingNetworkErrorSetCallCount += 1
        }
    }
var didTransitionCallCount = 0
public var didTransitionHandler: ((UIViewController?, UIViewController?) -> ())?
public func didTransition(fromViewController: UIViewController?, toViewController: UIViewController?)  {
        didTransitionCallCount += 1
    
        if let didTransitionHandler = didTransitionHandler {
            didTransitionHandler(fromViewController, toViewController)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var transitionFromViewControllerCallCount = 0
public var transitionFromViewControllerHandler: ((UIViewController?, UIViewController?, UIViewControllerAnimatedTransitioning?, TransitionContext, CachedExperimenting?) -> ())?
public func transitionFromViewController(_ fromViewController: UIViewController?, toViewController: UIViewController?, animator: UIViewControllerAnimatedTransitioning?, context: TransitionContext, cachedExperiments: CachedExperimenting?)  {
        transitionFromViewControllerCallCount += 1
    
        if let transitionFromViewControllerHandler = transitionFromViewControllerHandler {
            transitionFromViewControllerHandler(fromViewController, toViewController, animator, context, cachedExperiments)
        }
        
    }
}

class TripHeaderRootInteractableMock: TripHeaderRootInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: TripHeaderRootRouting? = nil
    var router: TripHeaderRootRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: TripHeaderRootListener? = nil
    var listener: TripHeaderRootListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class ProductOptionsRoutingMock: ProductOptionsRouting {

    
    init() {}
    init(interactor: ProductOptionsInteractable = ProductOptionsInteractableMock(), viewController: ProductOptionsViewControllable = ProductOptionsViewControllableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.viewController = viewController
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ProductOptionsInteractable = ProductOptionsInteractableMock()
    var interactor: ProductOptionsInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: ProductOptionsViewControllable = ProductOptionsViewControllableMock()
    var viewController: ProductOptionsViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
    
    var productOptionsItemPresentViewListenerSetCallCount = 0
    var underlyingProductOptionsItemPresentViewListener: ProductOptionsItemPresentViewListener? = nil
    var productOptionsItemPresentViewListener: ProductOptionsItemPresentViewListener? {
        get {
            return underlyingProductOptionsItemPresentViewListener
        }
        set {
            underlyingProductOptionsItemPresentViewListener = newValue
            productOptionsItemPresentViewListenerSetCallCount += 1
        }
    }
    
    var routeToOptionItemsCallCount = 0
    var routeToOptionItemsHandler: (() -> ())?
    func routeToOptionItems()  {
        routeToOptionItemsCallCount += 1
    
        if let routeToOptionItemsHandler = routeToOptionItemsHandler {
            routeToOptionItemsHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class RequestStateManagerMock: RequestStateManager {

    
    init() {}
    init(state: Observable<RequestState> = PublishSubject()) {
        self.state = state
    }
        
    var wantCallCount = 0
    var wantHandler: ((RequestState) -> ())?
    func want(state: RequestState)  {
        wantCallCount += 1
    
        if let wantHandler = wantHandler {
            wantHandler(state)
        }
        
    }
    
    var wantLastNonTransientStateCallCount = 0
    var wantLastNonTransientStateHandler: (() -> ())?
    func wantLastNonTransientState()  {
        wantLastNonTransientStateCallCount += 1
    
        if let wantLastNonTransientStateHandler = wantLastNonTransientStateHandler {
            wantLastNonTransientStateHandler()
        }
        
    }
private var stateSubjectKind = 0
var stateSubjectSetCallCount = 0
var stateSubject = PublishSubject<RequestState>() { didSet { stateSubjectSetCallCount += 1 } }
var stateReplaySubject = ReplaySubject<RequestState>.create(bufferSize: 1) { didSet { stateSubjectSetCallCount += 1 } }
var stateBehaviorSubject: BehaviorSubject<RequestState>! { didSet { stateSubjectSetCallCount += 1 } }
var stateRxSubject: Observable<RequestState>! { didSet { stateSubjectSetCallCount += 1 } }
public var state: Observable<RequestState> {
        get {
            if stateSubjectKind == 0 {
                return stateSubject
            } else if stateSubjectKind == 1 {
                return stateBehaviorSubject
            } else if stateSubjectKind == 2 {
                return stateReplaySubject
            } else {
                return stateRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RequestState> {
                stateSubject = val
                stateSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RequestState> {
                stateBehaviorSubject = val
                stateSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RequestState> {
                stateReplaySubject = val
                stateSubjectKind = 2
            } else {
                stateRxSubject = newValue
                stateSubjectKind = 3
            }
        }
    }
}

class TripDetailsRowSlotConfigWorkingMock: TripDetailsRowSlotConfigWorking {

    
    init() {}
    init(slotConfig: Observable<TripDetailsRowSlotConfig> = PublishSubject(), isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.slotConfig = slotConfig
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
        
    private var slotConfigSubjectKind = 0
    var slotConfigSubjectSetCallCount = 0
    var slotConfigSubject = PublishSubject<TripDetailsRowSlotConfig>() { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfigReplaySubject = ReplaySubject<TripDetailsRowSlotConfig>.create(bufferSize: 1) { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfigBehaviorSubject: BehaviorSubject<TripDetailsRowSlotConfig>! { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfigRxSubject: Observable<TripDetailsRowSlotConfig>! { didSet { slotConfigSubjectSetCallCount += 1 } }
    var slotConfig: Observable<TripDetailsRowSlotConfig> {
        get {
            if slotConfigSubjectKind == 0 {
                return slotConfigSubject
            } else if slotConfigSubjectKind == 1 {
                return slotConfigBehaviorSubject
            } else if slotConfigSubjectKind == 2 {
                return slotConfigReplaySubject
            } else {
                return slotConfigRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<TripDetailsRowSlotConfig> {
                slotConfigSubject = val
                slotConfigSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<TripDetailsRowSlotConfig> {
                slotConfigBehaviorSubject = val
                slotConfigSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<TripDetailsRowSlotConfig> {
                slotConfigReplaySubject = val
                slotConfigSubjectKind = 2
            } else {
                slotConfigRxSubject = newValue
                slotConfigSubjectKind = 3
            }
        }
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
}

public class RiderProductConfigurationDataManagingMock: RiderProductConfigurationDataManaging {

    
    public init() {}
    public init(productConfigurationDataStream: Observable<RidersProductConfigurationData?> = PublishSubject(), isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.productConfigurationDataStream = productConfigurationDataStream
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
        
    private var productConfigurationDataStreamSubjectKind = 0
    var productConfigurationDataStreamSubjectSetCallCount = 0
    var productConfigurationDataStreamSubject = PublishSubject<RidersProductConfigurationData?>() { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    var productConfigurationDataStreamReplaySubject = ReplaySubject<RidersProductConfigurationData?>.create(bufferSize: 1) { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    var productConfigurationDataStreamBehaviorSubject: BehaviorSubject<RidersProductConfigurationData?>! { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    var productConfigurationDataStreamRxSubject: Observable<RidersProductConfigurationData?>! { didSet { productConfigurationDataStreamSubjectSetCallCount += 1 } }
    public var productConfigurationDataStream: Observable<RidersProductConfigurationData?> {
        get {
            if productConfigurationDataStreamSubjectKind == 0 {
                return productConfigurationDataStreamSubject
            } else if productConfigurationDataStreamSubjectKind == 1 {
                return productConfigurationDataStreamBehaviorSubject
            } else if productConfigurationDataStreamSubjectKind == 2 {
                return productConfigurationDataStreamReplaySubject
            } else {
                return productConfigurationDataStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RidersProductConfigurationData?> {
                productConfigurationDataStreamSubject = val
                productConfigurationDataStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RidersProductConfigurationData?> {
                productConfigurationDataStreamBehaviorSubject = val
                productConfigurationDataStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RidersProductConfigurationData?> {
                productConfigurationDataStreamReplaySubject = val
                productConfigurationDataStreamSubjectKind = 2
            } else {
                productConfigurationDataStreamRxSubject = newValue
                productConfigurationDataStreamSubjectKind = 3
            }
        }
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
}

class MutableTripViewPositionStreamingMock: MutableTripViewPositionStreaming {

    
    init() {}
    init(tripViewPosition: Observable<TripViewPositioning> = PublishSubject()) {
        self.tripViewPosition = tripViewPosition
    }
        
    var updateCallCount = 0
    var updateHandler: ((TripViewPositioning) -> ())?
    func update(tripViewPosition: TripViewPositioning)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(tripViewPosition)
        }
        
    }
private var tripViewPositionSubjectKind = 0
var tripViewPositionSubjectSetCallCount = 0
var tripViewPositionSubject = PublishSubject<TripViewPositioning>() { didSet { tripViewPositionSubjectSetCallCount += 1 } }
var tripViewPositionReplaySubject = ReplaySubject<TripViewPositioning>.create(bufferSize: 1) { didSet { tripViewPositionSubjectSetCallCount += 1 } }
var tripViewPositionBehaviorSubject: BehaviorSubject<TripViewPositioning>! { didSet { tripViewPositionSubjectSetCallCount += 1 } }
var tripViewPositionRxSubject: Observable<TripViewPositioning>! { didSet { tripViewPositionSubjectSetCallCount += 1 } }
public var tripViewPosition: Observable<TripViewPositioning> {
        get {
            if tripViewPositionSubjectKind == 0 {
                return tripViewPositionSubject
            } else if tripViewPositionSubjectKind == 1 {
                return tripViewPositionBehaviorSubject
            } else if tripViewPositionSubjectKind == 2 {
                return tripViewPositionReplaySubject
            } else {
                return tripViewPositionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<TripViewPositioning> {
                tripViewPositionSubject = val
                tripViewPositionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<TripViewPositioning> {
                tripViewPositionBehaviorSubject = val
                tripViewPositionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<TripViewPositioning> {
                tripViewPositionReplaySubject = val
                tripViewPositionSubjectKind = 2
            } else {
                tripViewPositionRxSubject = newValue
                tripViewPositionSubjectKind = 3
            }
        }
    }
}

class ModeRoutingMock: ModeRouting {

    
    init() {}
    init(interactor: ModeInteractable = ModeInteractableMock(), modeActionableItem: ModeActionableItem = ModeActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.modeActionableItem = modeActionableItem
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ModeInteractable = ModeInteractableMock()
    var interactor: ModeInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var modeActionableItemSetCallCount = 0
    var underlyingModeActionableItem: ModeActionableItem = ModeActionableItemMock()
    var modeActionableItem: ModeActionableItem {
        get {
            return underlyingModeActionableItem
        }
        set {
            underlyingModeActionableItem = newValue
            modeActionableItemSetCallCount += 1
        }
    }
    
    var viewListenerSetCallCount = 0
    var underlyingViewListener: ModeViewListener? = nil
    var viewListener: ModeViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
    
    var routeToModeNavigationCallCount = 0
    var routeToModeNavigationHandler: ((ModeNavigationBuildable) -> ())?
    func routeToModeNavigation(builder: ModeNavigationBuildable)  {
        routeToModeNavigationCallCount += 1
    
        if let routeToModeNavigationHandler = routeToModeNavigationHandler {
            routeToModeNavigationHandler(builder)
        }
        
    }
    
    var routeFromModeNavigationCallCount = 0
    var routeFromModeNavigationHandler: (() -> ())?
    func routeFromModeNavigation()  {
        routeFromModeNavigationCallCount += 1
    
        if let routeFromModeNavigationHandler = routeFromModeNavigationHandler {
            routeFromModeNavigationHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class PlusOneRoutingMock: PlusOneRouting {

    
    init() {}
    init(plusOneInteractor: PlusOneInteractableCommon = PlusOneInteractableCommonMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.plusOneInteractor = plusOneInteractor
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var plusOneInteractorSetCallCount = 0
    var underlyingPlusOneInteractor: PlusOneInteractableCommon = PlusOneInteractableCommonMock()
    var plusOneInteractor: PlusOneInteractableCommon {
        get {
            return underlyingPlusOneInteractor
        }
        set {
            underlyingPlusOneInteractor = newValue
            plusOneInteractorSetCallCount += 1
        }
    }
    
    var routeToCallCount = 0
    var routeToHandler: ((PlusOneStepBuildable) -> ())?
    func routeTo(nextBuilder: PlusOneStepBuildable)  {
        routeToCallCount += 1
    
        if let routeToHandler = routeToHandler {
            routeToHandler(nextBuilder)
        }
        
    }
    
    var routeAwayCallCount = 0
    var routeAwayHandler: ((Bool, Bool, (() -> ())?) -> ())?
    func routeAway(hasNextStep: Bool, animated: Bool, completion: (() -> ())?)  {
        routeAwayCallCount += 1
    
        if let routeAwayHandler = routeAwayHandler {
            routeAwayHandler(hasNextStep, animated, completion)
        }
        
    }
    
    var routeToStepMapCallCount = 0
    var routeToStepMapHandler: ((PlusOneStepMapRouting) -> ())?
    func routeToStepMap(router: PlusOneStepMapRouting)  {
        routeToStepMapCallCount += 1
    
        if let routeToStepMapHandler = routeToStepMapHandler {
            routeToStepMapHandler(router)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ProductFilterManagingMock: ProductFilterManaging {

    
    init() {}
    init(filteringChanged: Observable<()> = PublishSubject()) {
        self.filteringChanged = filteringChanged
    }
        
    private var filteringChangedSubjectKind = 0
    var filteringChangedSubjectSetCallCount = 0
    var filteringChangedSubject = PublishSubject<()>() { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChangedReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChangedBehaviorSubject: BehaviorSubject<()>! { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChangedRxSubject: Observable<()>! { didSet { filteringChangedSubjectSetCallCount += 1 } }
    var filteringChanged: Observable<()> {
        get {
            if filteringChangedSubjectKind == 0 {
                return filteringChangedSubject
            } else if filteringChangedSubjectKind == 1 {
                return filteringChangedBehaviorSubject
            } else if filteringChangedSubjectKind == 2 {
                return filteringChangedReplaySubject
            } else {
                return filteringChangedRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                filteringChangedSubject = val
                filteringChangedSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                filteringChangedBehaviorSubject = val
                filteringChangedSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                filteringChangedReplaySubject = val
                filteringChangedSubjectKind = 2
            } else {
                filteringChangedRxSubject = newValue
                filteringChangedSubjectKind = 3
            }
        }
    }
var shouldIncludeCallCount = 0
public var shouldIncludeHandler: ((CoreShared.Product) -> (Bool))?
public func shouldInclude(product: CoreShared.Product) -> Bool {
        shouldIncludeCallCount += 1
    
        if let shouldIncludeHandler = shouldIncludeHandler {
            return shouldIncludeHandler(product)
        }
        return false
    }
}

class ProductToastViewListenerMock: ProductToastViewListener {

    

    init() {

    }
        
    var bindFareCallCount = 0
    var bindFareHandler: ((FareBindingRequesting, PricingLabel) -> ())?
    func bindFare(fareRequest: FareBindingRequesting, target: PricingLabel)  {
        bindFareCallCount += 1
    
        if let bindFareHandler = bindFareHandler {
            bindFareHandler(fareRequest, target)
        }
        
    }
}

class ProductSelectionObservabilityManagingMock: ProductSelectionObservabilityManaging {

    

    init() {

    }
        
    var viewListenerSetCallCount = 0
    var underlyingViewListener: ProductSelectionObservabilityManagerViewListener? = nil
    var viewListener: ProductSelectionObservabilityManagerViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
    
    var trackCellSelectedCallCount = 0
    var trackCellSelectedHandler: ((IndexPath, RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackCellSelected(indexPath: IndexPath, responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackCellSelectedCallCount += 1
    
        if let trackCellSelectedHandler = trackCellSelectedHandler {
            trackCellSelectedHandler(indexPath, responseMetadata)
        }
        
    }
    
    var trackCellDisplayedCallCount = 0
    var trackCellDisplayedHandler: ((IndexPath, RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackCellDisplayed(indexPath: IndexPath, responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackCellDisplayedCallCount += 1
    
        if let trackCellDisplayedHandler = trackCellDisplayedHandler {
            trackCellDisplayedHandler(indexPath, responseMetadata)
        }
        
    }
    
    var trackCellWillHighlightCallCount = 0
    var trackCellWillHighlightHandler: ((IndexPath) -> ())?
    func trackCellWillHighlight(indexPath: IndexPath)  {
        trackCellWillHighlightCallCount += 1
    
        if let trackCellWillHighlightHandler = trackCellWillHighlightHandler {
            trackCellWillHighlightHandler(indexPath)
        }
        
    }
    
    var trackCellHighlightedCallCount = 0
    var trackCellHighlightedHandler: ((IndexPath) -> ())?
    func trackCellHighlighted(indexPath: IndexPath)  {
        trackCellHighlightedCallCount += 1
    
        if let trackCellHighlightedHandler = trackCellHighlightedHandler {
            trackCellHighlightedHandler(indexPath)
        }
        
    }
    
    var trackCellsUpdatedCallCount = 0
    var trackCellsUpdatedHandler: (([CoreShared.Product], RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackCellsUpdated(with products: [CoreShared.Product], responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackCellsUpdatedCallCount += 1
    
        if let trackCellsUpdatedHandler = trackCellsUpdatedHandler {
            trackCellsUpdatedHandler(products, responseMetadata)
        }
        
    }
    
    var trackStateChangeCallCount = 0
    var trackStateChangeHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func trackStateChange(responseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        trackStateChangeCallCount += 1
    
        if let trackStateChangeHandler = trackStateChangeHandler {
            trackStateChangeHandler(responseMetadata)
        }
        
    }
    
    var trackViewDidLoadCallCount = 0
    var trackViewDidLoadHandler: (() -> ())?
    func trackViewDidLoad()  {
        trackViewDidLoadCallCount += 1
    
        if let trackViewDidLoadHandler = trackViewDidLoadHandler {
            trackViewDidLoadHandler()
        }
        
    }
    
    var trackViewDidAppearCallCount = 0
    var trackViewDidAppearHandler: (() -> ())?
    func trackViewDidAppear()  {
        trackViewDidAppearCallCount += 1
    
        if let trackViewDidAppearHandler = trackViewDidAppearHandler {
            trackViewDidAppearHandler()
        }
        
    }
    
    var trackLeadingButtonTappedCallCount = 0
    var trackLeadingButtonTappedHandler: (() -> ())?
    func trackLeadingButtonTapped()  {
        trackLeadingButtonTappedCallCount += 1
    
        if let trackLeadingButtonTappedHandler = trackLeadingButtonTappedHandler {
            trackLeadingButtonTappedHandler()
        }
        
    }
    
    var trackRecommendedListFinishShowingCallCount = 0
    var trackRecommendedListFinishShowingHandler: (() -> ())?
    func trackRecommendedListFinishShowing()  {
        trackRecommendedListFinishShowingCallCount += 1
    
        if let trackRecommendedListFinishShowingHandler = trackRecommendedListFinishShowingHandler {
            trackRecommendedListFinishShowingHandler()
        }
        
    }
    
    var trackProductSelectedCallCount = 0
    var trackProductSelectedHandler: (() -> ())?
    func trackProductSelected()  {
        trackProductSelectedCallCount += 1
    
        if let trackProductSelectedHandler = trackProductSelectedHandler {
            trackProductSelectedHandler()
        }
        
    }
    
    var trackProductsUpdatedCallCount = 0
    var trackProductsUpdatedHandler: (() -> ())?
    func trackProductsUpdated()  {
        trackProductsUpdatedCallCount += 1
    
        if let trackProductsUpdatedHandler = trackProductsUpdatedHandler {
            trackProductsUpdatedHandler()
        }
        
    }
    
    var trackTapToFocusViewCallCount = 0
    var trackTapToFocusViewHandler: (() -> ())?
    func trackTapToFocusView()  {
        trackTapToFocusViewCallCount += 1
    
        if let trackTapToFocusViewHandler = trackTapToFocusViewHandler {
            trackTapToFocusViewHandler()
        }
        
    }
}

class BaseRequestErrorHandlerViewControllerListenerMock: BaseRequestErrorHandlerViewControllerListener {

    

    init() {

    }
        
    var didTapDismissCallCount = 0
    var didTapDismissHandler: (() -> ())?
    func didTapDismiss()  {
        didTapDismissCallCount += 1
    
        if let didTapDismissHandler = didTapDismissHandler {
            didTapDismissHandler()
        }
        
    }
}

class MenuItemsWorkingMock: MenuItemsWorking {

    
    init() {}
    init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
        
    private var menuItemsStreamSubjectKind = 0
    var menuItemsStreamSubjectSetCallCount = 0
    var menuItemsStreamSubject = PublishSubject<[MenuItemPresentingInternal]>() { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStreamReplaySubject = ReplaySubject<[MenuItemPresentingInternal]>.create(bufferSize: 1) { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStreamBehaviorSubject: BehaviorSubject<[MenuItemPresentingInternal]>! { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStreamRxSubject: Observable<[MenuItemPresentingInternal]>! { didSet { menuItemsStreamSubjectSetCallCount += 1 } }
    var menuItemsStream: Observable<[MenuItemPresentingInternal]>? {
        get {
            if menuItemsStreamSubjectKind == 0 {
                return menuItemsStreamSubject
            } else if menuItemsStreamSubjectKind == 1 {
                return menuItemsStreamBehaviorSubject
            } else if menuItemsStreamSubjectKind == 2 {
                return menuItemsStreamReplaySubject
            } else {
                return menuItemsStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[MenuItemPresentingInternal]> {
                menuItemsStreamSubject = val
                menuItemsStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[MenuItemPresentingInternal]> {
                menuItemsStreamBehaviorSubject = val
                menuItemsStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[MenuItemPresentingInternal]> {
                menuItemsStreamReplaySubject = val
                menuItemsStreamSubjectKind = 2
            } else {
                menuItemsStreamRxSubject = newValue
                menuItemsStreamSubjectKind = 3
            }
        }
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
}

class PlusOneInteractableMock: PlusOneInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: PlusOneRouting? = nil
    var router: PlusOneRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var plusOneListenerSetCallCount = 0
    var underlyingPlusOneListener: PlusOneInteractorListener? = nil
    var plusOneListener: PlusOneInteractorListener? {
        get {
            return underlyingPlusOneListener
        }
        set {
            underlyingPlusOneListener = newValue
            plusOneListenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var plusOneStepCompletedCallCount = 0
public var plusOneStepCompletedHandler: (() -> ())?
public func plusOneStepCompleted()  {
        plusOneStepCompletedCallCount += 1
    
        if let plusOneStepCompletedHandler = plusOneStepCompletedHandler {
            plusOneStepCompletedHandler()
        }
        
    }
var plusOneStepCompletedForceRecreateStepsCallCount = 0
public var plusOneStepCompletedForceRecreateStepsHandler: ((Bool) -> ())?
public func plusOneStepCompleted(forceRecreateSteps: Bool)  {
        plusOneStepCompletedForceRecreateStepsCallCount += 1
    
        if let plusOneStepCompletedForceRecreateStepsHandler = plusOneStepCompletedForceRecreateStepsHandler {
            plusOneStepCompletedForceRecreateStepsHandler(forceRecreateSteps)
        }
        
    }
var plusOneStepAbortedCallCount = 0
public var plusOneStepAbortedHandler: (() -> ())?
public func plusOneStepAborted()  {
        plusOneStepAbortedCallCount += 1
    
        if let plusOneStepAbortedHandler = plusOneStepAbortedHandler {
            plusOneStepAbortedHandler()
        }
        
    }
var plusOneStepAbortedForceRefreshFaresCallCount = 0
public var plusOneStepAbortedForceRefreshFaresHandler: ((Bool) -> ())?
public func plusOneStepAborted(forceRefreshFares: Bool)  {
        plusOneStepAbortedForceRefreshFaresCallCount += 1
    
        if let plusOneStepAbortedForceRefreshFaresHandler = plusOneStepAbortedForceRefreshFaresHandler {
            plusOneStepAbortedForceRefreshFaresHandler(forceRefreshFares)
        }
        
    }
var plusOneStepWantCallCount = 0
public var plusOneStepWantHandler: ((PlusOneStepMapRouting) -> ())?
public func plusOneStepWant(mapRouter: PlusOneStepMapRouting)  {
        plusOneStepWantCallCount += 1
    
        if let plusOneStepWantHandler = plusOneStepWantHandler {
            plusOneStepWantHandler(mapRouter)
        }
        
    }
}

class ProductSelectionCollectionViewProviderV2ListenerMock: ProductSelectionCollectionViewProviderV2Listener {

    

    init() {

    }
        
    var categoryTitleCallCount = 0
    var categoryTitleHandler: ((Int) -> (String))?
    func categoryTitle(for section: Int) -> String {
        categoryTitleCallCount += 1
    
        if let categoryTitleHandler = categoryTitleHandler {
            return categoryTitleHandler(section)
        }
        return ""
    }
    
    var numberOfProductsCallCount = 0
    var numberOfProductsHandler: ((Int) -> (Int))?
    func numberOfProducts(inSection section: Int) -> Int {
        numberOfProductsCallCount += 1
    
        if let numberOfProductsHandler = numberOfProductsHandler {
            return numberOfProductsHandler(section)
        }
        return 0
    }
    
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: ((IndexPath) -> (ProductSelectionCellViewModel?))?
    func viewModelForCell(at indexPath: IndexPath) -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler(indexPath)
        }
        return nil
    }
    
    var willHighlightCellCallCount = 0
    var willHighlightCellHandler: ((IndexPath) -> ())?
    func willHighlightCell(at indexPath: IndexPath)  {
        willHighlightCellCallCount += 1
    
        if let willHighlightCellHandler = willHighlightCellHandler {
            willHighlightCellHandler(indexPath)
        }
        
    }
    
    var didHighlightCellCallCount = 0
    var didHighlightCellHandler: ((IndexPath) -> ())?
    func didHighlightCell(at indexPath: IndexPath)  {
        didHighlightCellCallCount += 1
    
        if let didHighlightCellHandler = didHighlightCellHandler {
            didHighlightCellHandler(indexPath)
        }
        
    }
    
    var didSelectCellCallCount = 0
    var didSelectCellHandler: ((IndexPath) -> ())?
    func didSelectCell(at indexPath: IndexPath)  {
        didSelectCellCallCount += 1
    
        if let didSelectCellHandler = didSelectCellHandler {
            didSelectCellHandler(indexPath)
        }
        
    }
    
    var willDisplayCellCallCount = 0
    var willDisplayCellHandler: ((IndexPath) -> ())?
    func willDisplayCell(at indexPath: IndexPath)  {
        willDisplayCellCallCount += 1
    
        if let willDisplayCellHandler = willDisplayCellHandler {
            willDisplayCellHandler(indexPath)
        }
        
    }
    
    var didScrollCallCount = 0
    var didScrollHandler: (() -> ())?
    func didScroll()  {
        didScrollCallCount += 1
    
        if let didScrollHandler = didScrollHandler {
            didScrollHandler()
        }
        
    }
    
    var productCellCallCount = 0
    var productCellHandler: ((IndexPath) -> (ProductCell?))?
    func productCell(at indexPath: IndexPath) -> ProductCell? {
        productCellCallCount += 1
    
        if let productCellHandler = productCellHandler {
            return productCellHandler(indexPath)
        }
        return nil
    }
    
    var bindCallCount = 0
    var bindHandler: ((ProductCell, ProductCollectionViewCellDisplayable) -> ())?
    func bind(productCell: ProductCell, viewCell: ProductCollectionViewCellDisplayable)  {
        bindCallCount += 1
    
        if let bindHandler = bindHandler {
            bindHandler(productCell, viewCell)
        }
        
    }
    
    var unbindCallCount = 0
    var unbindHandler: ((ProductCell) -> ())?
    func unbind(productCell: ProductCell)  {
        unbindCallCount += 1
    
        if let unbindHandler = unbindHandler {
            unbindHandler(productCell)
        }
        
    }
}

class SelectedProductCollectionViewProviderListenerMock: SelectedProductCollectionViewProviderListener {

    

    init() {

    }
        
    var getViewModelForCellCallCount = 0
    var getViewModelForCellHandler: (() -> (ProductSelectionCellViewModel?))?
    func getViewModelForCell() -> ProductSelectionCellViewModel? {
        getViewModelForCellCallCount += 1
    
        if let getViewModelForCellHandler = getViewModelForCellHandler {
            return getViewModelForCellHandler()
        }
        return nil
    }
    
    var didTapFareBreakdownInfoIconCallCount = 0
    var didTapFareBreakdownInfoIconHandler: (() -> ())?
    func didTapFareBreakdownInfoIcon()  {
        didTapFareBreakdownInfoIconCallCount += 1
    
        if let didTapFareBreakdownInfoIconHandler = didTapFareBreakdownInfoIconHandler {
            didTapFareBreakdownInfoIconHandler()
        }
        
    }
}

public class ProductCatalogResultAndSelectionStreamingMock: ProductCatalogResultAndSelectionStreaming {

    
    public init() {}
    public init(catalogResultAndSelection: Observable<ProductCatalogResultAndSelection> = PublishSubject(), productFareDisplayContextProviderStream: Observable<ProductFareDisplayContextWrapping?> = PublishSubject()) {
        self.catalogResultAndSelection = catalogResultAndSelection
        self.productFareDisplayContextProviderStream = productFareDisplayContextProviderStream
    }
        
    private var catalogResultAndSelectionSubjectKind = 0
    var catalogResultAndSelectionSubjectSetCallCount = 0
    var catalogResultAndSelectionSubject = PublishSubject<ProductCatalogResultAndSelection>() { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    var catalogResultAndSelectionReplaySubject = ReplaySubject<ProductCatalogResultAndSelection>.create(bufferSize: 1) { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    var catalogResultAndSelectionBehaviorSubject: BehaviorSubject<ProductCatalogResultAndSelection>! { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    var catalogResultAndSelectionRxSubject: Observable<ProductCatalogResultAndSelection>! { didSet { catalogResultAndSelectionSubjectSetCallCount += 1 } }
    public var catalogResultAndSelection: Observable<ProductCatalogResultAndSelection> {
        get {
            if catalogResultAndSelectionSubjectKind == 0 {
                return catalogResultAndSelectionSubject
            } else if catalogResultAndSelectionSubjectKind == 1 {
                return catalogResultAndSelectionBehaviorSubject
            } else if catalogResultAndSelectionSubjectKind == 2 {
                return catalogResultAndSelectionReplaySubject
            } else {
                return catalogResultAndSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductCatalogResultAndSelection> {
                catalogResultAndSelectionSubject = val
                catalogResultAndSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductCatalogResultAndSelection> {
                catalogResultAndSelectionBehaviorSubject = val
                catalogResultAndSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductCatalogResultAndSelection> {
                catalogResultAndSelectionReplaySubject = val
                catalogResultAndSelectionSubjectKind = 2
            } else {
                catalogResultAndSelectionRxSubject = newValue
                catalogResultAndSelectionSubjectKind = 3
            }
        }
    }
    
    private var productFareDisplayContextProviderStreamSubjectKind = 0
    var productFareDisplayContextProviderStreamSubjectSetCallCount = 0
    var productFareDisplayContextProviderStreamSubject = PublishSubject<ProductFareDisplayContextWrapping?>() { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    var productFareDisplayContextProviderStreamReplaySubject = ReplaySubject<ProductFareDisplayContextWrapping?>.create(bufferSize: 1) { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    var productFareDisplayContextProviderStreamBehaviorSubject: BehaviorSubject<ProductFareDisplayContextWrapping?>! { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    var productFareDisplayContextProviderStreamRxSubject: Observable<ProductFareDisplayContextWrapping?>! { didSet { productFareDisplayContextProviderStreamSubjectSetCallCount += 1 } }
    public var productFareDisplayContextProviderStream: Observable<ProductFareDisplayContextWrapping?> {
        get {
            if productFareDisplayContextProviderStreamSubjectKind == 0 {
                return productFareDisplayContextProviderStreamSubject
            } else if productFareDisplayContextProviderStreamSubjectKind == 1 {
                return productFareDisplayContextProviderStreamBehaviorSubject
            } else if productFareDisplayContextProviderStreamSubjectKind == 2 {
                return productFareDisplayContextProviderStreamReplaySubject
            } else {
                return productFareDisplayContextProviderStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductFareDisplayContextWrapping?> {
                productFareDisplayContextProviderStreamSubject = val
                productFareDisplayContextProviderStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductFareDisplayContextWrapping?> {
                productFareDisplayContextProviderStreamBehaviorSubject = val
                productFareDisplayContextProviderStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductFareDisplayContextWrapping?> {
                productFareDisplayContextProviderStreamReplaySubject = val
                productFareDisplayContextProviderStreamSubjectKind = 2
            } else {
                productFareDisplayContextProviderStreamRxSubject = newValue
                productFareDisplayContextProviderStreamSubjectKind = 3
            }
        }
    }
}

class TripHeaderRootRoutingMock: TripHeaderRootRouting {

    
    init() {}
    init(interactor: TripHeaderRootInteractable = TripHeaderRootInteractableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: TripHeaderRootInteractable = TripHeaderRootInteractableMock()
    var interactor: TripHeaderRootInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeToTripHeaderCallCount = 0
    var routeToTripHeaderHandler: ((TripHeaderBuildable) -> ())?
    func routeToTripHeader(builder: TripHeaderBuildable)  {
        routeToTripHeaderCallCount += 1
    
        if let routeToTripHeaderHandler = routeToTripHeaderHandler {
            routeToTripHeaderHandler(builder)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class OutOfCoverageViewControllableMock: OutOfCoverageViewControllable {

    
    init() {}
    init(slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0, uiviewController: UIViewController = UIViewController()) {
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
        self.uiviewController = uiviewController
    }
    var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
}

class ProductViewModelTransformingMock: ProductViewModelTransforming {

    

    init() {

    }
        
    var transformCallCount = 0
    var transformHandler: ((ProductCatalog, ProductSubtitleMap?, ProductToastMap?, ProductBadgeMap?, ProductDetailInfoMap?, ProductAnnotationsMap?, ProductFareBindingTypeMap?, ProductExplainerMap?, ProductDetailViewMap?, ProductViewEmphasisMap?, ProductStickerMap?, ProductRecommendationInfoMap?, CachedExperimenting) -> (ProductCatalogViewModel))?
    func transform(productCatalog: ProductCatalog, productSubtitleMap: ProductSubtitleMap?, productToastMap: ProductToastMap?, productBadgeMap: ProductBadgeMap?, productDetailInfoMap: ProductDetailInfoMap?, productAnnotationsMap: ProductAnnotationsMap?, productFareBindingTypeMap: ProductFareBindingTypeMap?, productExplainerMap: ProductExplainerMap?, productDetailViewMap: ProductDetailViewMap?, productViewEmphasisMap: ProductViewEmphasisMap?, productStickerMap: ProductStickerMap?, productRecommendationInfoMap: ProductRecommendationInfoMap?, cachedExperiments: CachedExperimenting) -> ProductCatalogViewModel {
        transformCallCount += 1
    
        if let transformHandler = transformHandler {
            return transformHandler(productCatalog, productSubtitleMap, productToastMap, productBadgeMap, productDetailInfoMap, productAnnotationsMap, productFareBindingTypeMap, productExplainerMap, productDetailViewMap, productViewEmphasisMap, productStickerMap, productRecommendationInfoMap, cachedExperiments)
        }
        fatalError("transformHandler returns can't have a default value thus its handler must be set")
    }
}

class DestinationPromptRoutingMock: DestinationPromptRouting {

    
    init() {}
    init(interactor: DestinationPromptInteractable = DestinationPromptInteractableMock(), actionableItem: LocationEditorEntryActionableItem = LocationEditorEntryActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.actionableItem = actionableItem
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: DestinationPromptInteractable = DestinationPromptInteractableMock()
    var interactor: DestinationPromptInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeFromDestinationEntryAccessoryCallCount = 0
    var routeFromDestinationEntryAccessoryHandler: (() -> ())?
    func routeFromDestinationEntryAccessory()  {
        routeFromDestinationEntryAccessoryCallCount += 1
    
        if let routeFromDestinationEntryAccessoryHandler = routeFromDestinationEntryAccessoryHandler {
            routeFromDestinationEntryAccessoryHandler()
        }
        
    }
    
    var routeToDestinationEntryAccessoryCallCount = 0
    var routeToDestinationEntryAccessoryHandler: ((DestinationEntryAccessoryBuildable) -> (DestinationEntryAccessoryActionableItem))?
    func routeToDestinationEntryAccessory(builder: DestinationEntryAccessoryBuildable) -> DestinationEntryAccessoryActionableItem {
        routeToDestinationEntryAccessoryCallCount += 1
    
        if let routeToDestinationEntryAccessoryHandler = routeToDestinationEntryAccessoryHandler {
            return routeToDestinationEntryAccessoryHandler(builder)
        }
        return DestinationEntryAccessoryActionableItemMock()
    }
    
    var detachTopAccessoryCallCount = 0
    var detachTopAccessoryHandler: ((ViewableRouting) -> ())?
    func detachTopAccessory(router: ViewableRouting)  {
        detachTopAccessoryCallCount += 1
    
        if let detachTopAccessoryHandler = detachTopAccessoryHandler {
            detachTopAccessoryHandler(router)
        }
        
    }
    
    var attachTopAccessoryCallCount = 0
    var attachTopAccessoryHandler: ((ViewableRouting) -> ())?
    func attachTopAccessory(router: ViewableRouting)  {
        attachTopAccessoryCallCount += 1
    
        if let attachTopAccessoryHandler = attachTopAccessoryHandler {
            attachTopAccessoryHandler(router)
        }
        
    }
var actionableItemSetCallCount = 0
var underlyingActionableItem: LocationEditorEntryActionableItem = LocationEditorEntryActionableItemMock()
public var actionableItem: LocationEditorEntryActionableItem {
        get {
            return underlyingActionableItem
        }
        set {
            underlyingActionableItem = newValue
            actionableItemSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class SelectedProductViewControllableMock: SelectedProductViewControllable {

    
    init() {}
    init(anchorPointHeight: CGFloat = 0.0, slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0, uiviewController: UIViewController = UIViewController()) {
        self.anchorPointHeight = anchorPointHeight
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductViewControllableListener? = nil
    var listener: SelectedProductViewControllableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var anchorPointHeightSetCallCount = 0
    var underlyingAnchorPointHeight: CGFloat = 0.0
    var anchorPointHeight: CGFloat {
        get {
            return underlyingAnchorPointHeight
        }
        set {
            underlyingAnchorPointHeight = newValue
            anchorPointHeightSetCallCount += 1
        }
    }
    
    var updateCollectionViewCallCount = 0
    var updateCollectionViewHandler: ((UICollectionViewCell.Type) -> ())?
    func updateCollectionView(cellType: UICollectionViewCell.Type)  {
        updateCollectionViewCallCount += 1
    
        if let updateCollectionViewHandler = updateCollectionViewHandler {
            updateCollectionViewHandler(cellType)
        }
        
    }
    
    var viewModelUpdatedCallCount = 0
    var viewModelUpdatedHandler: (() -> ())?
    func viewModelUpdated()  {
        viewModelUpdatedCallCount += 1
    
        if let viewModelUpdatedHandler = viewModelUpdatedHandler {
            viewModelUpdatedHandler()
        }
        
    }
    
    var updateFareBreakdownViewModelCallCount = 0
    var updateFareBreakdownViewModelHandler: ((ProductFareBreakdownViewModel) -> ())?
    func updateFareBreakdownViewModel(_ viewModel: ProductFareBreakdownViewModel)  {
        updateFareBreakdownViewModelCallCount += 1
    
        if let updateFareBreakdownViewModelHandler = updateFareBreakdownViewModelHandler {
            updateFareBreakdownViewModelHandler(viewModel)
        }
        
    }
    
    var showSelectedProductConfigurationViewControllerCallCount = 0
    var showSelectedProductConfigurationViewControllerHandler: ((SelectedProductConfigurationViewControllable) -> ())?
    func showSelectedProductConfigurationViewController(_ productConfigurationsViewController: SelectedProductConfigurationViewControllable)  {
        showSelectedProductConfigurationViewControllerCallCount += 1
    
        if let showSelectedProductConfigurationViewControllerHandler = showSelectedProductConfigurationViewControllerHandler {
            showSelectedProductConfigurationViewControllerHandler(productConfigurationsViewController)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
    
    var showAlertViewControllableCallCount = 0
    var showAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showAlertViewControllableCallCount += 1
    
        if let showAlertViewControllableHandler = showAlertViewControllableHandler {
            showAlertViewControllableHandler(alertViewControllable)
        }
        
    }
}

class ConfirmationAlertViewControllableMock: ConfirmationAlertViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var viewListenerSetCallCount = 0
    var underlyingViewListener: ConfirmationAlertViewControllerViewListener? = nil
    var viewListener: ConfirmationAlertViewControllerViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class ProductTooltipManagingMock: ProductTooltipManaging {

    

    init() {

    }
        
    var addToShownTooltipsCallCount = 0
    var addToShownTooltipsHandler: ((TooltipUuid, Bool) -> ())?
    func addToShownTooltips(tooltipUuid: TooltipUuid, showOnce: Bool)  {
        addToShownTooltipsCallCount += 1
    
        if let addToShownTooltipsHandler = addToShownTooltipsHandler {
            addToShownTooltipsHandler(tooltipUuid, showOnce)
        }
        
    }
    
    var shouldShowTooltipCallCount = 0
    var shouldShowTooltipHandler: ((TooltipUuid) -> (Bool))?
    func shouldShowTooltip(tooltipUuid: TooltipUuid) -> Bool {
        shouldShowTooltipCallCount += 1
    
        if let shouldShowTooltipHandler = shouldShowTooltipHandler {
            return shouldShowTooltipHandler(tooltipUuid)
        }
        return false
    }
}

class ProductUpsellManagingMock: ProductUpsellManaging {

    
    init() {}
    init(viewedUpsells: ProductUpsellPreferences = ProductUpsellPreferencesMock()) {
        self.viewedUpsells = viewedUpsells
    }
        
    var viewedUpsellsSetCallCount = 0
    var underlyingViewedUpsells: ProductUpsellPreferences = ProductUpsellPreferencesMock()
    var viewedUpsells: ProductUpsellPreferences {
        get {
            return underlyingViewedUpsells
        }
        set {
            underlyingViewedUpsells = newValue
            viewedUpsellsSetCallCount += 1
        }
    }
    
    var addToViewedUpsellsCallCount = 0
    var addToViewedUpsellsHandler: ((Upsell) -> ())?
    func addToViewedUpsells(upsell: Upsell)  {
        addToViewedUpsellsCallCount += 1
    
        if let addToViewedUpsellsHandler = addToViewedUpsellsHandler {
            addToViewedUpsellsHandler(upsell)
        }
        
    }
}

public class ConfirmationActionRequestDependencyMock: ConfirmationActionRequestDependency {

    
    public init() {}
    public init(cachedExperiments: CachedExperimenting = CachedExperimentingMock(), confirmationActionTitleMappingPluginPoint: ConfirmationActionTitleMappingPluginPoint = ConfirmationActionTitleMappingPluginPointMock(), confirmationNextStepStream: ConfirmationNextStepStreaming = ConfirmationNextStepStreamingMock(), productSelection: Observable<ProductSelection> = PublishSubject(), productPricingStream: ProductPricingStreaming = ProductPricingStreamingMock(), fareImpressionProvider: FareImpressionProviding = FareImpressionProvidingMock()) {
        self.cachedExperiments = cachedExperiments
        self.confirmationActionTitleMappingPluginPoint = confirmationActionTitleMappingPluginPoint
        self.confirmationNextStepStream = confirmationNextStepStream
        self.productSelection = productSelection
        self.productPricingStream = productPricingStream
        self.fareImpressionProvider = fareImpressionProvider
    }
        
    var cachedExperimentsSetCallCount = 0
    var underlyingCachedExperiments: CachedExperimenting = CachedExperimentingMock()
    public var cachedExperiments: CachedExperimenting {
        get {
            return underlyingCachedExperiments
        }
        set {
            underlyingCachedExperiments = newValue
            cachedExperimentsSetCallCount += 1
        }
    }
    
    var confirmationActionTitleMappingPluginPointSetCallCount = 0
    var underlyingConfirmationActionTitleMappingPluginPoint: ConfirmationActionTitleMappingPluginPoint = ConfirmationActionTitleMappingPluginPointMock()
    public var confirmationActionTitleMappingPluginPoint: ConfirmationActionTitleMappingPluginPoint {
        get {
            return underlyingConfirmationActionTitleMappingPluginPoint
        }
        set {
            underlyingConfirmationActionTitleMappingPluginPoint = newValue
            confirmationActionTitleMappingPluginPointSetCallCount += 1
        }
    }
    
    var confirmationNextStepStreamSetCallCount = 0
    var underlyingConfirmationNextStepStream: ConfirmationNextStepStreaming = ConfirmationNextStepStreamingMock()
    public var confirmationNextStepStream: ConfirmationNextStepStreaming {
        get {
            return underlyingConfirmationNextStepStream
        }
        set {
            underlyingConfirmationNextStepStream = newValue
            confirmationNextStepStreamSetCallCount += 1
        }
    }
    
    private var productSelectionSubjectKind = 0
    var productSelectionSubjectSetCallCount = 0
    var productSelectionSubject = PublishSubject<ProductSelection>() { didSet { productSelectionSubjectSetCallCount += 1 } }
    var productSelectionReplaySubject = ReplaySubject<ProductSelection>.create(bufferSize: 1) { didSet { productSelectionSubjectSetCallCount += 1 } }
    var productSelectionBehaviorSubject: BehaviorSubject<ProductSelection>! { didSet { productSelectionSubjectSetCallCount += 1 } }
    var productSelectionRxSubject: Observable<ProductSelection>! { didSet { productSelectionSubjectSetCallCount += 1 } }
    public var productSelection: Observable<ProductSelection> {
        get {
            if productSelectionSubjectKind == 0 {
                return productSelectionSubject
            } else if productSelectionSubjectKind == 1 {
                return productSelectionBehaviorSubject
            } else if productSelectionSubjectKind == 2 {
                return productSelectionReplaySubject
            } else {
                return productSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelection> {
                productSelectionSubject = val
                productSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelection> {
                productSelectionBehaviorSubject = val
                productSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelection> {
                productSelectionReplaySubject = val
                productSelectionSubjectKind = 2
            } else {
                productSelectionRxSubject = newValue
                productSelectionSubjectKind = 3
            }
        }
    }
    
    var productPricingStreamSetCallCount = 0
    var underlyingProductPricingStream: ProductPricingStreaming = ProductPricingStreamingMock()
    public var productPricingStream: ProductPricingStreaming {
        get {
            return underlyingProductPricingStream
        }
        set {
            underlyingProductPricingStream = newValue
            productPricingStreamSetCallCount += 1
        }
    }
    
    var fareImpressionProviderSetCallCount = 0
    var underlyingFareImpressionProvider: FareImpressionProviding = FareImpressionProvidingMock()
    public var fareImpressionProvider: FareImpressionProviding {
        get {
            return underlyingFareImpressionProvider
        }
        set {
            underlyingFareImpressionProvider = newValue
            fareImpressionProviderSetCallCount += 1
        }
    }
}

class ConfirmationActionRequestViewControllableMock: ConfirmationActionRequestViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationActionRequestViewControllerListener? = nil
    var listener: ConfirmationActionRequestViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var setNextStepTitleCallCount = 0
    var setNextStepTitleHandler: ((String, String?, AnalyticsID?) -> ())?
    func setNextStepTitle(title: String, subtitle: String?, analyticsID: AnalyticsID?)  {
        setNextStepTitleCallCount += 1
    
        if let setNextStepTitleHandler = setNextStepTitleHandler {
            setNextStepTitleHandler(title, subtitle, analyticsID)
        }
        
    }
    
    var setNextStepStyleCallCount = 0
    var setNextStepStyleHandler: ((ConfirmationActionRequestStyling) -> ())?
    func setNextStepStyle(_ confirmationActionRequestStyle: ConfirmationActionRequestStyling)  {
        setNextStepStyleCallCount += 1
    
        if let setNextStepStyleHandler = setNextStepStyleHandler {
            setNextStepStyleHandler(confirmationActionRequestStyle)
        }
        
    }
    
    var setNextStepEnabledCallCount = 0
    var setNextStepEnabledHandler: ((Bool) -> ())?
    func setNextStepEnabled(_ isEnabled: Bool)  {
        setNextStepEnabledCallCount += 1
    
        if let setNextStepEnabledHandler = setNextStepEnabledHandler {
            setNextStepEnabledHandler(isEnabled)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var showConfirmationActionAccessoryCallCount = 0
public var showConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryViewControllable?, @escaping () -> ()) -> ())?
public func showConfirmationActionAccessory(_ accessory: ConfirmationActionAccessoryViewControllable?, completion: @escaping () -> ())  {
        showConfirmationActionAccessoryCallCount += 1
    
        if let showConfirmationActionAccessoryHandler = showConfirmationActionAccessoryHandler {
            showConfirmationActionAccessoryHandler(accessory, completion)
        }
        
    }
}

class ConfirmationInteractableMock: ConfirmationInteractable {

    
    init() {}
    init(confirmationPresenter: ConfirmationPresentable = ConfirmationPresentableMock(), isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.confirmationPresenter = confirmationPresenter
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ConfirmationRouting? = nil
    var router: ConfirmationRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationListener? = nil
    var listener: ConfirmationListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var confirmationPresenterSetCallCount = 0
    var underlyingConfirmationPresenter: ConfirmationPresentable = ConfirmationPresentableMock()
    var confirmationPresenter: ConfirmationPresentable {
        get {
            return underlyingConfirmationPresenter
        }
        set {
            underlyingConfirmationPresenter = newValue
            confirmationPresenterSetCallCount += 1
        }
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var loadingBeganCallCount = 0
    var loadingBeganHandler: ((ProductSelectionInteractable) -> ())?
    func loadingBegan(productSelectionInteractor: ProductSelectionInteractable)  {
        loadingBeganCallCount += 1
    
        if let loadingBeganHandler = loadingBeganHandler {
            loadingBeganHandler(productSelectionInteractor)
        }
        
    }
    
    var loadingEndedCallCount = 0
    var loadingEndedHandler: ((ProductSelectionInteractable) -> ())?
    func loadingEnded(productSelectionInteractor: ProductSelectionInteractable)  {
        loadingEndedCallCount += 1
    
        if let loadingEndedHandler = loadingEndedHandler {
            loadingEndedHandler(productSelectionInteractor)
        }
        
    }
var wantSelectedProductCallCount = 0
public var wantSelectedProductHandler: ((ProductId) -> ())?
public func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var wantsToEditPickupLocationCallCount = 0
public var wantsToEditPickupLocationHandler: ((Bool) -> ())?
public func wantsToEditPickupLocation(destinationHidden: Bool)  {
        wantsToEditPickupLocationCallCount += 1
    
        if let wantsToEditPickupLocationHandler = wantsToEditPickupLocationHandler {
            wantsToEditPickupLocationHandler(destinationHidden)
        }
        
    }
var wantsToEditDropoffLocationCallCount = 0
public var wantsToEditDropoffLocationHandler: (() -> ())?
public func wantsToEditDropoffLocation()  {
        wantsToEditDropoffLocationCallCount += 1
    
        if let wantsToEditDropoffLocationHandler = wantsToEditDropoffLocationHandler {
            wantsToEditDropoffLocationHandler()
        }
        
    }
var didFinishDrawingRoutelineCallCount = 0
public var didFinishDrawingRoutelineHandler: (() -> ())?
public func didFinishDrawingRouteline()  {
        didFinishDrawingRoutelineCallCount += 1
    
        if let didFinishDrawingRoutelineHandler = didFinishDrawingRoutelineHandler {
            didFinishDrawingRoutelineHandler()
        }
        
    }
var didFinishDrawingHaversineCallCount = 0
public var didFinishDrawingHaversineHandler: (() -> ())?
public func didFinishDrawingHaversine()  {
        didFinishDrawingHaversineCallCount += 1
    
        if let didFinishDrawingHaversineHandler = didFinishDrawingHaversineHandler {
            didFinishDrawingHaversineHandler()
        }
        
    }
var didFinishCallCount = 0
public var didFinishHandler: ((ConfirmationActionInteractable) -> ())?
public func didFinish(interactor: ConfirmationActionInteractable)  {
        didFinishCallCount += 1
    
        if let didFinishHandler = didFinishHandler {
            didFinishHandler(interactor)
        }
        
    }
var didInitiateLocationEditorCallCount = 0
public var didInitiateLocationEditorHandler: ((ConfirmationActionInteractable) -> ())?
public func didInitiateLocationEditor(interactor: ConfirmationActionInteractable)  {
        didInitiateLocationEditorCallCount += 1
    
        if let didInitiateLocationEditorHandler = didInitiateLocationEditorHandler {
            didInitiateLocationEditorHandler(interactor)
        }
        
    }
var getConfirmationActionTapMetadataCallCount = 0
public var getConfirmationActionTapMetadataHandler: (() -> (AnalyticsMetadata?))?
public func getConfirmationActionTapMetadata() -> AnalyticsMetadata? {
        getConfirmationActionTapMetadataCallCount += 1
    
        if let getConfirmationActionTapMetadataHandler = getConfirmationActionTapMetadataHandler {
            return getConfirmationActionTapMetadataHandler()
        }
        return nil
    }
}

class SelectedProductRoutingMock: SelectedProductRouting {

    
    init() {}
    init(interactor: SelectedProductInteractable = SelectedProductInteractableMock(), viewController: SelectedProductViewControllable = SelectedProductViewControllableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.viewController = viewController
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: SelectedProductInteractable = SelectedProductInteractableMock()
    var interactor: SelectedProductInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: SelectedProductViewControllable = SelectedProductViewControllableMock()
    var viewController: SelectedProductViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class SelectedProductViewControllableListenerMock: SelectedProductViewControllableListener {

    

    init() {

    }
        
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: (() -> (ProductSelectionCellViewModel?))?
    func viewModelForCell() -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler()
        }
        return nil
    }
    
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
}

class SelectedProductConfigurationRoutingMock: SelectedProductConfigurationRouting {

    
    init() {}
    init(viewController: SelectedProductConfigurationViewControllable = SelectedProductConfigurationViewControllableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.viewController = viewController
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var viewControllerSetCallCount = 0
    var underlyingViewController: SelectedProductConfigurationViewControllable = SelectedProductConfigurationViewControllableMock()
    var viewController: SelectedProductConfigurationViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
    
    var attachConfigurationChildRouterCallCount = 0
    var attachConfigurationChildRouterHandler: ((ViewableRouting) -> ())?
    func attachConfigurationChildRouter(router: ViewableRouting)  {
        attachConfigurationChildRouterCallCount += 1
    
        if let attachConfigurationChildRouterHandler = attachConfigurationChildRouterHandler {
            attachConfigurationChildRouterHandler(router)
        }
        
    }
    
    var detachConfigurationChildRouterCallCount = 0
    var detachConfigurationChildRouterHandler: (() -> ())?
    func detachConfigurationChildRouter()  {
        detachConfigurationChildRouterCallCount += 1
    
        if let detachConfigurationChildRouterHandler = detachConfigurationChildRouterHandler {
            detachConfigurationChildRouterHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class OutOfCoveragePresentableListenerMock: OutOfCoveragePresentableListener {

    

    init() {

    }
    
}

class MenuViewControllerListenerMock: MenuViewControllerListener {

    

    init() {

    }
        
    var viewDidLoadCallCount = 0
    var viewDidLoadHandler: (() -> ())?
    func viewDidLoad()  {
        viewDidLoadCallCount += 1
    
        if let viewDidLoadHandler = viewDidLoadHandler {
            viewDidLoadHandler()
        }
        
    }
    
    var didSelectItemCallCount = 0
    var didSelectItemHandler: ((IndexPath) -> ())?
    func didSelectItem(atIndexPath indexPath: IndexPath)  {
        didSelectItemCallCount += 1
    
        if let didSelectItemHandler = didSelectItemHandler {
            didSelectItemHandler(indexPath)
        }
        
    }
    
    var didTapCloseCallCount = 0
    var didTapCloseHandler: (((() -> ())?) -> ())?
    func didTapClose(completion: (() -> ())?)  {
        didTapCloseCallCount += 1
    
        if let didTapCloseHandler = didTapCloseHandler {
            didTapCloseHandler(completion)
        }
        
    }
    
    var didTapMenuHeaderCallCount = 0
    var didTapMenuHeaderHandler: (() -> ())?
    func didTapMenuHeader()  {
        didTapMenuHeaderCallCount += 1
    
        if let didTapMenuHeaderHandler = didTapMenuHeaderHandler {
            didTapMenuHeaderHandler()
        }
        
    }
}

public class RideContextStreamingMock: RideContextStreaming {

    
    public init() {}
    public init(context: Observable<RideContext> = PublishSubject()) {
        self.context = context
    }
        
    private var contextSubjectKind = 0
    var contextSubjectSetCallCount = 0
    var contextSubject = PublishSubject<RideContext>() { didSet { contextSubjectSetCallCount += 1 } }
    var contextReplaySubject = ReplaySubject<RideContext>.create(bufferSize: 1) { didSet { contextSubjectSetCallCount += 1 } }
    var contextBehaviorSubject: BehaviorSubject<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    var contextRxSubject: Observable<RideContext>! { didSet { contextSubjectSetCallCount += 1 } }
    public var context: Observable<RideContext> {
        get {
            if contextSubjectKind == 0 {
                return contextSubject
            } else if contextSubjectKind == 1 {
                return contextBehaviorSubject
            } else if contextSubjectKind == 2 {
                return contextReplaySubject
            } else {
                return contextRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RideContext> {
                contextSubject = val
                contextSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RideContext> {
                contextBehaviorSubject = val
                contextSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RideContext> {
                contextReplaySubject = val
                contextSubjectKind = 2
            } else {
                contextRxSubject = newValue
                contextSubjectKind = 3
            }
        }
    }
}

class ModeSourceStreamingMock: ModeSourceStreaming {

    
    init() {}
    init(availableModesSource: Observable<[Mode]> = PublishSubject()) {
        self.availableModesSource = availableModesSource
    }
        
    private var availableModesSourceSubjectKind = 0
    var availableModesSourceSubjectSetCallCount = 0
    var availableModesSourceSubject = PublishSubject<[Mode]>() { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSourceReplaySubject = ReplaySubject<[Mode]>.create(bufferSize: 1) { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSourceBehaviorSubject: BehaviorSubject<[Mode]>! { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSourceRxSubject: Observable<[Mode]>! { didSet { availableModesSourceSubjectSetCallCount += 1 } }
    var availableModesSource: Observable<[Mode]> {
        get {
            if availableModesSourceSubjectKind == 0 {
                return availableModesSourceSubject
            } else if availableModesSourceSubjectKind == 1 {
                return availableModesSourceBehaviorSubject
            } else if availableModesSourceSubjectKind == 2 {
                return availableModesSourceReplaySubject
            } else {
                return availableModesSourceRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<[Mode]> {
                availableModesSourceSubject = val
                availableModesSourceSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<[Mode]> {
                availableModesSourceBehaviorSubject = val
                availableModesSourceSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<[Mode]> {
                availableModesSourceReplaySubject = val
                availableModesSourceSubjectKind = 2
            } else {
                availableModesSourceRxSubject = newValue
                availableModesSourceSubjectKind = 3
            }
        }
    }
}

public class SelectedProductLeadingButtonStreamingMock: SelectedProductLeadingButtonStreaming {

    
    public init() {}
    public init(leadingButtonTappedStream: Observable<()> = PublishSubject()) {
        self.leadingButtonTappedStream = leadingButtonTappedStream
    }
        
    private var leadingButtonTappedStreamSubjectKind = 0
    var leadingButtonTappedStreamSubjectSetCallCount = 0
    var leadingButtonTappedStreamSubject = PublishSubject<()>() { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamReplaySubject = ReplaySubject<()>.create(bufferSize: 1) { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamBehaviorSubject: BehaviorSubject<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    var leadingButtonTappedStreamRxSubject: Observable<()>! { didSet { leadingButtonTappedStreamSubjectSetCallCount += 1 } }
    public var leadingButtonTappedStream: Observable<()> {
        get {
            if leadingButtonTappedStreamSubjectKind == 0 {
                return leadingButtonTappedStreamSubject
            } else if leadingButtonTappedStreamSubjectKind == 1 {
                return leadingButtonTappedStreamBehaviorSubject
            } else if leadingButtonTappedStreamSubjectKind == 2 {
                return leadingButtonTappedStreamReplaySubject
            } else {
                return leadingButtonTappedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<()> {
                leadingButtonTappedStreamSubject = val
                leadingButtonTappedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<()> {
                leadingButtonTappedStreamBehaviorSubject = val
                leadingButtonTappedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<()> {
                leadingButtonTappedStreamReplaySubject = val
                leadingButtonTappedStreamSubjectKind = 2
            } else {
                leadingButtonTappedStreamRxSubject = newValue
                leadingButtonTappedStreamSubjectKind = 3
            }
        }
    }
}

class HomeInteractableV2Mock: HomeInteractableV2 {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: HomeRoutingV2? = nil
    var router: HomeRoutingV2? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var acceleratorsListenerSetCallCount = 0
    var underlyingAcceleratorsListener: AcceleratorsListener? = nil
    var acceleratorsListener: AcceleratorsListener? {
        get {
            return underlyingAcceleratorsListener
        }
        set {
            underlyingAcceleratorsListener = newValue
            acceleratorsListenerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: HomeListenerV2? = nil
    var listener: HomeListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var wantAvailableSizeCallCount = 0
public var wantAvailableSizeHandler: ((Bool) -> (CGSize?))?
public func wantAvailableSize(_ toScreenTop: Bool) -> CGSize? {
        wantAvailableSizeCallCount += 1
    
        if let wantAvailableSizeHandler = wantAvailableSizeHandler {
            return wantAvailableSizeHandler(toScreenTop)
        }
        return nil
    }
var wantUpdateDimCallCount = 0
public var wantUpdateDimHandler: ((Bool) -> ())?
public func wantUpdateDim(shouldDim: Bool)  {
        wantUpdateDimCallCount += 1
    
        if let wantUpdateDimHandler = wantUpdateDimHandler {
            wantUpdateDimHandler(shouldDim)
        }
        
    }
var wantUpdateMapPaddingCallCount = 0
public var wantUpdateMapPaddingHandler: (() -> ())?
public func wantUpdateMapPadding()  {
        wantUpdateMapPaddingCallCount += 1
    
        if let wantUpdateMapPaddingHandler = wantUpdateMapPaddingHandler {
            wantUpdateMapPaddingHandler()
        }
        
    }
var wantDestinationCallCount = 0
public var wantDestinationHandler: (() -> ())?
public func wantDestination()  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler()
        }
        
    }
var acceleratorsUpdatedCallCount = 0
public var acceleratorsUpdatedHandler: ((Bool) -> ())?
public func acceleratorsUpdated(availability: Bool)  {
        acceleratorsUpdatedCallCount += 1
    
        if let acceleratorsUpdatedHandler = acceleratorsUpdatedHandler {
            acceleratorsUpdatedHandler(availability)
        }
        
    }
var selectingAcceleratorCompletedCallCount = 0
public var selectingAcceleratorCompletedHandler: (() -> ())?
public func selectingAcceleratorCompleted()  {
        selectingAcceleratorCompletedCallCount += 1
    
        if let selectingAcceleratorCompletedHandler = selectingAcceleratorCompletedHandler {
            selectingAcceleratorCompletedHandler()
        }
        
    }
var wantLocationEditorCallCount = 0
public var wantLocationEditorHandler: ((LocationEditorContext, LocationEditorMode) -> ())?
public func wantLocationEditor(context: LocationEditorContext, mode: LocationEditorMode)  {
        wantLocationEditorCallCount += 1
    
        if let wantLocationEditorHandler = wantLocationEditorHandler {
            wantLocationEditorHandler(context, mode)
        }
        
    }
var waitForLocationEditorEntryCallCount = 0
public var waitForLocationEditorEntryHandler: (() -> (Observable<(LocationEditorEntryActionableItem, ())>))?
public func waitForLocationEditorEntry() -> Observable<(LocationEditorEntryActionableItem, ())> {
        waitForLocationEditorEntryCallCount += 1
    
        if let waitForLocationEditorEntryHandler = waitForLocationEditorEntryHandler {
            return waitForLocationEditorEntryHandler()
        }
        return Observable.empty()
    }
}

class MenuHeaderViewListenerMock: MenuHeaderViewListener {

    

    init() {

    }
        
    var didTapMenuHeaderViewCallCount = 0
    var didTapMenuHeaderViewHandler: ((MenuHeaderView) -> ())?
    func didTapMenuHeaderView(headerView: MenuHeaderView)  {
        didTapMenuHeaderViewCallCount += 1
    
        if let didTapMenuHeaderViewHandler = didTapMenuHeaderViewHandler {
            didTapMenuHeaderViewHandler(headerView)
        }
        
    }
}

class ModeActionableItemHandlingMock: ModeActionableItemHandling {

    

    init() {

    }
        
    var handleCallCount = 0
    var handleHandler: ((Routing) -> ())?
    func handle(router: Routing)  {
        handleCallCount += 1
    
        if let handleHandler = handleHandler {
            handleHandler(router)
        }
        
    }
var waitForModeChildCallCount = 0
public var waitForModeChildHandler: ((ModeType) -> (Any))?
public func waitForModeChild<ActionItemType>(modeType: ModeType) -> Observable<(ActionItemType, ())> {
        waitForModeChildCallCount += 1
    
        if let waitForModeChildHandler = waitForModeChildHandler {
            return waitForModeChildHandler(modeType) as! Observable<(ActionItemType, ())>
        }
        return Observable.empty()
    }
}

class ProductCatalogTransformingMock: ProductCatalogTransforming {

        private var cachedExperiments: CachedExperimenting!
private var productsStream: ProductsStreaming!
    init() {}
        
    required init(cachedExperiments: CachedExperimenting, productsStream: ProductsStreaming) {
        self.cachedExperiments = cachedExperiments
    self.productsStream = productsStream
    }
private var catalogStreamSubjectKind = 0
var catalogStreamSubjectSetCallCount = 0
var catalogStreamSubject = PublishSubject<ProductCatalogResult>() { didSet { catalogStreamSubjectSetCallCount += 1 } }
var catalogStreamReplaySubject = ReplaySubject<ProductCatalogResult>.create(bufferSize: 1) { didSet { catalogStreamSubjectSetCallCount += 1 } }
var catalogStreamBehaviorSubject: BehaviorSubject<ProductCatalogResult>! { didSet { catalogStreamSubjectSetCallCount += 1 } }
var catalogStreamRxSubject: Observable<ProductCatalogResult>! { didSet { catalogStreamSubjectSetCallCount += 1 } }
public var catalogStream: Observable<ProductCatalogResult> {
        get {
            if catalogStreamSubjectKind == 0 {
                return catalogStreamSubject
            } else if catalogStreamSubjectKind == 1 {
                return catalogStreamBehaviorSubject
            } else if catalogStreamSubjectKind == 2 {
                return catalogStreamReplaySubject
            } else {
                return catalogStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductCatalogResult> {
                catalogStreamSubject = val
                catalogStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductCatalogResult> {
                catalogStreamBehaviorSubject = val
                catalogStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductCatalogResult> {
                catalogStreamReplaySubject = val
                catalogStreamSubjectKind = 2
            } else {
                catalogStreamRxSubject = newValue
                catalogStreamSubjectKind = 3
            }
        }
    }
}

class ProductFareBreakdownViewControllerListenerMock: ProductFareBreakdownViewControllerListener {

    

    init() {

    }
        
    var fareBreakdownViewControllerCallCount = 0
    var fareBreakdownViewControllerHandler: ((ViewController, PricingLabel, ProductId, String?, FareBindingType) -> ())?
    func fareBreakdownViewController(fareBreakdownViewController: ViewController, didConfigurePricingView pricingView: PricingLabel, associatedId: ProductId, placeholder: String?, bindingType: FareBindingType)  {
        fareBreakdownViewControllerCallCount += 1
    
        if let fareBreakdownViewControllerHandler = fareBreakdownViewControllerHandler {
            fareBreakdownViewControllerHandler(fareBreakdownViewController, pricingView, associatedId, placeholder, bindingType)
        }
        
    }
}

class OutOfCoveragePresentableMock: OutOfCoveragePresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: OutOfCoveragePresentableListener? = nil
    var listener: OutOfCoveragePresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class TripDetailsPresentableListenerMock: TripDetailsPresentableListener {

    

    init() {

    }
        
    var willDisplayTripDetailsCardCallCount = 0
    var willDisplayTripDetailsCardHandler: (() -> ())?
    func willDisplayTripDetailsCard()  {
        willDisplayTripDetailsCardCallCount += 1
    
        if let willDisplayTripDetailsCardHandler = willDisplayTripDetailsCardHandler {
            willDisplayTripDetailsCardHandler()
        }
        
    }
}

class ConfirmationAlertPresentableListenerMock: ConfirmationAlertPresentableListener {

    

    init() {

    }
        
    var confirmationAlertPresentableDidConfigurePricingLabelCallCount = 0
    var confirmationAlertPresentableDidConfigurePricingLabelHandler: ((PricingLabel, FareBindingType, ProductConfigurationHash) -> ())?
    func confirmationAlertPresentableDidConfigurePricingLabel(_ pricingLabel: PricingLabel, fareBindingType: FareBindingType, hash: ProductConfigurationHash)  {
        confirmationAlertPresentableDidConfigurePricingLabelCallCount += 1
    
        if let confirmationAlertPresentableDidConfigurePricingLabelHandler = confirmationAlertPresentableDidConfigurePricingLabelHandler {
            confirmationAlertPresentableDidConfigurePricingLabelHandler(pricingLabel, fareBindingType, hash)
        }
        
    }
    
    var clearBindingCallCount = 0
    var clearBindingHandler: ((PricingLabel) -> ())?
    func clearBinding(fromPricingLabel pricingLabel: PricingLabel)  {
        clearBindingCallCount += 1
    
        if let clearBindingHandler = clearBindingHandler {
            clearBindingHandler(pricingLabel)
        }
        
    }
}

class MutableSelectedProductPackageStreamingMock: MutableSelectedProductPackageStreaming {

    
    init() {}
    init(selectedProductPackage: Observable<ProductPackage> = PublishSubject()) {
        self.selectedProductPackage = selectedProductPackage
    }
        
    private var selectedProductPackageSubjectKind = 0
    var selectedProductPackageSubjectSetCallCount = 0
    var selectedProductPackageSubject = PublishSubject<ProductPackage>() { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageReplaySubject = ReplaySubject<ProductPackage>.create(bufferSize: 1) { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageBehaviorSubject: BehaviorSubject<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    var selectedProductPackageRxSubject: Observable<ProductPackage>! { didSet { selectedProductPackageSubjectSetCallCount += 1 } }
    public var selectedProductPackage: Observable<ProductPackage> {
        get {
            if selectedProductPackageSubjectKind == 0 {
                return selectedProductPackageSubject
            } else if selectedProductPackageSubjectKind == 1 {
                return selectedProductPackageBehaviorSubject
            } else if selectedProductPackageSubjectKind == 2 {
                return selectedProductPackageReplaySubject
            } else {
                return selectedProductPackageRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductPackage> {
                selectedProductPackageSubject = val
                selectedProductPackageSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductPackage> {
                selectedProductPackageBehaviorSubject = val
                selectedProductPackageSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductPackage> {
                selectedProductPackageReplaySubject = val
                selectedProductPackageSubjectKind = 2
            } else {
                selectedProductPackageRxSubject = newValue
                selectedProductPackageSubjectKind = 3
            }
        }
    }
    
    var updateSelectedProductPackageCallCount = 0
    var updateSelectedProductPackageHandler: ((ProductPackage) -> ())?
    func updateSelectedProductPackage(_ productPackage: ProductPackage)  {
        updateSelectedProductPackageCallCount += 1
    
        if let updateSelectedProductPackageHandler = updateSelectedProductPackageHandler {
            updateSelectedProductPackageHandler(productPackage)
        }
        
    }
}

class RootInteractableMock: RootInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: RootRouting? = nil
    var router: RootRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var applicationCallCount = 0
    var applicationHandler: ((UIApplication, URL, String?, AnyObject?) -> ())?
    func application(application: UIApplication, openURL url: URL, sourceApplication: String?, annotation: AnyObject?)  {
        applicationCallCount += 1
    
        if let applicationHandler = applicationHandler {
            applicationHandler(application, url, sourceApplication, annotation)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class HomeRoutingV2Mock: HomeRoutingV2 {

    
    init() {}
    init(actionableItem: HomeActionableItemV2 = HomeActionableItemV2Mock(), interactor: HomeInteractableV2 = HomeInteractableV2Mock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.actionableItem = actionableItem
        self.interactor = interactor
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var actionableItemSetCallCount = 0
    var underlyingActionableItem: HomeActionableItemV2 = HomeActionableItemV2Mock()
    var actionableItem: HomeActionableItemV2 {
        get {
            return underlyingActionableItem
        }
        set {
            underlyingActionableItem = newValue
            actionableItemSetCallCount += 1
        }
    }
    
    var interactorSetCallCount = 0
    var underlyingInteractor: HomeInteractableV2 = HomeInteractableV2Mock()
    var interactor: HomeInteractableV2 {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeFromScheduledRidesHomeEntryCallCount = 0
    var routeFromScheduledRidesHomeEntryHandler: (() -> ())?
    func routeFromScheduledRidesHomeEntry()  {
        routeFromScheduledRidesHomeEntryCallCount += 1
    
        if let routeFromScheduledRidesHomeEntryHandler = routeFromScheduledRidesHomeEntryHandler {
            routeFromScheduledRidesHomeEntryHandler()
        }
        
    }
    
    var routeToScheduledRidesHomeEntryCallCount = 0
    var routeToScheduledRidesHomeEntryHandler: ((ScheduledRidesHomeEntryBuildable) -> ())?
    func routeToScheduledRidesHomeEntry(builder: ScheduledRidesHomeEntryBuildable)  {
        routeToScheduledRidesHomeEntryCallCount += 1
    
        if let routeToScheduledRidesHomeEntryHandler = routeToScheduledRidesHomeEntryHandler {
            routeToScheduledRidesHomeEntryHandler(builder)
        }
        
    }
    
    var routeFromAcceleratorsCallCount = 0
    var routeFromAcceleratorsHandler: (() -> ())?
    func routeFromAccelerators()  {
        routeFromAcceleratorsCallCount += 1
    
        if let routeFromAcceleratorsHandler = routeFromAcceleratorsHandler {
            routeFromAcceleratorsHandler()
        }
        
    }
    
    var routeToAcceleratorsCallCount = 0
    var routeToAcceleratorsHandler: ((AcceleratorsBuildable) -> ())?
    func routeToAccelerators(builder: AcceleratorsBuildable)  {
        routeToAcceleratorsCallCount += 1
    
        if let routeToAcceleratorsHandler = routeToAcceleratorsHandler {
            routeToAcceleratorsHandler(builder)
        }
        
    }
    
    var routeFromLocationEditorEntryCallCount = 0
    var routeFromLocationEditorEntryHandler: (() -> ())?
    func routeFromLocationEditorEntry()  {
        routeFromLocationEditorEntryCallCount += 1
    
        if let routeFromLocationEditorEntryHandler = routeFromLocationEditorEntryHandler {
            routeFromLocationEditorEntryHandler()
        }
        
    }
    
    var routeToLocationEditorEntryCallCount = 0
    var routeToLocationEditorEntryHandler: ((LocationEditorEntryBuildable) -> (LocationEditorEntryActionableItem))?
    func routeToLocationEditorEntry(builder: LocationEditorEntryBuildable) -> LocationEditorEntryActionableItem {
        routeToLocationEditorEntryCallCount += 1
    
        if let routeToLocationEditorEntryHandler = routeToLocationEditorEntryHandler {
            return routeToLocationEditorEntryHandler(builder)
        }
        return LocationEditorEntryActionableItemMock()
    }
    
    var routeFromRewardsRiderStatusBarCallCount = 0
    var routeFromRewardsRiderStatusBarHandler: (() -> ())?
    func routeFromRewardsRiderStatusBar()  {
        routeFromRewardsRiderStatusBarCallCount += 1
    
        if let routeFromRewardsRiderStatusBarHandler = routeFromRewardsRiderStatusBarHandler {
            routeFromRewardsRiderStatusBarHandler()
        }
        
    }
    
    var routeToRewardsRiderStatusBarCallCount = 0
    var routeToRewardsRiderStatusBarHandler: ((RewardsRiderStatusBarCardHaloBuildable) -> ())?
    func routeToRewardsRiderStatusBar(builder: RewardsRiderStatusBarCardHaloBuildable)  {
        routeToRewardsRiderStatusBarCallCount += 1
    
        if let routeToRewardsRiderStatusBarHandler = routeToRewardsRiderStatusBarHandler {
            routeToRewardsRiderStatusBarHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((HomeMapBuildable) -> ())?
    func routeToMap(builder: HomeMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeFromTopRowCallCount = 0
    var routeFromTopRowHandler: (() -> ())?
    func routeFromTopRow()  {
        routeFromTopRowCallCount += 1
    
        if let routeFromTopRowHandler = routeFromTopRowHandler {
            routeFromTopRowHandler()
        }
        
    }
    
    var routeToTopRowCallCount = 0
    var routeToTopRowHandler: ((TopRowBuildable) -> ())?
    func routeToTopRow(builder: TopRowBuildable)  {
        routeToTopRowCallCount += 1
    
        if let routeToTopRowHandler = routeToTopRowHandler {
            routeToTopRowHandler(builder)
        }
        
    }
    
    var updateCommunicationBannerCallCount = 0
    var updateCommunicationBannerHandler: ((BannerViewState) -> ())?
    func updateCommunicationBanner(viewState: BannerViewState)  {
        updateCommunicationBannerCallCount += 1
    
        if let updateCommunicationBannerHandler = updateCommunicationBannerHandler {
            updateCommunicationBannerHandler(viewState)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ProductSelectionAnnotationManagingMock: ProductSelectionAnnotationManaging {

    

    init() {

    }
        
    var createProductAnnotationsMapCallCount = 0
    var createProductAnnotationsMapHandler: ((ProductCatalog, ProductFareDisplayContextMap?, ProductViewEmphasisMap?) -> (ProductAnnotationsMap))?
    func createProductAnnotationsMap(catalog: ProductCatalog, fareDisplayContextMap: ProductFareDisplayContextMap?, productViewEmphasisMap: ProductViewEmphasisMap?) -> ProductAnnotationsMap {
        createProductAnnotationsMapCallCount += 1
    
        if let createProductAnnotationsMapHandler = createProductAnnotationsMapHandler {
            return createProductAnnotationsMapHandler(catalog, fareDisplayContextMap, productViewEmphasisMap)
        }
        fatalError("createProductAnnotationsMapHandler returns can't have a default value thus its handler must be set")
    }
}

public class PersistedStreamLoadingMock: PersistedStreamLoading {

    
    public init() {}
    public init(mutableRiderStream: MutableRiderStreaming = MutableRiderStreamingMock()) {
        self.mutableRiderStream = mutableRiderStream
    }
        
    var mutableRiderStreamSetCallCount = 0
    var underlyingMutableRiderStream: MutableRiderStreaming = MutableRiderStreamingMock()
    public var mutableRiderStream: MutableRiderStreaming {
        get {
            return underlyingMutableRiderStream
        }
        set {
            underlyingMutableRiderStream = newValue
            mutableRiderStreamSetCallCount += 1
        }
    }
    
    var clearCallCount = 0
    public var clearHandler: (() -> ())?
    public func clear()  {
        clearCallCount += 1
    
        if let clearHandler = clearHandler {
            clearHandler()
        }
        
    }
}

class BaseRequestErrorHandlerPresenterListenerMock: BaseRequestErrorHandlerPresenterListener {

    

    init() {

    }
        
    var notifyForDismissCallCount = 0
    var notifyForDismissHandler: (() -> ())?
    func notifyForDismiss()  {
        notifyForDismissCallCount += 1
    
        if let notifyForDismissHandler = notifyForDismissHandler {
            notifyForDismissHandler()
        }
        
    }
}

class ConfirmationNextStepButtonContainerViewListenerMock: ConfirmationNextStepButtonContainerViewListener {

    

    init() {

    }
        
    var getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataCallCount = 0
    var getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler: (() -> (AnalyticsMetadata?))?
    func getConfirmationNextStepButtonContainerViewTapAnalyticsMetadata() -> AnalyticsMetadata? {
        getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataCallCount += 1
    
        if let getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler = getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler {
            return getConfirmationNextStepButtonContainerViewTapAnalyticsMetadataHandler()
        }
        return nil
    }
}

class ProductUpsellViewControllerListenerMock: ProductUpsellViewControllerListener {

    

    init() {

    }
        
    var upsellViewControllerCallCount = 0
    var upsellViewControllerHandler: ((ProductUpsellViewController, Upsell) -> ())?
    func upsellViewController(viewController: ProductUpsellViewController, didConfirmUpsell upsell: Upsell)  {
        upsellViewControllerCallCount += 1
    
        if let upsellViewControllerHandler = upsellViewControllerHandler {
            upsellViewControllerHandler(viewController, upsell)
        }
        
    }
    
    var upsellViewControllerDidTapLinkWithURLCallCount = 0
    var upsellViewControllerDidTapLinkWithURLHandler: ((ProductUpsellViewController, URL?) -> ())?
    func upsellViewController(viewController: ProductUpsellViewController, didTapLinkWithURL url: URL?)  {
        upsellViewControllerDidTapLinkWithURLCallCount += 1
    
        if let upsellViewControllerDidTapLinkWithURLHandler = upsellViewControllerDidTapLinkWithURLHandler {
            upsellViewControllerDidTapLinkWithURLHandler(viewController, url)
        }
        
    }
}

class MenuInteractableMock: MenuInteractable {

    
    init() {}
    init(menuItemsReadyStream: Observable<Bool> = PublishSubject(), isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.menuItemsReadyStream = menuItemsReadyStream
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: MenuRouting? = nil
    var router: MenuRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: MenuListener? = nil
    var listener: MenuListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    private var menuItemsReadyStreamSubjectKind = 0
    var menuItemsReadyStreamSubjectSetCallCount = 0
    var menuItemsReadyStreamSubject = PublishSubject<Bool>() { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStreamRxSubject: Observable<Bool>! { didSet { menuItemsReadyStreamSubjectSetCallCount += 1 } }
    var menuItemsReadyStream: Observable<Bool> {
        get {
            if menuItemsReadyStreamSubjectKind == 0 {
                return menuItemsReadyStreamSubject
            } else if menuItemsReadyStreamSubjectKind == 1 {
                return menuItemsReadyStreamBehaviorSubject
            } else if menuItemsReadyStreamSubjectKind == 2 {
                return menuItemsReadyStreamReplaySubject
            } else {
                return menuItemsReadyStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                menuItemsReadyStreamSubject = val
                menuItemsReadyStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                menuItemsReadyStreamBehaviorSubject = val
                menuItemsReadyStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                menuItemsReadyStreamReplaySubject = val
                menuItemsReadyStreamSubjectKind = 2
            } else {
                menuItemsReadyStreamRxSubject = newValue
                menuItemsReadyStreamSubjectKind = 3
            }
        }
    }
var dismissCallCount = 0
public var dismissHandler: (((() -> Void)?) -> ())?
public func dismiss(_ completion: (() -> Void)?)  {
        dismissCallCount += 1
    
        if let dismissHandler = dismissHandler {
            dismissHandler(completion)
        }
        
    }
var showTopMenuItemDetailCallCount = 0
public var showTopMenuItemDetailHandler: ((ViewableRouting, Bool) -> ())?
public func showTopMenuItemDetail(for router: ViewableRouting, fullScreen: Bool)  {
        showTopMenuItemDetailCallCount += 1
    
        if let showTopMenuItemDetailHandler = showTopMenuItemDetailHandler {
            showTopMenuItemDetailHandler(router, fullScreen)
        }
        
    }
var dismissTopMenuItemDetailCallCount = 0
public var dismissTopMenuItemDetailHandler: (((() -> ())?) -> ())?
public func dismissTopMenuItemDetail(completion: (() -> ())?)  {
        dismissTopMenuItemDetailCallCount += 1
    
        if let dismissTopMenuItemDetailHandler = dismissTopMenuItemDetailHandler {
            dismissTopMenuItemDetailHandler(completion)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var wantDismissHubMessagingCallCount = 0
public var wantDismissHubMessagingHandler: (() -> ())?
public func wantDismissHubMessaging()  {
        wantDismissHubMessagingCallCount += 1
    
        if let wantDismissHubMessagingHandler = wantDismissHubMessagingHandler {
            wantDismissHubMessagingHandler()
        }
        
    }
var wantPresentHubMessagingCallCount = 0
public var wantPresentHubMessagingHandler: ((HubMessagingRouting) -> ())?
public func wantPresentHubMessaging(router: HubMessagingRouting)  {
        wantPresentHubMessagingCallCount += 1
    
        if let wantPresentHubMessagingHandler = wantPresentHubMessagingHandler {
            wantPresentHubMessagingHandler(router)
        }
        
    }
var routeToRiderInfoDetailCallCount = 0
public var routeToRiderInfoDetailHandler: ((UIViewController) -> ())?
public func routeToRiderInfoDetail(withViewController viewController: UIViewController)  {
        routeToRiderInfoDetailCallCount += 1
    
        if let routeToRiderInfoDetailHandler = routeToRiderInfoDetailHandler {
            routeToRiderInfoDetailHandler(viewController)
        }
        
    }
var routeAwayFromRiderInfoDetailCallCount = 0
public var routeAwayFromRiderInfoDetailHandler: (() -> ())?
public func routeAwayFromRiderInfoDetail()  {
        routeAwayFromRiderInfoDetailCallCount += 1
    
        if let routeAwayFromRiderInfoDetailHandler = routeAwayFromRiderInfoDetailHandler {
            routeAwayFromRiderInfoDetailHandler()
        }
        
    }
var openMenuItemCallCount = 0
public var openMenuItemHandler: ((MenuItemType) -> (Observable<(MenuItemActionableItem, ())>))?
public func openMenuItem(menuItemType: MenuItemType) -> Observable<(MenuItemActionableItem, ())> {
        openMenuItemCallCount += 1
    
        if let openMenuItemHandler = openMenuItemHandler {
            return openMenuItemHandler(menuItemType)
        }
        return Observable.empty()
    }
}

class TripRequestManagerMock: TripRequestManager {

    
    init() {}
    init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
        
    var sendCallCount = 0
    var sendHandler: ((PickupRequestV2, CoreShared.Product?) -> ())?
    func send(pickupRequest: PickupRequestV2, product: CoreShared.Product?)  {
        sendCallCount += 1
    
        if let sendHandler = sendHandler {
            sendHandler(pickupRequest, product)
        }
        
    }
    
    var cancelCallCount = 0
    var cancelHandler: (() -> ())?
    func cancel()  {
        cancelCallCount += 1
    
        if let cancelHandler = cancelHandler {
            cancelHandler()
        }
        
    }
    
    var completeTripIfNeededCallCount = 0
    var completeTripIfNeededHandler: ((String, TripUuid) -> ())?
    func completeTripIfNeeded(riderUUID: String, tripUUID: TripUuid)  {
        completeTripIfNeededCallCount += 1
    
        if let completeTripIfNeededHandler = completeTripIfNeededHandler {
            completeTripIfNeededHandler(riderUUID, tripUUID)
        }
        
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
var tripRequestStatusProducerDidProduceStatusCallCount = 0
public var tripRequestStatusProducerDidProduceStatusHandler: ((TripRequestStatus) -> ())?
public func tripRequestStatusProducerDidProduceStatus(_ status: TripRequestStatus)  {
        tripRequestStatusProducerDidProduceStatusCallCount += 1
    
        if let tripRequestStatusProducerDidProduceStatusHandler = tripRequestStatusProducerDidProduceStatusHandler {
            tripRequestStatusProducerDidProduceStatusHandler(status)
        }
        
    }
var tripRequestStatusProducerShouldResetStatusCallCount = 0
public var tripRequestStatusProducerShouldResetStatusHandler: (() -> ())?
public func tripRequestStatusProducerShouldResetStatus()  {
        tripRequestStatusProducerShouldResetStatusCallCount += 1
    
        if let tripRequestStatusProducerShouldResetStatusHandler = tripRequestStatusProducerShouldResetStatusHandler {
            tripRequestStatusProducerShouldResetStatusHandler()
        }
        
    }
}

public class PickupRequestMiddlewareManagingMock: PickupRequestMiddlewareManaging {

    
    public init() {}
    public init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject()) {
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }
    var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
}

class ProductSelectionRoutingV2Mock: ProductSelectionRoutingV2 {

    
    init() {}
    init(interactor: ProductSelectionInteractableV2 = ProductSelectionInteractableV2Mock(), viewController: ProductSelectionViewControllableV2 = ProductSelectionViewControllableV2Mock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.viewController = viewController
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ProductSelectionInteractableV2 = ProductSelectionInteractableV2Mock()
    var interactor: ProductSelectionInteractableV2 {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: ProductSelectionViewControllableV2 = ProductSelectionViewControllableV2Mock()
    var viewController: ProductSelectionViewControllableV2 {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class MenuViewControllableMock: MenuViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MenuViewControllerListener? = nil
    var listener: MenuViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var reloadMenuTableViewCallCount = 0
    var reloadMenuTableViewHandler: (() -> ())?
    func reloadMenuTableView()  {
        reloadMenuTableViewCallCount += 1
    
        if let reloadMenuTableViewHandler = reloadMenuTableViewHandler {
            reloadMenuTableViewHandler()
        }
        
    }
    
    var setClientDataCallCount = 0
    var setClientDataHandler: ((MenuHeaderView.Data) -> ())?
    func setClientData(data: MenuHeaderView.Data)  {
        setClientDataCallCount += 1
    
        if let setClientDataHandler = setClientDataHandler {
            setClientDataHandler(data)
        }
        
    }
    
    var dismissCallCount = 0
    var dismissHandler: ((Bool, (() -> ())?) -> ())?
    func dismiss(animated flag: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
    
        if let dismissHandler = dismissHandler {
            dismissHandler(flag, completion)
        }
        
    }
    
    var showMenuItemCallCount = 0
    var showMenuItemHandler: ((UIViewController, ((ThemeableNavigationViewController, PlatformUI.Theme) -> ())?, Bool, Bool, (() -> ())?) -> ())?
    func showMenuItem(withViewController viewController: UIViewController, style: ((ThemeableNavigationViewController, PlatformUI.Theme) -> ())?, animated: Bool, shouldShowInFullScreen: Bool, completion: (() -> ())?)  {
        showMenuItemCallCount += 1
    
        if let showMenuItemHandler = showMenuItemHandler {
            showMenuItemHandler(viewController, style, animated, shouldShowInFullScreen, completion)
        }
        
    }
    
    var showMenuItemV2CallCount = 0
    var showMenuItemV2Handler: ((UIViewController, Bool, NavigationViewType, (() -> ())?) -> ())?
    func showMenuItemV2(withViewController viewController: UIViewController, animated: Bool, containerType: NavigationViewType, completion: (() -> ())?)  {
        showMenuItemV2CallCount += 1
    
        if let showMenuItemV2Handler = showMenuItemV2Handler {
            showMenuItemV2Handler(viewController, animated, containerType, completion)
        }
        
    }
    
    var hideDisplayedMenuItemCallCount = 0
    var hideDisplayedMenuItemHandler: (((() -> ())?) -> ())?
    func hideDisplayedMenuItem(completion: (() -> ())?)  {
        hideDisplayedMenuItemCallCount += 1
    
        if let hideDisplayedMenuItemHandler = hideDisplayedMenuItemHandler {
            hideDisplayedMenuItemHandler(completion)
        }
        
    }
    
    var presentRiderInfoCallCount = 0
    var presentRiderInfoHandler: ((ViewControllable?) -> ())?
    func presentRiderInfo(viewControllable: ViewControllable?)  {
        presentRiderInfoCallCount += 1
    
        if let presentRiderInfoHandler = presentRiderInfoHandler {
            presentRiderInfoHandler(viewControllable)
        }
        
    }
    
    var dismissHubMessagingMenuItemCallCount = 0
    var dismissHubMessagingMenuItemHandler: (() -> ())?
    func dismissHubMessagingMenuItem()  {
        dismissHubMessagingMenuItemCallCount += 1
    
        if let dismissHubMessagingMenuItemHandler = dismissHubMessagingMenuItemHandler {
            dismissHubMessagingMenuItemHandler()
        }
        
    }
    
    var presentHubMessagingMenuItemCallCount = 0
    var presentHubMessagingMenuItemHandler: ((ViewControllable) -> ())?
    func presentHubMessagingMenuItem(viewController: ViewControllable)  {
        presentHubMessagingMenuItemCallCount += 1
    
        if let presentHubMessagingMenuItemHandler = presentHubMessagingMenuItemHandler {
            presentHubMessagingMenuItemHandler(viewController)
        }
        
    }
var uiviewControllerSetCallCount = 0
    
    var showTopMenuItemCallCount = 0
    var showTopMenuItemHandler: ((ViewControllable?) -> ())?
    func showTopMenuItem(with viewController: ViewControllable?)  {
        showTopMenuItemCallCount += 1
    
        if let showTopMenuItemHandler = showTopMenuItemHandler {
            showTopMenuItemHandler(viewController)
        }
        
    }
var underlyingUiviewController: UIViewController = UIViewController()
    
    var hideTopMenuItemCallCount = 0
    var hideTopMenuItemHandler: (() -> ())?
    func hideTopMenuItem()  {
        hideTopMenuItemCallCount += 1
    
        if let hideTopMenuItemHandler = hideTopMenuItemHandler {
            hideTopMenuItemHandler()
        }
        
    }
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class ConfirmationAlertPresentableMock: ConfirmationAlertPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationAlertPresentableListener? = nil
    var listener: ConfirmationAlertPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateAlertViewModelCallCount = 0
    var updateAlertViewModelHandler: ((ConfirmationAlertViewModel?) -> ())?
    func updateAlertViewModel(_ alertViewModel: ConfirmationAlertViewModel?)  {
        updateAlertViewModelCallCount += 1
    
        if let updateAlertViewModelHandler = updateAlertViewModelHandler {
            updateAlertViewModelHandler(alertViewModel)
        }
        
    }
}

class ProductSelectionViewControllableV2Mock: ProductSelectionViewControllableV2 {

    
    init() {}
    init(recommendedProductsCount: Int = 0, currentState: ProductSelectionViewState, slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0, uiviewController: UIViewController = UIViewController()) {
        self.recommendedProductsCount = recommendedProductsCount
        self.currentState = currentState
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionViewControllableListenerV2? = nil
    var listener: ProductSelectionViewControllableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var recommendedProductsCountSetCallCount = 0
    var underlyingRecommendedProductsCount: Int = 0
    var recommendedProductsCount: Int {
        get {
            return underlyingRecommendedProductsCount
        }
        set {
            underlyingRecommendedProductsCount = newValue
            recommendedProductsCountSetCallCount += 1
        }
    }
    
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ProductSelectionViewState! 
    var currentState: ProductSelectionViewState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
    
    var updateCollectionViewCallCount = 0
    var updateCollectionViewHandler: ((Int, [UICollectionViewCell.Type]) -> ())?
    func updateCollectionView(numberOfCategories: Int, cellTypes: [UICollectionViewCell.Type])  {
        updateCollectionViewCallCount += 1
    
        if let updateCollectionViewHandler = updateCollectionViewHandler {
            updateCollectionViewHandler(numberOfCategories, cellTypes)
        }
        
    }
var uiviewControllerSetCallCount = 0
    
    var updateCollectionViewNumberOfCategoriesCallCount = 0
    var updateCollectionViewNumberOfCategoriesHandler: ((Int) -> ())?
    func updateCollectionView(numberOfCategories: Int)  {
        updateCollectionViewNumberOfCategoriesCallCount += 1
    
        if let updateCollectionViewNumberOfCategoriesHandler = updateCollectionViewNumberOfCategoriesHandler {
            updateCollectionViewNumberOfCategoriesHandler(numberOfCategories)
        }
        
    }
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var updateCollectionViewChangeSetCallCount = 0
    var updateCollectionViewChangeSetHandler: ((StagedChangeset<[ArraySection<ProductSelectionCategoryViewModel, ProductCellDifferentiable>]>, @escaping ([ProductSelectionCategoryViewModel]) -> ()) -> ())?
    func updateCollectionView(changeSet: StagedChangeset<[ArraySection<ProductSelectionCategoryViewModel, ProductCellDifferentiable>]>, setData: @escaping ([ProductSelectionCategoryViewModel]) -> ())  {
        updateCollectionViewChangeSetCallCount += 1
    
        if let updateCollectionViewChangeSetHandler = updateCollectionViewChangeSetHandler {
            updateCollectionViewChangeSetHandler(changeSet, setData)
        }
        
    }
    
    var updateNumberOfRecommendedProductsCallCount = 0
    var updateNumberOfRecommendedProductsHandler: ((Int) -> ())?
    func updateNumberOfRecommendedProducts(_ count: Int)  {
        updateNumberOfRecommendedProductsCallCount += 1
    
        if let updateNumberOfRecommendedProductsHandler = updateNumberOfRecommendedProductsHandler {
            updateNumberOfRecommendedProductsHandler(count)
        }
        
    }
    
    var viewModelUpdatedCallCount = 0
    var viewModelUpdatedHandler: ((Set<IndexPath>) -> ())?
    func viewModelUpdated(atIndexPaths indexPaths: Set<IndexPath>)  {
        viewModelUpdatedCallCount += 1
    
        if let viewModelUpdatedHandler = viewModelUpdatedHandler {
            viewModelUpdatedHandler(indexPaths)
        }
        
    }
    
    var productSelectedCallCount = 0
    var productSelectedHandler: ((IndexPath) -> ())?
    func productSelected(atIndexPath indexPath: IndexPath)  {
        productSelectedCallCount += 1
    
        if let productSelectedHandler = productSelectedHandler {
            productSelectedHandler(indexPath)
        }
        
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var setProductSelectionViewStateCallCount = 0
    var setProductSelectionViewStateHandler: ((ProductSelectionViewState, Bool, (() -> ())?) -> ())?
    func setProductSelectionViewState(_ state: ProductSelectionViewState, animated: Bool, onCompletion: (() -> ())?)  {
        setProductSelectionViewStateCallCount += 1
    
        if let setProductSelectionViewStateHandler = setProductSelectionViewStateHandler {
            setProductSelectionViewStateHandler(state, animated, onCompletion)
        }
        
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
    
    var showAlertViewControllableCallCount = 0
    var showAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showAlertViewControllableCallCount += 1
    
        if let showAlertViewControllableHandler = showAlertViewControllableHandler {
            showAlertViewControllableHandler(alertViewControllable)
        }
        
    }
}

class DeviceLocationWorkingMock: DeviceLocationWorking {

    
    init() {}
    init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject(), location: Observable<CLLocation?> = PublishSubject(), coreAuthorizationStatus: Observable<CLAuthorizationStatus> = PublishSubject(), coreLocation: Observable<UBCoreLocation?> = PublishSubject(), compassHeading: Observable<CLHeading?> = PublishSubject(), deprecatedAuthorizationStatus: Observable<DeviceLocationAuthorizationStatus> = PublishSubject(), error: Observable<Error> = PublishSubject()) {
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
        self.location = location
        self.coreAuthorizationStatus = coreAuthorizationStatus
        self.coreLocation = coreLocation
        self.compassHeading = compassHeading
        self.deprecatedAuthorizationStatus = deprecatedAuthorizationStatus
        self.error = error
    }
    var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
private var locationSubjectKind = 0
var locationSubjectSetCallCount = 0
var locationSubject = PublishSubject<CLLocation?>() { didSet { locationSubjectSetCallCount += 1 } }
var locationReplaySubject = ReplaySubject<CLLocation?>.create(bufferSize: 1) { didSet { locationSubjectSetCallCount += 1 } }
var locationBehaviorSubject: BehaviorSubject<CLLocation?>! { didSet { locationSubjectSetCallCount += 1 } }
var locationRxSubject: Observable<CLLocation?>! { didSet { locationSubjectSetCallCount += 1 } }
public var location: Observable<CLLocation?> {
        get {
            if locationSubjectKind == 0 {
                return locationSubject
            } else if locationSubjectKind == 1 {
                return locationBehaviorSubject
            } else if locationSubjectKind == 2 {
                return locationReplaySubject
            } else {
                return locationRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<CLLocation?> {
                locationSubject = val
                locationSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<CLLocation?> {
                locationBehaviorSubject = val
                locationSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<CLLocation?> {
                locationReplaySubject = val
                locationSubjectKind = 2
            } else {
                locationRxSubject = newValue
                locationSubjectKind = 3
            }
        }
    }
private var coreAuthorizationStatusSubjectKind = 0
var coreAuthorizationStatusSubjectSetCallCount = 0
var coreAuthorizationStatusSubject = PublishSubject<CLAuthorizationStatus>() { didSet { coreAuthorizationStatusSubjectSetCallCount += 1 } }
var coreAuthorizationStatusReplaySubject = ReplaySubject<CLAuthorizationStatus>.create(bufferSize: 1) { didSet { coreAuthorizationStatusSubjectSetCallCount += 1 } }
var coreAuthorizationStatusBehaviorSubject: BehaviorSubject<CLAuthorizationStatus>! { didSet { coreAuthorizationStatusSubjectSetCallCount += 1 } }
var coreAuthorizationStatusRxSubject: Observable<CLAuthorizationStatus>! { didSet { coreAuthorizationStatusSubjectSetCallCount += 1 } }
public var coreAuthorizationStatus: Observable<CLAuthorizationStatus> {
        get {
            if coreAuthorizationStatusSubjectKind == 0 {
                return coreAuthorizationStatusSubject
            } else if coreAuthorizationStatusSubjectKind == 1 {
                return coreAuthorizationStatusBehaviorSubject
            } else if coreAuthorizationStatusSubjectKind == 2 {
                return coreAuthorizationStatusReplaySubject
            } else {
                return coreAuthorizationStatusRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<CLAuthorizationStatus> {
                coreAuthorizationStatusSubject = val
                coreAuthorizationStatusSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<CLAuthorizationStatus> {
                coreAuthorizationStatusBehaviorSubject = val
                coreAuthorizationStatusSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<CLAuthorizationStatus> {
                coreAuthorizationStatusReplaySubject = val
                coreAuthorizationStatusSubjectKind = 2
            } else {
                coreAuthorizationStatusRxSubject = newValue
                coreAuthorizationStatusSubjectKind = 3
            }
        }
    }
var clearLocationOverrideCallCount = 0
public var clearLocationOverrideHandler: (() -> ())?
public func clearLocationOverride()  {
        clearLocationOverrideCallCount += 1
    
        if let clearLocationOverrideHandler = clearLocationOverrideHandler {
            clearLocationOverrideHandler()
        }
        
    }
var setLocationOverrideCallCount = 0
public var setLocationOverrideHandler: ((Double, Double, Double) -> ())?
public func setLocationOverride(latitude: Double, longitude: Double, speed: Double)  {
        setLocationOverrideCallCount += 1
    
        if let setLocationOverrideHandler = setLocationOverrideHandler {
            setLocationOverrideHandler(latitude, longitude, speed)
        }
        
    }
private var coreLocationSubjectKind = 0
var coreLocationSubjectSetCallCount = 0
var coreLocationSubject = PublishSubject<UBCoreLocation?>() { didSet { coreLocationSubjectSetCallCount += 1 } }
var coreLocationReplaySubject = ReplaySubject<UBCoreLocation?>.create(bufferSize: 1) { didSet { coreLocationSubjectSetCallCount += 1 } }
var coreLocationBehaviorSubject: BehaviorSubject<UBCoreLocation?>! { didSet { coreLocationSubjectSetCallCount += 1 } }
var coreLocationRxSubject: Observable<UBCoreLocation?>! { didSet { coreLocationSubjectSetCallCount += 1 } }
public var coreLocation: Observable<UBCoreLocation?> {
        get {
            if coreLocationSubjectKind == 0 {
                return coreLocationSubject
            } else if coreLocationSubjectKind == 1 {
                return coreLocationBehaviorSubject
            } else if coreLocationSubjectKind == 2 {
                return coreLocationReplaySubject
            } else {
                return coreLocationRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<UBCoreLocation?> {
                coreLocationSubject = val
                coreLocationSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<UBCoreLocation?> {
                coreLocationBehaviorSubject = val
                coreLocationSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<UBCoreLocation?> {
                coreLocationReplaySubject = val
                coreLocationSubjectKind = 2
            } else {
                coreLocationRxSubject = newValue
                coreLocationSubjectKind = 3
            }
        }
    }
private var compassHeadingSubjectKind = 0
var compassHeadingSubjectSetCallCount = 0
var compassHeadingSubject = PublishSubject<CLHeading?>() { didSet { compassHeadingSubjectSetCallCount += 1 } }
var compassHeadingReplaySubject = ReplaySubject<CLHeading?>.create(bufferSize: 1) { didSet { compassHeadingSubjectSetCallCount += 1 } }
var compassHeadingBehaviorSubject: BehaviorSubject<CLHeading?>! { didSet { compassHeadingSubjectSetCallCount += 1 } }
var compassHeadingRxSubject: Observable<CLHeading?>! { didSet { compassHeadingSubjectSetCallCount += 1 } }
public var compassHeading: Observable<CLHeading?> {
        get {
            if compassHeadingSubjectKind == 0 {
                return compassHeadingSubject
            } else if compassHeadingSubjectKind == 1 {
                return compassHeadingBehaviorSubject
            } else if compassHeadingSubjectKind == 2 {
                return compassHeadingReplaySubject
            } else {
                return compassHeadingRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<CLHeading?> {
                compassHeadingSubject = val
                compassHeadingSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<CLHeading?> {
                compassHeadingBehaviorSubject = val
                compassHeadingSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<CLHeading?> {
                compassHeadingReplaySubject = val
                compassHeadingSubjectKind = 2
            } else {
                compassHeadingRxSubject = newValue
                compassHeadingSubjectKind = 3
            }
        }
    }
private var deprecatedAuthorizationStatusSubjectKind = 0
var deprecatedAuthorizationStatusSubjectSetCallCount = 0
var deprecatedAuthorizationStatusSubject = PublishSubject<DeviceLocationAuthorizationStatus>() { didSet { deprecatedAuthorizationStatusSubjectSetCallCount += 1 } }
var deprecatedAuthorizationStatusReplaySubject = ReplaySubject<DeviceLocationAuthorizationStatus>.create(bufferSize: 1) { didSet { deprecatedAuthorizationStatusSubjectSetCallCount += 1 } }
var deprecatedAuthorizationStatusBehaviorSubject: BehaviorSubject<DeviceLocationAuthorizationStatus>! { didSet { deprecatedAuthorizationStatusSubjectSetCallCount += 1 } }
var deprecatedAuthorizationStatusRxSubject: Observable<DeviceLocationAuthorizationStatus>! { didSet { deprecatedAuthorizationStatusSubjectSetCallCount += 1 } }
public var deprecatedAuthorizationStatus: Observable<DeviceLocationAuthorizationStatus> {
        get {
            if deprecatedAuthorizationStatusSubjectKind == 0 {
                return deprecatedAuthorizationStatusSubject
            } else if deprecatedAuthorizationStatusSubjectKind == 1 {
                return deprecatedAuthorizationStatusBehaviorSubject
            } else if deprecatedAuthorizationStatusSubjectKind == 2 {
                return deprecatedAuthorizationStatusReplaySubject
            } else {
                return deprecatedAuthorizationStatusRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<DeviceLocationAuthorizationStatus> {
                deprecatedAuthorizationStatusSubject = val
                deprecatedAuthorizationStatusSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<DeviceLocationAuthorizationStatus> {
                deprecatedAuthorizationStatusBehaviorSubject = val
                deprecatedAuthorizationStatusSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<DeviceLocationAuthorizationStatus> {
                deprecatedAuthorizationStatusReplaySubject = val
                deprecatedAuthorizationStatusSubjectKind = 2
            } else {
                deprecatedAuthorizationStatusRxSubject = newValue
                deprecatedAuthorizationStatusSubjectKind = 3
            }
        }
    }
private var errorSubjectKind = 0
var errorSubjectSetCallCount = 0
var errorSubject = PublishSubject<Error>() { didSet { errorSubjectSetCallCount += 1 } }
var errorReplaySubject = ReplaySubject<Error>.create(bufferSize: 1) { didSet { errorSubjectSetCallCount += 1 } }
var errorBehaviorSubject: BehaviorSubject<Error>! { didSet { errorSubjectSetCallCount += 1 } }
var errorRxSubject: Observable<Error>! { didSet { errorSubjectSetCallCount += 1 } }
public var error: Observable<Error> {
        get {
            if errorSubjectKind == 0 {
                return errorSubject
            } else if errorSubjectKind == 1 {
                return errorBehaviorSubject
            } else if errorSubjectKind == 2 {
                return errorReplaySubject
            } else {
                return errorRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Error> {
                errorSubject = val
                errorSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Error> {
                errorBehaviorSubject = val
                errorSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Error> {
                errorReplaySubject = val
                errorSubjectKind = 2
            } else {
                errorRxSubject = newValue
                errorSubjectKind = 3
            }
        }
    }
var locationFilteredCallCount = 0
public var locationFilteredHandler: ((Observable<Bool>) -> (Observable<LocationUpdate>))?
public func locationFiltered(by filter: Observable<Bool>) -> Observable<LocationUpdate> {
        locationFilteredCallCount += 1
    
        if let locationFilteredHandler = locationFilteredHandler {
            return locationFilteredHandler(filter)
        }
        return Observable.empty()
    }
var stopObservingDeviceLocationCallCount = 0
public var stopObservingDeviceLocationHandler: (() -> ())?
public func stopObservingDeviceLocation()  {
        stopObservingDeviceLocationCallCount += 1
    
        if let stopObservingDeviceLocationHandler = stopObservingDeviceLocationHandler {
            stopObservingDeviceLocationHandler()
        }
        
    }
var disableBackgroundLocationUpdatesCallCount = 0
public var disableBackgroundLocationUpdatesHandler: (() -> ())?
public func disableBackgroundLocationUpdates()  {
        disableBackgroundLocationUpdatesCallCount += 1
    
        if let disableBackgroundLocationUpdatesHandler = disableBackgroundLocationUpdatesHandler {
            disableBackgroundLocationUpdatesHandler()
        }
        
    }
var enableBackgroundLocationUpdates_DO_NOT_USECallCount = 0
public var enableBackgroundLocationUpdates_DO_NOT_USEHandler: (() -> ())?
public func enableBackgroundLocationUpdates_DO_NOT_USE()  {
        enableBackgroundLocationUpdates_DO_NOT_USECallCount += 1
    
        if let enableBackgroundLocationUpdates_DO_NOT_USEHandler = enableBackgroundLocationUpdates_DO_NOT_USEHandler {
            enableBackgroundLocationUpdates_DO_NOT_USEHandler()
        }
        
    }
var startObservingDeviceLocationCallCount = 0
public var startObservingDeviceLocationHandler: (() -> ())?
public func startObservingDeviceLocation()  {
        startObservingDeviceLocationCallCount += 1
    
        if let startObservingDeviceLocationHandler = startObservingDeviceLocationHandler {
            startObservingDeviceLocationHandler()
        }
        
    }
}

public class ModeViewListenerMock: ModeViewListener {

    

    public init() {

    }
        
    var embedModeNavigationCallCount = 0
    public var embedModeNavigationHandler: ((ModeNavigationViewControllable) -> ())?
    public func embedModeNavigation(viewController: ModeNavigationViewControllable)  {
        embedModeNavigationCallCount += 1
    
        if let embedModeNavigationHandler = embedModeNavigationHandler {
            embedModeNavigationHandler(viewController)
        }
        
    }
    
    var removeCurrentModeNavigationCallCount = 0
    public var removeCurrentModeNavigationHandler: (() -> ())?
    public func removeCurrentModeNavigation()  {
        removeCurrentModeNavigationCallCount += 1
    
        if let removeCurrentModeNavigationHandler = removeCurrentModeNavigationHandler {
            removeCurrentModeNavigationHandler()
        }
        
    }
var didTransitionCallCount = 0
public var didTransitionHandler: ((UIViewController?, UIViewController?) -> ())?
public func didTransition(fromViewController: UIViewController?, toViewController: UIViewController?)  {
        didTransitionCallCount += 1
    
        if let didTransitionHandler = didTransitionHandler {
            didTransitionHandler(fromViewController, toViewController)
        }
        
    }
}

class ConfirmationPresentableListenerV2Mock: ConfirmationPresentableListenerV2 {

    

    init() {

    }
        
    var didTapDestinationEntryCallCount = 0
    var didTapDestinationEntryHandler: (() -> ())?
    func didTapDestinationEntry()  {
        didTapDestinationEntryCallCount += 1
    
        if let didTapDestinationEntryHandler = didTapDestinationEntryHandler {
            didTapDestinationEntryHandler()
        }
        
    }
var didTapLeadingButtonCallCount = 0
public var didTapLeadingButtonHandler: ((LeadingButton.Mode) -> ())?
public func didTapLeadingButton(_ mode: LeadingButton.Mode)  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler(mode)
        }
        
    }
var shouldHandleLeadingButtonTapCallCount = 0
public var shouldHandleLeadingButtonTapHandler: ((LeadingButton.Mode) -> (Bool))?
public func shouldHandleLeadingButtonTap(_ mode: LeadingButton.Mode) -> Bool {
        shouldHandleLeadingButtonTapCallCount += 1
    
        if let shouldHandleLeadingButtonTapHandler = shouldHandleLeadingButtonTapHandler {
            return shouldHandleLeadingButtonTapHandler(mode)
        }
        return false
    }
}

class ProductSelectionViewControllableListenerV2Mock: ProductSelectionViewControllableListenerV2 {

    

    init() {

    }
        
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: ((IndexPath) -> (ProductSelectionCellViewModel?))?
    func viewModelForCell(at indexPath: IndexPath) -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler(indexPath)
        }
        return nil
    }
    
    var categoryTitleCallCount = 0
    var categoryTitleHandler: ((Int) -> (String?))?
    func categoryTitle(for section: Int) -> String? {
        categoryTitleCallCount += 1
    
        if let categoryTitleHandler = categoryTitleHandler {
            return categoryTitleHandler(section)
        }
        return nil
    }
    
    var numberOfProductsCallCount = 0
    var numberOfProductsHandler: ((Int) -> (Int))?
    func numberOfProducts(inSection section: Int) -> Int {
        numberOfProductsCallCount += 1
    
        if let numberOfProductsHandler = numberOfProductsHandler {
            return numberOfProductsHandler(section)
        }
        return 0
    }
    
    var didSelectCellCallCount = 0
    var didSelectCellHandler: ((IndexPath, ProductSelectionViewState) -> ())?
    func didSelectCell(at indexPath: IndexPath, viewState: ProductSelectionViewState)  {
        didSelectCellCallCount += 1
    
        if let didSelectCellHandler = didSelectCellHandler {
            didSelectCellHandler(indexPath, viewState)
        }
        
    }
    
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didUpdateRecommendedCompareTransitionProgressCallCount = 0
    var didUpdateRecommendedCompareTransitionProgressHandler: (() -> ())?
    func didUpdateRecommendedCompareTransitionProgress()  {
        didUpdateRecommendedCompareTransitionProgressCallCount += 1
    
        if let didUpdateRecommendedCompareTransitionProgressHandler = didUpdateRecommendedCompareTransitionProgressHandler {
            didUpdateRecommendedCompareTransitionProgressHandler()
        }
        
    }
    
    var didUpdateViewStateCallCount = 0
    var didUpdateViewStateHandler: (() -> ())?
    func didUpdateViewState()  {
        didUpdateViewStateCallCount += 1
    
        if let didUpdateViewStateHandler = didUpdateViewStateHandler {
            didUpdateViewStateHandler()
        }
        
    }
    
    var productCellCallCount = 0
    var productCellHandler: ((IndexPath) -> (ProductCell?))?
    func productCell(at indexPath: IndexPath) -> ProductCell? {
        productCellCallCount += 1
    
        if let productCellHandler = productCellHandler {
            return productCellHandler(indexPath)
        }
        return nil
    }
    
    var bindCallCount = 0
    var bindHandler: ((ProductCell, ProductCollectionViewCellDisplayable) -> ())?
    func bind(productCell: ProductCell, viewCell: ProductCollectionViewCellDisplayable)  {
        bindCallCount += 1
    
        if let bindHandler = bindHandler {
            bindHandler(productCell, viewCell)
        }
        
    }
    
    var unbindCallCount = 0
    var unbindHandler: ((ProductCell) -> ())?
    func unbind(productCell: ProductCell)  {
        unbindCallCount += 1
    
        if let unbindHandler = unbindHandler {
            unbindHandler(productCell)
        }
        
    }
}

class MenuRoutingMock: MenuRouting {

    
    init() {}
    init(interactor: MenuInteractable = MenuInteractableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: MenuInteractable = MenuInteractableMock()
    var interactor: MenuInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeToMenuItemCallCount = 0
    var routeToMenuItemHandler: ((MenuItemPresentingInternal) -> ())?
    func routeToMenuItem(item: MenuItemPresentingInternal)  {
        routeToMenuItemCallCount += 1
    
        if let routeToMenuItemHandler = routeToMenuItemHandler {
            routeToMenuItemHandler(item)
        }
        
    }
    
    var routeToMenuItemAnimatedCallCount = 0
    var routeToMenuItemAnimatedHandler: ((MenuItemPresentingInternal, Bool, ((MenuItemActionableItem) -> ())?) -> ())?
    func routeToMenuItem(item: MenuItemPresentingInternal, animated: Bool, completion: ((MenuItemActionableItem) -> ())?)  {
        routeToMenuItemAnimatedCallCount += 1
    
        if let routeToMenuItemAnimatedHandler = routeToMenuItemAnimatedHandler {
            routeToMenuItemAnimatedHandler(item, animated, completion)
        }
        
    }
    
    var detachCurrentMenuItemCallCount = 0
    var detachCurrentMenuItemHandler: (((() -> ())?) -> ())?
    func detachCurrentMenuItem(completion: (() -> ())?)  {
        detachCurrentMenuItemCallCount += 1
    
        if let detachCurrentMenuItemHandler = detachCurrentMenuItemHandler {
            detachCurrentMenuItemHandler(completion)
        }
        
    }
    
    var routeToRiderInfoCallCount = 0
    var routeToRiderInfoHandler: ((RiderInfoPlugin?) -> ())?
    func routeToRiderInfo(riderInfoPlugin: RiderInfoPlugin?)  {
        routeToRiderInfoCallCount += 1
    
        if let routeToRiderInfoHandler = routeToRiderInfoHandler {
            routeToRiderInfoHandler(riderInfoPlugin)
        }
        
    }
    
    var routeToRiderInfoDetailCallCount = 0
    var routeToRiderInfoDetailHandler: ((UIViewController) -> ())?
    func routeToRiderInfoDetail(withViewController viewController: UIViewController)  {
        routeToRiderInfoDetailCallCount += 1
    
        if let routeToRiderInfoDetailHandler = routeToRiderInfoDetailHandler {
            routeToRiderInfoDetailHandler(viewController)
        }
        
    }
    
    var routeAwayFromRiderInfoDetailCallCount = 0
    var routeAwayFromRiderInfoDetailHandler: (() -> ())?
    func routeAwayFromRiderInfoDetail()  {
        routeAwayFromRiderInfoDetailCallCount += 1
    
        if let routeAwayFromRiderInfoDetailHandler = routeAwayFromRiderInfoDetailHandler {
            routeAwayFromRiderInfoDetailHandler()
        }
        
    }
    
    var routeFromHubMessagingCallCount = 0
    var routeFromHubMessagingHandler: (() -> ())?
    func routeFromHubMessaging()  {
        routeFromHubMessagingCallCount += 1
    
        if let routeFromHubMessagingHandler = routeFromHubMessagingHandler {
            routeFromHubMessagingHandler()
        }
        
    }
    
    var routeToHubMessagingCallCount = 0
    var routeToHubMessagingHandler: ((HubMessagingRouting) -> ())?
    func routeToHubMessaging(router: HubMessagingRouting)  {
        routeToHubMessagingCallCount += 1
    
        if let routeToHubMessagingHandler = routeToHubMessagingHandler {
            routeToHubMessagingHandler(router)
        }
        
    }
    
    var routeFromHubMessagingMenuItemCallCount = 0
    var routeFromHubMessagingMenuItemHandler: (() -> ())?
    func routeFromHubMessagingMenuItem()  {
        routeFromHubMessagingMenuItemCallCount += 1
    
        if let routeFromHubMessagingMenuItemHandler = routeFromHubMessagingMenuItemHandler {
            routeFromHubMessagingMenuItemHandler()
        }
        
    }
    
    var routeToHubMessagingMenuItemCallCount = 0
    var routeToHubMessagingMenuItemHandler: ((HubMessagingMenuItemBuildable) -> ())?
    func routeToHubMessagingMenuItem(builder: HubMessagingMenuItemBuildable)  {
        routeToHubMessagingMenuItemCallCount += 1
    
        if let routeToHubMessagingMenuItemHandler = routeToHubMessagingMenuItemHandler {
            routeToHubMessagingMenuItemHandler(builder)
        }
        
    }
    
    var routeToTopMenuItemCallCount = 0
    var routeToTopMenuItemHandler: ((TopMenuItemPluginBuildable) -> ())?
    func routeToTopMenuItem(builder: TopMenuItemPluginBuildable)  {
        routeToTopMenuItemCallCount += 1
    
        if let routeToTopMenuItemHandler = routeToTopMenuItemHandler {
            routeToTopMenuItemHandler(builder)
        }
        
    }
    
    var routeFromTopMenuItemCallCount = 0
    var routeFromTopMenuItemHandler: (() -> ())?
    func routeFromTopMenuItem()  {
        routeFromTopMenuItemCallCount += 1
    
        if let routeFromTopMenuItemHandler = routeFromTopMenuItemHandler {
            routeFromTopMenuItemHandler()
        }
        
    }
    
    var routeToTopMenuItemDetailCallCount = 0
    var routeToTopMenuItemDetailHandler: ((ViewableRouting, Bool) -> ())?
    func routeToTopMenuItemDetail(router: ViewableRouting, fullScreen: Bool)  {
        routeToTopMenuItemDetailCallCount += 1
    
        if let routeToTopMenuItemDetailHandler = routeToTopMenuItemDetailHandler {
            routeToTopMenuItemDetailHandler(router, fullScreen)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class TripInteractableMock: TripInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject(), dispatchingMapAnimatedStream: Observable<Bool> = PublishSubject(), locationEditorDismissToggled: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
        self.dispatchingMapAnimatedStream = dispatchingMapAnimatedStream
        self.locationEditorDismissToggled = locationEditorDismissToggled
    }
        
    var cancelTripWithoutConfirmingCallCount = 0
    var cancelTripWithoutConfirmingHandler: (() -> ())?
    func cancelTripWithoutConfirming()  {
        cancelTripWithoutConfirmingCallCount += 1
    
        if let cancelTripWithoutConfirmingHandler = cancelTripWithoutConfirmingHandler {
            cancelTripWithoutConfirmingHandler()
        }
        
    }
    
    var tripDetailsDidCancelTripCallCount = 0
    var tripDetailsDidCancelTripHandler: (() -> ())?
    func tripDetailsDidCancelTrip()  {
        tripDetailsDidCancelTripCallCount += 1
    
        if let tripDetailsDidCancelTripHandler = tripDetailsDidCancelTripHandler {
            tripDetailsDidCancelTripHandler()
        }
        
    }
    
    var tripDetailsWillPresentEmergencyModalCallCount = 0
    var tripDetailsWillPresentEmergencyModalHandler: (() -> ())?
    func tripDetailsWillPresentEmergencyModal()  {
        tripDetailsWillPresentEmergencyModalCallCount += 1
    
        if let tripDetailsWillPresentEmergencyModalHandler = tripDetailsWillPresentEmergencyModalHandler {
            tripDetailsWillPresentEmergencyModalHandler()
        }
        
    }
    
    var tripDetailsWillDismissEmergencyModalCallCount = 0
    var tripDetailsWillDismissEmergencyModalHandler: ((Bool) -> ())?
    func tripDetailsWillDismissEmergencyModal(userDismissed: Bool)  {
        tripDetailsWillDismissEmergencyModalCallCount += 1
    
        if let tripDetailsWillDismissEmergencyModalHandler = tripDetailsWillDismissEmergencyModalHandler {
            tripDetailsWillDismissEmergencyModalHandler(userDismissed)
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: TripRouting? = nil
    var router: TripRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: TripInteractorListener? = nil
    var listener: TripInteractorListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var displayAlertCallCount = 0
    var displayAlertHandler: ((String?, String) -> ())?
    func displayAlert(title: String?, message: String)  {
        displayAlertCallCount += 1
    
        if let displayAlertHandler = displayAlertHandler {
            displayAlertHandler(title, message)
        }
        
    }
    
    var didAttachFeedCallCount = 0
    var didAttachFeedHandler: ((FeedInteractable) -> ())?
    func didAttachFeed(feedInteractor: FeedInteractable)  {
        didAttachFeedCallCount += 1
    
        if let didAttachFeedHandler = didAttachFeedHandler {
            didAttachFeedHandler(feedInteractor)
        }
        
    }
    
    var didDetachFeedCallCount = 0
    var didDetachFeedHandler: (() -> ())?
    func didDetachFeed()  {
        didDetachFeedCallCount += 1
    
        if let didDetachFeedHandler = didDetachFeedHandler {
            didDetachFeedHandler()
        }
        
    }
var safetyActionSheetCompletedCallCount = 0
public var safetyActionSheetCompletedHandler: ((Bool) -> ())?
public func safetyActionSheetCompleted(shouldCancelTrip: Bool)  {
        safetyActionSheetCompletedCallCount += 1
    
        if let safetyActionSheetCompletedHandler = safetyActionSheetCompletedHandler {
            safetyActionSheetCompletedHandler(shouldCancelTrip)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var dismissFeedPermalinkCallCount = 0
public var dismissFeedPermalinkHandler: (() -> ())?
public func dismissFeedPermalink()  {
        dismissFeedPermalinkCallCount += 1
    
        if let dismissFeedPermalinkHandler = dismissFeedPermalinkHandler {
            dismissFeedPermalinkHandler()
        }
        
    }
var didUpdatePickupLocationCallCount = 0
public var didUpdatePickupLocationHandler: ((RequestLocation) -> ())?
public func didUpdatePickupLocation(location: RequestLocation)  {
        didUpdatePickupLocationCallCount += 1
    
        if let didUpdatePickupLocationHandler = didUpdatePickupLocationHandler {
            didUpdatePickupLocationHandler(location)
        }
        
    }
var didUpdateDestinationLocationsCallCount = 0
public var didUpdateDestinationLocationsHandler: (([RequestLocation]) -> ())?
public func didUpdateDestinationLocations(locations: [RequestLocation])  {
        didUpdateDestinationLocationsCallCount += 1
    
        if let didUpdateDestinationLocationsHandler = didUpdateDestinationLocationsHandler {
            didUpdateDestinationLocationsHandler(locations)
        }
        
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var locationEditorDidFinishCallCount = 0
var deactivateCallCount = 0
public var locationEditorDidFinishHandler: ((Bool) -> ())?
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
public func locationEditorDidFinish(destinationSelected: Bool)  {
        locationEditorDidFinishCallCount += 1
    
        if let locationEditorDidFinishHandler = locationEditorDidFinishHandler {
            locationEditorDidFinishHandler(destinationSelected)
        }
        
    }
var locationEditorDidTapBackCallCount = 0
public var locationEditorDidTapBackHandler: (() -> ())?
public func locationEditorDidTapBack()  {
        locationEditorDidTapBackCallCount += 1
    
        if let locationEditorDidTapBackHandler = locationEditorDidTapBackHandler {
            locationEditorDidTapBackHandler()
        }
        
    }
var tripTrayDidCancelTripCallCount = 0
public var tripTrayDidCancelTripHandler: (() -> ())?
public func tripTrayDidCancelTrip()  {
        tripTrayDidCancelTripCallCount += 1
    
        if let tripTrayDidCancelTripHandler = tripTrayDidCancelTripHandler {
            tripTrayDidCancelTripHandler()
        }
        
    }
var tripCancellationCancelledTripCallCount = 0
public var tripCancellationCancelledTripHandler: (() -> ())?
public func tripCancellationCancelledTrip()  {
        tripCancellationCancelledTripCallCount += 1
    
        if let tripCancellationCancelledTripHandler = tripCancellationCancelledTripHandler {
            tripCancellationCancelledTripHandler()
        }
        
    }
var tripCancellationDidNotCancelTripCallCount = 0
public var tripCancellationDidNotCancelTripHandler: (() -> ())?
public func tripCancellationDidNotCancelTrip()  {
        tripCancellationDidNotCancelTripCallCount += 1
    
        if let tripCancellationDidNotCancelTripHandler = tripCancellationDidNotCancelTripHandler {
            tripCancellationDidNotCancelTripHandler()
        }
        
    }
var tripCancellationDidNotCancelTripGenericLocationEditorConfigurationCallCount = 0
public var tripCancellationDidNotCancelTripGenericLocationEditorConfigurationHandler: ((GenericLocationEditorConfiguration) -> ())?
public func tripCancellationDidNotCancelTrip(genericLocationEditorConfiguration configuration: GenericLocationEditorConfiguration)  {
        tripCancellationDidNotCancelTripGenericLocationEditorConfigurationCallCount += 1
    
        if let tripCancellationDidNotCancelTripGenericLocationEditorConfigurationHandler = tripCancellationDidNotCancelTripGenericLocationEditorConfigurationHandler {
            tripCancellationDidNotCancelTripGenericLocationEditorConfigurationHandler(configuration)
        }
        
    }
var collapseFeedCallCount = 0
public var collapseFeedHandler: (() -> ())?
public func collapseFeed()  {
        collapseFeedCallCount += 1
    
        if let collapseFeedHandler = collapseFeedHandler {
            collapseFeedHandler()
        }
        
    }
var showMapAlertControllerCallCount = 0
public var showMapAlertControllerHandler: ((Bool, ModularMapAlertOptions, @escaping (_ backgroundViews: [UIView]) -> BaseAlertController) -> ())?
public func showMapAlertController(dismissPresentedViewController: Bool, options: ModularMapAlertOptions, alertControllerFactory: @escaping (_ backgroundViews: [UIView]) -> BaseAlertController)  {
        showMapAlertControllerCallCount += 1
    
        if let showMapAlertControllerHandler = showMapAlertControllerHandler {
            showMapAlertControllerHandler(dismissPresentedViewController, options, alertControllerFactory)
        }
        
    }
var showSafetyActionSheetCallCount = 0
public var showSafetyActionSheetHandler: ((SafetyCenterActionSheetIncidentType) -> ())?
public func showSafetyActionSheet(incidentType: SafetyCenterActionSheetIncidentType)  {
        showSafetyActionSheetCallCount += 1
    
        if let showSafetyActionSheetHandler = showSafetyActionSheetHandler {
            showSafetyActionSheetHandler(incidentType)
        }
        
    }
var dispatchingMapIsReadyCallCount = 0
public var dispatchingMapIsReadyHandler: (() -> ())?
public func dispatchingMapIsReady()  {
        dispatchingMapIsReadyCallCount += 1
    
        if let dispatchingMapIsReadyHandler = dispatchingMapIsReadyHandler {
            dispatchingMapIsReadyHandler()
        }
        
    }
var genericLocationEditorDidSelectLocationCallCount = 0
public var genericLocationEditorDidSelectLocationHandler: ((RequestLocation) -> ())?
public func genericLocationEditorDidSelectLocation(requestLocation: RequestLocation)  {
        genericLocationEditorDidSelectLocationCallCount += 1
    
        if let genericLocationEditorDidSelectLocationHandler = genericLocationEditorDidSelectLocationHandler {
            genericLocationEditorDidSelectLocationHandler(requestLocation)
        }
        
    }
var genericLocationEditorDidCancelCallCount = 0
public var genericLocationEditorDidCancelHandler: (() -> ())?
public func genericLocationEditorDidCancel()  {
        genericLocationEditorDidCancelCallCount += 1
    
        if let genericLocationEditorDidCancelHandler = genericLocationEditorDidCancelHandler {
            genericLocationEditorDidCancelHandler()
        }
        
    }
var genericLocationEditorDidUpdateLocationManualCallCount = 0
public var genericLocationEditorDidUpdateLocationManualHandler: (() -> ())?
public func genericLocationEditorDidUpdateLocationManual()  {
        genericLocationEditorDidUpdateLocationManualCallCount += 1
    
        if let genericLocationEditorDidUpdateLocationManualHandler = genericLocationEditorDidUpdateLocationManualHandler {
            genericLocationEditorDidUpdateLocationManualHandler()
        }
        
    }
var modalRIBWantsDismissCallCount = 0
public var modalRIBWantsDismissHandler: (() -> ())?
public func modalRIBWantsDismiss()  {
        modalRIBWantsDismissCallCount += 1
    
        if let modalRIBWantsDismissHandler = modalRIBWantsDismissHandler {
            modalRIBWantsDismissHandler()
        }
        
    }
var attachModalRIBCallCount = 0
public var attachModalRIBHandler: ((ModalRIBRouting) -> ())?
public func attachModalRIB(_ router: ModalRIBRouting)  {
        attachModalRIBCallCount += 1
    
        if let attachModalRIBHandler = attachModalRIBHandler {
            attachModalRIBHandler(router)
        }
        
    }
var tripInstructionsWantLocationEditorCallCount = 0
public var tripInstructionsWantLocationEditorHandler: ((LocationEditorConfiguration) -> ())?
public func tripInstructionsWantLocationEditor(configuration: LocationEditorConfiguration)  {
        tripInstructionsWantLocationEditorCallCount += 1
    
        if let tripInstructionsWantLocationEditorHandler = tripInstructionsWantLocationEditorHandler {
            tripInstructionsWantLocationEditorHandler(configuration)
        }
        
    }
var tripInstructionsWantGenericLocationEditorCallCount = 0
public var tripInstructionsWantGenericLocationEditorHandler: ((GenericLocationEditorConfiguration) -> ())?
public func tripInstructionsWantGenericLocationEditor(configuration: GenericLocationEditorConfiguration)  {
        tripInstructionsWantGenericLocationEditorCallCount += 1
    
        if let tripInstructionsWantGenericLocationEditorHandler = tripInstructionsWantGenericLocationEditorHandler {
            tripInstructionsWantGenericLocationEditorHandler(configuration)
        }
        
    }
private var dispatchingMapAnimatedStreamSubjectKind = 0
var dispatchingMapAnimatedStreamSubjectSetCallCount = 0
var dispatchingMapAnimatedStreamSubject = PublishSubject<Bool>() { didSet { dispatchingMapAnimatedStreamSubjectSetCallCount += 1 } }
var dispatchingMapAnimatedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { dispatchingMapAnimatedStreamSubjectSetCallCount += 1 } }
var dispatchingMapAnimatedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { dispatchingMapAnimatedStreamSubjectSetCallCount += 1 } }
var dispatchingMapAnimatedStreamRxSubject: Observable<Bool>! { didSet { dispatchingMapAnimatedStreamSubjectSetCallCount += 1 } }
public var dispatchingMapAnimatedStream: Observable<Bool> {
        get {
            if dispatchingMapAnimatedStreamSubjectKind == 0 {
                return dispatchingMapAnimatedStreamSubject
            } else if dispatchingMapAnimatedStreamSubjectKind == 1 {
                return dispatchingMapAnimatedStreamBehaviorSubject
            } else if dispatchingMapAnimatedStreamSubjectKind == 2 {
                return dispatchingMapAnimatedStreamReplaySubject
            } else {
                return dispatchingMapAnimatedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                dispatchingMapAnimatedStreamSubject = val
                dispatchingMapAnimatedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                dispatchingMapAnimatedStreamBehaviorSubject = val
                dispatchingMapAnimatedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                dispatchingMapAnimatedStreamReplaySubject = val
                dispatchingMapAnimatedStreamSubjectKind = 2
            } else {
                dispatchingMapAnimatedStreamRxSubject = newValue
                dispatchingMapAnimatedStreamSubjectKind = 3
            }
        }
    }
private var locationEditorDismissToggledSubjectKind = 0
var locationEditorDismissToggledSubjectSetCallCount = 0
var locationEditorDismissToggledSubject = PublishSubject<Bool>() { didSet { locationEditorDismissToggledSubjectSetCallCount += 1 } }
var locationEditorDismissToggledReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { locationEditorDismissToggledSubjectSetCallCount += 1 } }
var locationEditorDismissToggledBehaviorSubject: BehaviorSubject<Bool>! { didSet { locationEditorDismissToggledSubjectSetCallCount += 1 } }
var locationEditorDismissToggledRxSubject: Observable<Bool>! { didSet { locationEditorDismissToggledSubjectSetCallCount += 1 } }
public var locationEditorDismissToggled: Observable<Bool> {
        get {
            if locationEditorDismissToggledSubjectKind == 0 {
                return locationEditorDismissToggledSubject
            } else if locationEditorDismissToggledSubjectKind == 1 {
                return locationEditorDismissToggledBehaviorSubject
            } else if locationEditorDismissToggledSubjectKind == 2 {
                return locationEditorDismissToggledReplaySubject
            } else {
                return locationEditorDismissToggledRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                locationEditorDismissToggledSubject = val
                locationEditorDismissToggledSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                locationEditorDismissToggledBehaviorSubject = val
                locationEditorDismissToggledSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                locationEditorDismissToggledReplaySubject = val
                locationEditorDismissToggledSubjectKind = 2
            } else {
                locationEditorDismissToggledRxSubject = newValue
                locationEditorDismissToggledSubjectKind = 3
            }
        }
    }
var attachDispatchingMapCallCount = 0
public var attachDispatchingMapHandler: ((DispatchingMapBuildable) -> ())?
public func attachDispatchingMap(builder: DispatchingMapBuildable)  {
        attachDispatchingMapCallCount += 1
    
        if let attachDispatchingMapHandler = attachDispatchingMapHandler {
            attachDispatchingMapHandler(builder)
        }
        
    }
var detachDispatchingMapCallCount = 0
public var detachDispatchingMapHandler: (() -> ())?
public func detachDispatchingMap()  {
        detachDispatchingMapCallCount += 1
    
        if let detachDispatchingMapHandler = detachDispatchingMapHandler {
            detachDispatchingMapHandler()
        }
        
    }
var attachTripMapCallCount = 0
public var attachTripMapHandler: ((TripMapBuildable) -> ())?
public func attachTripMap(builder: TripMapBuildable)  {
        attachTripMapCallCount += 1
    
        if let attachTripMapHandler = attachTripMapHandler {
            attachTripMapHandler(builder)
        }
        
    }
var detachTripMapCallCount = 0
public var detachTripMapHandler: (() -> ())?
public func detachTripMap()  {
        detachTripMapCallCount += 1
    
        if let detachTripMapHandler = detachTripMapHandler {
            detachTripMapHandler()
        }
        
    }
var expandFeedForOnTripCallCount = 0
public var expandFeedForOnTripHandler: (() -> ())?
public func expandFeedForOnTrip()  {
        expandFeedForOnTripCallCount += 1
    
        if let expandFeedForOnTripHandler = expandFeedForOnTripHandler {
            expandFeedForOnTripHandler()
        }
        
    }
var handleTripTitleDisplayCallCount = 0
public var handleTripTitleDisplayHandler: ((String?) -> ())?
public func handleTripTitleDisplay(with title: String?)  {
        handleTripTitleDisplayCallCount += 1
    
        if let handleTripTitleDisplayHandler = handleTripTitleDisplayHandler {
            handleTripTitleDisplayHandler(title)
        }
        
    }
var attachTripInstructionsCallCount = 0
public var attachTripInstructionsHandler: ((TripInstructionsBuildable) -> ())?
public func attachTripInstructions(builder: TripInstructionsBuildable)  {
        attachTripInstructionsCallCount += 1
    
        if let attachTripInstructionsHandler = attachTripInstructionsHandler {
            attachTripInstructionsHandler(builder)
        }
        
    }
var detachTripInstructionsCallCount = 0
public var detachTripInstructionsHandler: ((Bool) -> ())?
public func detachTripInstructions(animated: Bool)  {
        detachTripInstructionsCallCount += 1
    
        if let detachTripInstructionsHandler = detachTripInstructionsHandler {
            detachTripInstructionsHandler(animated)
        }
        
    }
var attachTripCardsCallCount = 0
public var attachTripCardsHandler: (() -> ())?
public func attachTripCards()  {
        attachTripCardsCallCount += 1
    
        if let attachTripCardsHandler = attachTripCardsHandler {
            attachTripCardsHandler()
        }
        
    }
var detachTripCardsCallCount = 0
public var detachTripCardsHandler: (() -> ())?
public func detachTripCards()  {
        detachTripCardsCallCount += 1
    
        if let detachTripCardsHandler = detachTripCardsHandler {
            detachTripCardsHandler()
        }
        
    }
var attachTripTrayCallCount = 0
public var attachTripTrayHandler: ((TripTrayBuildable) -> ())?
public func attachTripTray(builder: TripTrayBuildable)  {
        attachTripTrayCallCount += 1
    
        if let attachTripTrayHandler = attachTripTrayHandler {
            attachTripTrayHandler(builder)
        }
        
    }
var detachTripTrayCallCount = 0
public var detachTripTrayHandler: (() -> ())?
public func detachTripTray()  {
        detachTripTrayCallCount += 1
    
        if let detachTripTrayHandler = detachTripTrayHandler {
            detachTripTrayHandler()
        }
        
    }
var attachRiderOfferCallCount = 0
public var attachRiderOfferHandler: ((RiderOfferBuildable, RiderOfferListener) -> ())?
public func attachRiderOffer(buildable: RiderOfferBuildable, offerListener: RiderOfferListener)  {
        attachRiderOfferCallCount += 1
    
        if let attachRiderOfferHandler = attachRiderOfferHandler {
            attachRiderOfferHandler(buildable, offerListener)
        }
        
    }
var detachRiderOfferCallCount = 0
public var detachRiderOfferHandler: (() -> ())?
public func detachRiderOffer()  {
        detachRiderOfferCallCount += 1
    
        if let detachRiderOfferHandler = detachRiderOfferHandler {
            detachRiderOfferHandler()
        }
        
    }
var displayMessageCallCount = 0
public var displayMessageHandler: ((String?, String) -> (Observable<(TripActionableItem, ())>))?
public func displayMessage(title: String?, message: String) -> Observable<(TripActionableItem, ())> {
        displayMessageCallCount += 1
    
        if let displayMessageHandler = displayMessageHandler {
            return displayMessageHandler(title, message)
        }
        return Observable.empty()
    }
var dismissFeedCallCount = 0
public var dismissFeedHandler: (() -> (Observable<(TripActionableItem, ())>))?
public func dismissFeed() -> Observable<(TripActionableItem, ())> {
        dismissFeedCallCount += 1
    
        if let dismissFeedHandler = dismissFeedHandler {
            return dismissFeedHandler()
        }
        return Observable.empty()
    }
var waitForFeedCallCount = 0
public var waitForFeedHandler: (() -> (Observable<(FeedActionableItem, ())>))?
public func waitForFeed() -> Observable<(FeedActionableItem, ())> {
        waitForFeedCallCount += 1
    
        if let waitForFeedHandler = waitForFeedHandler {
            return waitForFeedHandler()
        }
        return Observable.empty()
    }
var presentFeedPermalinkCallCount = 0
public var presentFeedPermalinkHandler: ((String) -> ())?
public func presentFeedPermalink(withPermalinkId permalinkId: String)  {
        presentFeedPermalinkCallCount += 1
    
        if let presentFeedPermalinkHandler = presentFeedPermalinkHandler {
            presentFeedPermalinkHandler(permalinkId)
        }
        
    }
}

class ContentViewControllableMock: ContentViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var pushNavigationViewControllerWithViewControllerCallCount = 0
    var pushNavigationViewControllerWithViewControllerHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
    func pushNavigationViewControllerWithViewController(viewController: UIViewController, animated flag: Bool, completion: (() -> ())?)  {
        pushNavigationViewControllerWithViewControllerCallCount += 1
    
        if let pushNavigationViewControllerWithViewControllerHandler = pushNavigationViewControllerWithViewControllerHandler {
            pushNavigationViewControllerWithViewControllerHandler(viewController, flag, completion)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var transitionFromViewControllerCallCount = 0
public var transitionFromViewControllerHandler: ((UIViewController?, UIViewController?, UIViewControllerAnimatedTransitioning?, TransitionContext, CachedExperimenting?) -> ())?
public func transitionFromViewController(_ fromViewController: UIViewController?, toViewController: UIViewController?, animator: UIViewControllerAnimatedTransitioning?, context: TransitionContext, cachedExperiments: CachedExperimenting?)  {
        transitionFromViewControllerCallCount += 1
    
        if let transitionFromViewControllerHandler = transitionFromViewControllerHandler {
            transitionFromViewControllerHandler(fromViewController, toViewController, animator, context, cachedExperiments)
        }
        
    }
}

class ConfirmationActionRequestPresentableMock: ConfirmationActionRequestPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationActionRequestPresenterListener? = nil
    var listener: ConfirmationActionRequestPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showNextStepCallCount = 0
    var showNextStepHandler: ((ConfirmationNextStep) -> (Disposable))?
    func showNextStep(_ nextStep: ConfirmationNextStep) -> Disposable {
        showNextStepCallCount += 1
    
        if let showNextStepHandler = showNextStepHandler {
            return showNextStepHandler(nextStep)
        }
        fatalError("showNextStepHandler returns can't have a default value thus its handler must be set")
    }
    
    var setNextStepStyleCallCount = 0
    var setNextStepStyleHandler: ((ConfirmationActionRequestStyling) -> ())?
    func setNextStepStyle(_ confirmationActionRequestStyle: ConfirmationActionRequestStyling)  {
        setNextStepStyleCallCount += 1
    
        if let setNextStepStyleHandler = setNextStepStyleHandler {
            setNextStepStyleHandler(confirmationActionRequestStyle)
        }
        
    }
    
    var setNextStepEnabledCallCount = 0
    var setNextStepEnabledHandler: ((Bool) -> ())?
    func setNextStepEnabled(_ isEnabled: Bool)  {
        setNextStepEnabledCallCount += 1
    
        if let setNextStepEnabledHandler = setNextStepEnabledHandler {
            setNextStepEnabledHandler(isEnabled)
        }
        
    }
}

class ProductSelectionPresenterListenerMock: ProductSelectionPresenterListener {

    

    init() {

    }
        
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductId) -> ())?
    func selectProduct(id: ProductId)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(id)
        }
        
    }
    
    var imageForProductCallCount = 0
    var imageForProductHandler: ((ProductImageTypeSet, @escaping (ProductImageMap?) -> ()) -> ())?
    func imageForProduct(imageSet: ProductImageTypeSet, completion: @escaping (ProductImageMap?) -> ())  {
        imageForProductCallCount += 1
    
        if let imageForProductHandler = imageForProductHandler {
            imageForProductHandler(imageSet, completion)
        }
        
    }
    
    var fareBindingRequestForProductCallCount = 0
    var fareBindingRequestForProductHandler: ((ProductId, String?, FareBindingType?) -> (FareBindingRequest?))?
    func fareBindingRequestForProduct(id: ProductId, placeholder: String?, bindingType: FareBindingType?) -> FareBindingRequest? {
        fareBindingRequestForProductCallCount += 1
    
        if let fareBindingRequestForProductHandler = fareBindingRequestForProductHandler {
            return fareBindingRequestForProductHandler(id, placeholder, bindingType)
        }
        return nil
    }
    
    var didDismissUpsellCallCount = 0
    var didDismissUpsellHandler: ((Upsell) -> ())?
    func didDismissUpsell(upsell: Upsell)  {
        didDismissUpsellCallCount += 1
    
        if let didDismissUpsellHandler = didDismissUpsellHandler {
            didDismissUpsellHandler(upsell)
        }
        
    }
    
    var didShowTooltipCallCount = 0
    var didShowTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func didShowTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        didShowTooltipCallCount += 1
    
        if let didShowTooltipHandler = didShowTooltipHandler {
            didShowTooltipHandler(viewModel)
        }
        
    }
}

class TripDetailsSectionProvidingMock: TripDetailsSectionProviding {

    
    init() {}
    init(displayOverPeekable: Bool = false, reuseIdentifierMapping: [String: UICollectionViewCell.Type] = [String: UICollectionViewCell.Type](), needsToBumpFirstCard: Bool = false) {
        self.displayOverPeekable = displayOverPeekable
        self.reuseIdentifierMapping = reuseIdentifierMapping
        self.needsToBumpFirstCard = needsToBumpFirstCard
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: TripDetailsPresentableListener? = nil
    var listener: TripDetailsPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var setRowSlotConfigCallCount = 0
    var setRowSlotConfigHandler: ((TripDetailsRowSlotConfig) -> ())?
    func setRowSlotConfig(_ config: TripDetailsRowSlotConfig)  {
        setRowSlotConfigCallCount += 1
    
        if let setRowSlotConfigHandler = setRowSlotConfigHandler {
            setRowSlotConfigHandler(config)
        }
        
    }
    
    var setRowsCallCount = 0
    var setRowsHandler: (([(slot: TripDetailsRowSlot, view: TripDetailsRowViewControllable)]) -> ())?
    func setRows(_ rows: [(slot: TripDetailsRowSlot, view: TripDetailsRowViewControllable)])  {
        setRowsCallCount += 1
    
        if let setRowsHandler = setRowsHandler {
            setRowsHandler(rows)
        }
        
    }
var peekingHeightCallCount = 0
public var peekingHeightHandler: ((CGFloat) -> (CGFloat))?
public func peekingHeight(forWidth width: CGFloat) -> CGFloat {
        peekingHeightCallCount += 1
    
        if let peekingHeightHandler = peekingHeightHandler {
            return peekingHeightHandler(width)
        }
        return 0.0
    }
var displayOverPeekableSetCallCount = 0
var underlyingDisplayOverPeekable: Bool = false
public var displayOverPeekable: Bool {
        get {
            return underlyingDisplayOverPeekable
        }
        set {
            underlyingDisplayOverPeekable = newValue
            displayOverPeekableSetCallCount += 1
        }
    }
var reuseIdentifierMappingSetCallCount = 0
var underlyingReuseIdentifierMapping: [String: UICollectionViewCell.Type] = [String: UICollectionViewCell.Type]()
public var reuseIdentifierMapping: [String: UICollectionViewCell.Type] {
        get {
            return underlyingReuseIdentifierMapping
        }
        set {
            underlyingReuseIdentifierMapping = newValue
            reuseIdentifierMappingSetCallCount += 1
        }
    }
var collectionViewCallCount = 0
public var collectionViewHandler: ((UICollectionView, Int) -> (String?))?
public func collectionView(_ collectionView: UICollectionView, reuseIdentifierForItemAt index: Int) -> String? {
        collectionViewCallCount += 1
    
        if let collectionViewHandler = collectionViewHandler {
            return collectionViewHandler(collectionView, index)
        }
        return nil
    }
var numberOfItemsCallCount = 0
public var numberOfItemsHandler: ((UICollectionView) -> (Int))?
public func numberOfItems(in collectionView: UICollectionView) -> Int {
        numberOfItemsCallCount += 1
    
        if let numberOfItemsHandler = numberOfItemsHandler {
            return numberOfItemsHandler(collectionView)
        }
        return 0
    }
var collectionViewConfigureCellCallCount = 0
public var collectionViewConfigureCellHandler: ((UICollectionView, UICollectionViewCell, Int) -> ())?
public func collectionView(_ collectionView: UICollectionView, configureCell cell: UICollectionViewCell, forItemAt index: Int)  {
        collectionViewConfigureCellCallCount += 1
    
        if let collectionViewConfigureCellHandler = collectionViewConfigureCellHandler {
            collectionViewConfigureCellHandler(collectionView, cell, index)
        }
        
    }
var collectionViewSizeForItemAtCallCount = 0
public var collectionViewSizeForItemAtHandler: ((UICollectionView, Int) -> (CGSize))?
public func collectionView(_ collectionView: UICollectionView, sizeForItemAt index: Int) -> CGSize {
        collectionViewSizeForItemAtCallCount += 1
    
        if let collectionViewSizeForItemAtHandler = collectionViewSizeForItemAtHandler {
            return collectionViewSizeForItemAtHandler(collectionView, index)
        }
        return .zero
    }
var headerMappingSetCallCount = 0
var underlyingHeaderMapping: (identifier: String, type: UICollectionReusableView.Type)? = nil
public var headerMapping: (identifier: String, type: UICollectionReusableView.Type)? {
        get {
            return underlyingHeaderMapping
        }
        set {
            underlyingHeaderMapping = newValue
            headerMappingSetCallCount += 1
        }
    }
var sectionListenerSetCallCount = 0
var underlyingSectionListener: CardCollectionViewSectionListener? = nil
public var sectionListener: CardCollectionViewSectionListener? {
        get {
            return underlyingSectionListener
        }
        set {
            underlyingSectionListener = newValue
            sectionListenerSetCallCount += 1
        }
    }
var footerMappingSetCallCount = 0
var underlyingFooterMapping: (identifier: String, type: UICollectionReusableView.Type)? = nil
public var footerMapping: (identifier: String, type: UICollectionReusableView.Type)? {
        get {
            return underlyingFooterMapping
        }
        set {
            underlyingFooterMapping = newValue
            footerMappingSetCallCount += 1
        }
    }
var registerImpressionVisibilityItemCallCount = 0
public var registerImpressionVisibilityItemHandler: ((ImpressionVisibilityItem) -> ())?
public func registerImpressionVisibilityItem(_ impressionVisibilityItem: ImpressionVisibilityItem)  {
        registerImpressionVisibilityItemCallCount += 1
    
        if let registerImpressionVisibilityItemHandler = registerImpressionVisibilityItemHandler {
            registerImpressionVisibilityItemHandler(impressionVisibilityItem)
        }
        
    }
var collectionViewConfigureHeaderCallCount = 0
public var collectionViewConfigureHeaderHandler: ((UICollectionView, UICollectionReusableView) -> ())?
public func collectionView(_ collectionView: UICollectionView, configureHeader header: UICollectionReusableView)  {
        collectionViewConfigureHeaderCallCount += 1
    
        if let collectionViewConfigureHeaderHandler = collectionViewConfigureHeaderHandler {
            collectionViewConfigureHeaderHandler(collectionView, header)
        }
        
    }
var needsToBumpFirstCardSetCallCount = 0
var underlyingNeedsToBumpFirstCard: Bool = false
public var needsToBumpFirstCard: Bool {
        get {
            return underlyingNeedsToBumpFirstCard
        }
        set {
            underlyingNeedsToBumpFirstCard = newValue
            needsToBumpFirstCardSetCallCount += 1
        }
    }
var showBumpCardAnalyticsMetadataSetCallCount = 0
var underlyingShowBumpCardAnalyticsMetadata: AnalyticsMetadata? = nil
public var showBumpCardAnalyticsMetadata: AnalyticsMetadata? {
        get {
            return underlyingShowBumpCardAnalyticsMetadata
        }
        set {
            underlyingShowBumpCardAnalyticsMetadata = newValue
            showBumpCardAnalyticsMetadataSetCallCount += 1
        }
    }
var resetBumpCardAnalyticsMetadataSetCallCount = 0
var underlyingResetBumpCardAnalyticsMetadata: AnalyticsMetadata? = nil
public var resetBumpCardAnalyticsMetadata: AnalyticsMetadata? {
        get {
            return underlyingResetBumpCardAnalyticsMetadata
        }
        set {
            underlyingResetBumpCardAnalyticsMetadata = newValue
            resetBumpCardAnalyticsMetadataSetCallCount += 1
        }
    }
var collectionViewConfigureFooterCallCount = 0
public var collectionViewConfigureFooterHandler: ((UICollectionView, UICollectionReusableView) -> ())?
public func collectionView(_ collectionView: UICollectionView, configureFooter footer: UICollectionReusableView)  {
        collectionViewConfigureFooterCallCount += 1
    
        if let collectionViewConfigureFooterHandler = collectionViewConfigureFooterHandler {
            collectionViewConfigureFooterHandler(collectionView, footer)
        }
        
    }
var willBumpFirstCardCallCount = 0
public var willBumpFirstCardHandler: (() -> ())?
public func willBumpFirstCard()  {
        willBumpFirstCardCallCount += 1
    
        if let willBumpFirstCardHandler = willBumpFirstCardHandler {
            willBumpFirstCardHandler()
        }
        
    }
var headerSizeCallCount = 0
public var headerSizeHandler: ((UICollectionView) -> (CGSize))?
public func headerSize(in collectionView: UICollectionView) -> CGSize {
        headerSizeCallCount += 1
    
        if let headerSizeHandler = headerSizeHandler {
            return headerSizeHandler(collectionView)
        }
        return .zero
    }
var footerSizeCallCount = 0
public var footerSizeHandler: ((UICollectionView) -> (CGSize))?
public func footerSize(in collectionView: UICollectionView) -> CGSize {
        footerSizeCallCount += 1
    
        if let footerSizeHandler = footerSizeHandler {
            return footerSizeHandler(collectionView)
        }
        return .zero
    }
var collectionViewDidSelectItemAtCallCount = 0
public var collectionViewDidSelectItemAtHandler: ((UICollectionView, Int) -> ())?
public func collectionView(_ collectionView: UICollectionView, didSelectItemAt index: Int)  {
        collectionViewDidSelectItemAtCallCount += 1
    
        if let collectionViewDidSelectItemAtHandler = collectionViewDidSelectItemAtHandler {
            collectionViewDidSelectItemAtHandler(collectionView, index)
        }
        
    }
var collectionViewDidDeselectItemAtCallCount = 0
public var collectionViewDidDeselectItemAtHandler: ((UICollectionView, Int) -> ())?
public func collectionView(_ collectionView: UICollectionView, didDeselectItemAt index: Int)  {
        collectionViewDidDeselectItemAtCallCount += 1
    
        if let collectionViewDidDeselectItemAtHandler = collectionViewDidDeselectItemAtHandler {
            collectionViewDidDeselectItemAtHandler(collectionView, index)
        }
        
    }
var collectionViewShouldDeselectItemAtCallCount = 0
public var collectionViewShouldDeselectItemAtHandler: ((UICollectionView, Int) -> (Bool))?
public func collectionView(_ collectionView: UICollectionView, shouldDeselectItemAt index: Int) -> Bool {
        collectionViewShouldDeselectItemAtCallCount += 1
    
        if let collectionViewShouldDeselectItemAtHandler = collectionViewShouldDeselectItemAtHandler {
            return collectionViewShouldDeselectItemAtHandler(collectionView, index)
        }
        return false
    }
var collectionViewWillDisplayCallCount = 0
public var collectionViewWillDisplayHandler: ((UICollectionView, UICollectionViewCell, Int) -> ())?
public func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt index: Int)  {
        collectionViewWillDisplayCallCount += 1
    
        if let collectionViewWillDisplayHandler = collectionViewWillDisplayHandler {
            collectionViewWillDisplayHandler(collectionView, cell, index)
        }
        
    }
var collectionViewDidEndDisplayingCallCount = 0
public var collectionViewDidEndDisplayingHandler: ((UICollectionView, UICollectionViewCell, Int) -> ())?
public func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt index: Int)  {
        collectionViewDidEndDisplayingCallCount += 1
    
        if let collectionViewDidEndDisplayingHandler = collectionViewDidEndDisplayingHandler {
            collectionViewDidEndDisplayingHandler(collectionView, cell, index)
        }
        
    }
var minimumLineSpacingCallCount = 0
public var minimumLineSpacingHandler: ((UICollectionView) -> (CGFloat?))?
public func minimumLineSpacing(in collectionView: UICollectionView) -> CGFloat? {
        minimumLineSpacingCallCount += 1
    
        if let minimumLineSpacingHandler = minimumLineSpacingHandler {
            return minimumLineSpacingHandler(collectionView)
        }
        return nil
    }
var minimumInteritemSpacingCallCount = 0
public var minimumInteritemSpacingHandler: ((UICollectionView) -> (CGFloat?))?
public func minimumInteritemSpacing(in collectionView: UICollectionView) -> CGFloat? {
        minimumInteritemSpacingCallCount += 1
    
        if let minimumInteritemSpacingHandler = minimumInteritemSpacingHandler {
            return minimumInteritemSpacingHandler(collectionView)
        }
        return nil
    }
var overrideInsetCallCount = 0
public var overrideInsetHandler: ((UICollectionView) -> (UIEdgeInsets?))?
public func overrideInset(in collectionView: UICollectionView) -> UIEdgeInsets? {
        overrideInsetCallCount += 1
    
        if let overrideInsetHandler = overrideInsetHandler {
            return overrideInsetHandler(collectionView)
        }
        return nil
    }
var collectionViewAnalyticsImpressionItemForIndexCallCount = 0
public var collectionViewAnalyticsImpressionItemForIndexHandler: ((UICollectionView, Int) -> (AnalyticsImpressionItem?))?
public func collectionView(_ collectionView: UICollectionView, analyticsImpressionItemForIndex index: Int) -> AnalyticsImpressionItem? {
        collectionViewAnalyticsImpressionItemForIndexCallCount += 1
    
        if let collectionViewAnalyticsImpressionItemForIndexHandler = collectionViewAnalyticsImpressionItemForIndexHandler {
            return collectionViewAnalyticsImpressionItemForIndexHandler(collectionView, index)
        }
        return nil
    }
var collectionViewDidScrollAtSectionCallCount = 0
public var collectionViewDidScrollAtSectionHandler: ((UICollectionView, Int) -> ())?
public func collectionView(_ collectionView: UICollectionView, didScrollAtSection: Int)  {
        collectionViewDidScrollAtSectionCallCount += 1
    
        if let collectionViewDidScrollAtSectionHandler = collectionViewDidScrollAtSectionHandler {
            collectionViewDidScrollAtSectionHandler(collectionView, didScrollAtSection)
        }
        
    }
}

class ConfirmationRoutingV2Mock: ConfirmationRoutingV2 {

    
    init() {}
    init(interactor: ConfirmationInteractableV2 = ConfirmationInteractableV2Mock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ConfirmationInteractableV2 = ConfirmationInteractableV2Mock()
    var interactor: ConfirmationInteractableV2 {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((ConfirmationMapBuildable) -> ())?
    func routeToMap(builder: ConfirmationMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToActionCallCount = 0
    var routeToActionHandler: ((ConfirmationActionRouting) -> ())?
    func routeToAction(_ actionRouter: ConfirmationActionRouting)  {
        routeToActionCallCount += 1
    
        if let routeToActionHandler = routeToActionHandler {
            routeToActionHandler(actionRouter)
        }
        
    }
    
    var routeToConfirmationActionAccessoryCallCount = 0
    var routeToConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryRouting?) -> ())?
    func routeToConfirmationActionAccessory(accessory: ConfirmationActionAccessoryRouting?)  {
        routeToConfirmationActionAccessoryCallCount += 1
    
        if let routeToConfirmationActionAccessoryHandler = routeToConfirmationActionAccessoryHandler {
            routeToConfirmationActionAccessoryHandler(accessory)
        }
        
    }
    
    var routeToConfirmationStateCallCount = 0
    var routeToConfirmationStateHandler: ((ConfirmationState) -> ())?
    func routeToConfirmationState(_ confirmationState: ConfirmationState)  {
        routeToConfirmationStateCallCount += 1
    
        if let routeToConfirmationStateHandler = routeToConfirmationStateHandler {
            routeToConfirmationStateHandler(confirmationState)
        }
        
    }
    
    var clearAllStatesCallCount = 0
    var clearAllStatesHandler: (() -> ())?
    func clearAllStates()  {
        clearAllStatesCallCount += 1
    
        if let clearAllStatesHandler = clearAllStatesHandler {
            clearAllStatesHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

public class MutableAppShortcutItemHandlerStreamingMock: MutableAppShortcutItemHandlerStreaming {

    
    public init() {}
    public init(handler: Observable<AppShortcutItemHandling> = PublishSubject()) {
        self.handler = handler
    }
        
    private var handlerSubjectKind = 0
    var handlerSubjectSetCallCount = 0
    var handlerSubject = PublishSubject<AppShortcutItemHandling>() { didSet { handlerSubjectSetCallCount += 1 } }
    var handlerReplaySubject = ReplaySubject<AppShortcutItemHandling>.create(bufferSize: 1) { didSet { handlerSubjectSetCallCount += 1 } }
    var handlerBehaviorSubject: BehaviorSubject<AppShortcutItemHandling>! { didSet { handlerSubjectSetCallCount += 1 } }
    var handlerRxSubject: Observable<AppShortcutItemHandling>! { didSet { handlerSubjectSetCallCount += 1 } }
    public var handler: Observable<AppShortcutItemHandling> {
        get {
            if handlerSubjectKind == 0 {
                return handlerSubject
            } else if handlerSubjectKind == 1 {
                return handlerBehaviorSubject
            } else if handlerSubjectKind == 2 {
                return handlerReplaySubject
            } else {
                return handlerRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<AppShortcutItemHandling> {
                handlerSubject = val
                handlerSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<AppShortcutItemHandling> {
                handlerBehaviorSubject = val
                handlerSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<AppShortcutItemHandling> {
                handlerReplaySubject = val
                handlerSubjectKind = 2
            } else {
                handlerRxSubject = newValue
                handlerSubjectKind = 3
            }
        }
    }
    
    var updateHandlerCallCount = 0
    public var updateHandlerHandler: ((AppShortcutItemHandling) -> ())?
    public func updateHandler(_ handler: AppShortcutItemHandling)  {
        updateHandlerCallCount += 1
    
        if let updateHandlerHandler = updateHandlerHandler {
            updateHandlerHandler(handler)
        }
        
    }
}

class HomePresentableListenerV2Mock: HomePresentableListenerV2 {

    

    init() {

    }
        
    var didTapDimmingViewCallCount = 0
    var didTapDimmingViewHandler: (() -> ())?
    func didTapDimmingView()  {
        didTapDimmingViewCallCount += 1
    
        if let didTapDimmingViewHandler = didTapDimmingViewHandler {
            didTapDimmingViewHandler()
        }
        
    }
    
    var didTapBackToUberHomeCallCount = 0
    var didTapBackToUberHomeHandler: (() -> ())?
    func didTapBackToUberHome()  {
        didTapBackToUberHomeCallCount += 1
    
        if let didTapBackToUberHomeHandler = didTapBackToUberHomeHandler {
            didTapBackToUberHomeHandler()
        }
        
    }
}

class MainInteractableMock: MainInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: MainRouting? = nil
    var router: MainRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var wantHideMenuCallCount = 0
    var wantHideMenuHandler: (((() -> ())?) -> ())?
    func wantHideMenu(completion: (() -> ())?)  {
        wantHideMenuCallCount += 1
    
        if let wantHideMenuHandler = wantHideMenuHandler {
            wantHideMenuHandler(completion)
        }
        
    }
    
    var openMenuItemCallCount = 0
    var openMenuItemHandler: ((MenuItemRouting, Bool) -> (Observable<(MenuItemActionableItem, ())>))?
    func openMenuItem(_ menuItem: MenuItemRouting, shouldShowInFullScreen: Bool) -> Observable<(MenuItemActionableItem, ())> {
        openMenuItemCallCount += 1
    
        if let openMenuItemHandler = openMenuItemHandler {
            return openMenuItemHandler(menuItem, shouldShowInFullScreen)
        }
        return Observable.empty()
    }
var dismissCallCount = 0
public var dismissHandler: (((() -> Void)?) -> ())?
public func dismiss(_ completion: (() -> Void)?)  {
        dismissCallCount += 1
    
        if let dismissHandler = dismissHandler {
            dismissHandler(completion)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var didInitiateMenuOpenCallCount = 0
public var didInitiateMenuOpenHandler: (() -> ())?
public func didInitiateMenuOpen()  {
        didInitiateMenuOpenCallCount += 1
    
        if let didInitiateMenuOpenHandler = didInitiateMenuOpenHandler {
            didInitiateMenuOpenHandler()
        }
        
    }
var didInitiateMenuItemCloseCallCount = 0
public var didInitiateMenuItemCloseHandler: (() -> ())?
public func didInitiateMenuItemClose()  {
        didInitiateMenuItemCloseCallCount += 1
    
        if let didInitiateMenuItemCloseHandler = didInitiateMenuItemCloseHandler {
            didInitiateMenuItemCloseHandler()
        }
        
    }
var attachCallCount = 0
public var attachHandler: ((Routing) -> (Observable<(Routing, Bool)>))?
public func attach(router: Routing) -> Observable<(Routing, Bool)> {
        attachCallCount += 1
    
        if let attachHandler = attachHandler {
            return attachHandler(router)
        }
        return Observable.empty()
    }
var detachCallCount = 0
public var detachHandler: ((Routing) -> (Observable<(MainActionableItem, Bool)>))?
public func detach(router: Routing) -> Observable<(MainActionableItem, Bool)> {
        detachCallCount += 1
    
        if let detachHandler = detachHandler {
            return detachHandler(router)
        }
        return Observable.empty()
    }
var presentFullScreenRouterCallCount = 0
public var presentFullScreenRouterHandler: ((ViewableRouting) -> (Observable<(ViewableRouting, Bool)>))?
public func presentFullScreenRouter(router: ViewableRouting) -> Observable<(ViewableRouting, Bool)> {
        presentFullScreenRouterCallCount += 1
    
        if let presentFullScreenRouterHandler = presentFullScreenRouterHandler {
            return presentFullScreenRouterHandler(router)
        }
        return Observable.empty()
    }
var presentFullScreenRouterOverCurrentContextCallCount = 0
public var presentFullScreenRouterOverCurrentContextHandler: ((ViewableRouting) -> (Observable<(ViewableRouting, Bool)>))?
public func presentFullScreenRouterOverCurrentContext(router: ViewableRouting) -> Observable<(ViewableRouting, Bool)> {
        presentFullScreenRouterOverCurrentContextCallCount += 1
    
        if let presentFullScreenRouterOverCurrentContextHandler = presentFullScreenRouterOverCurrentContextHandler {
            return presentFullScreenRouterOverCurrentContextHandler(router)
        }
        return Observable.empty()
    }
var presentRouterInNavigationViewCallCount = 0
public var presentRouterInNavigationViewHandler: ((ViewableRouting, ((ThemeableNavigationViewController, PlatformUI.Theme) -> ())?) -> (Observable<(ViewableRouting, Bool)>))?
public func presentRouterInNavigationView(router: ViewableRouting, style: ((ThemeableNavigationViewController, PlatformUI.Theme) -> ())?) -> Observable<(ViewableRouting, Bool)> {
        presentRouterInNavigationViewCallCount += 1
    
        if let presentRouterInNavigationViewHandler = presentRouterInNavigationViewHandler {
            return presentRouterInNavigationViewHandler(router, style)
        }
        return Observable.empty()
    }
var presentRouterInNavigationViewV2CallCount = 0
public var presentRouterInNavigationViewV2Handler: ((ViewableRouting) -> (Observable<(ViewableRouting, Bool)>))?
public func presentRouterInNavigationViewV2(router: ViewableRouting) -> Observable<(ViewableRouting, Bool)> {
        presentRouterInNavigationViewV2CallCount += 1
    
        if let presentRouterInNavigationViewV2Handler = presentRouterInNavigationViewV2Handler {
            return presentRouterInNavigationViewV2Handler(router)
        }
        return Observable.empty()
    }
var presentRouterInFullscreenNavigationViewCallCount = 0
public var presentRouterInFullscreenNavigationViewHandler: ((ViewableRouting) -> (Observable<(ViewableRouting, Bool)>))?
public func presentRouterInFullscreenNavigationView(router: ViewableRouting) -> Observable<(ViewableRouting, Bool)> {
        presentRouterInFullscreenNavigationViewCallCount += 1
    
        if let presentRouterInFullscreenNavigationViewHandler = presentRouterInFullscreenNavigationViewHandler {
            return presentRouterInFullscreenNavigationViewHandler(router)
        }
        return Observable.empty()
    }
var dismissFullScreenRouterCallCount = 0
public var dismissFullScreenRouterHandler: ((ViewableRouting) -> (Observable<(MainActionableItem, Bool)>))?
public func dismissFullScreenRouter(router: ViewableRouting) -> Observable<(MainActionableItem, Bool)> {
        dismissFullScreenRouterCallCount += 1
    
        if let dismissFullScreenRouterHandler = dismissFullScreenRouterHandler {
            return dismissFullScreenRouterHandler(router)
        }
        return Observable.empty()
    }
var waitForWorkerCallCount = 0
public var waitForWorkerHandler: ((Working) -> (Observable<(WorkingActionableItem, ())>))?
public func waitForWorker(worker: Working) -> Observable<(WorkingActionableItem, ())> {
        waitForWorkerCallCount += 1
    
        if let waitForWorkerHandler = waitForWorkerHandler {
            return waitForWorkerHandler(worker)
        }
        return Observable.empty()
    }
var containerViewControllerSetCallCount = 0
var underlyingContainerViewController: ViewControllable? = nil
public var containerViewController: ViewControllable? {
        get {
            return underlyingContainerViewController
        }
        set {
            underlyingContainerViewController = newValue
            containerViewControllerSetCallCount += 1
        }
    }
var waitForRideCallCount = 0
public var waitForRideHandler: (() -> (Observable<(RideActionableItem, ())>))?
public func waitForRide() -> Observable<(RideActionableItem, ())> {
        waitForRideCallCount += 1
    
        if let waitForRideHandler = waitForRideHandler {
            return waitForRideHandler()
        }
        return Observable.empty()
    }
var waitForEMobilityRiderCallCount = 0
public var waitForEMobilityRiderHandler: (() -> (Observable<(EMobilityRiderActionableItem, ())>))?
public func waitForEMobilityRider() -> Observable<(EMobilityRiderActionableItem, ())> {
        waitForEMobilityRiderCallCount += 1
    
        if let waitForEMobilityRiderHandler = waitForEMobilityRiderHandler {
            return waitForEMobilityRiderHandler()
        }
        return Observable.empty()
    }
var waitForEatsModeCallCount = 0
public var waitForEatsModeHandler: (() -> (Observable<(EatsModeActionableItem, ())>))?
public func waitForEatsMode() -> Observable<(EatsModeActionableItem, ())> {
        waitForEatsModeCallCount += 1
    
        if let waitForEatsModeHandler = waitForEatsModeHandler {
            return waitForEatsModeHandler()
        }
        return Observable.empty()
    }
var waitForMainViewCallCount = 0
public var waitForMainViewHandler: (() -> (Observable<(MainActionableItem, ())>))?
public func waitForMainView() -> Observable<(MainActionableItem, ())> {
        waitForMainViewCallCount += 1
    
        if let waitForMainViewHandler = waitForMainViewHandler {
            return waitForMainViewHandler()
        }
        return Observable.empty()
    }
var waitForMenuCallCount = 0
public var waitForMenuHandler: (() -> (Observable<(MenuActionableItem, ())>))?
public func waitForMenu() -> Observable<(MenuActionableItem, ())> {
        waitForMenuCallCount += 1
    
        if let waitForMenuHandler = waitForMenuHandler {
            return waitForMenuHandler()
        }
        return Observable.empty()
    }
var detachMenuCallCount = 0
public var detachMenuHandler: (() -> (Observable<(MainActionableItem, ())>))?
public func detachMenu() -> Observable<(MainActionableItem, ())> {
        detachMenuCallCount += 1
    
        if let detachMenuHandler = detachMenuHandler {
            return detachMenuHandler()
        }
        return Observable.empty()
    }
var waitForMenuLandingUrlCallCount = 0
public var waitForMenuLandingUrlHandler: ((String?) -> (Observable<(MenuActionableItem, ())>))?
public func waitForMenu(landingUrl: String?) -> Observable<(MenuActionableItem, ())> {
        waitForMenuLandingUrlCallCount += 1
    
        if let waitForMenuLandingUrlHandler = waitForMenuLandingUrlHandler {
            return waitForMenuLandingUrlHandler(landingUrl)
        }
        return Observable.empty()
    }
}

class PlusOneViewControllableMock: PlusOneViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), mapPadding: UIEdgeInsets = .zero) {
        self.uiviewController = uiviewController
        self.mapPadding = mapPadding
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: PlusOneViewControllerListener? = nil
    var listener: PlusOneViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showStepViewControllerCallCount = 0
    var showStepViewControllerHandler: ((PlusOneStepViewControllable) -> ())?
    func showStepViewController(stepViewController: PlusOneStepViewControllable)  {
        showStepViewControllerCallCount += 1
    
        if let showStepViewControllerHandler = showStepViewControllerHandler {
            showStepViewControllerHandler(stepViewController)
        }
        
    }
    
    var hideStepViewControllerCallCount = 0
    var hideStepViewControllerHandler: ((Bool, Bool, (() -> ())?) -> ())?
    func hideStepViewController(hasNextStep: Bool, animated: Bool, completion: (() -> ())?)  {
        hideStepViewControllerCallCount += 1
    
        if let hideStepViewControllerHandler = hideStepViewControllerHandler {
            hideStepViewControllerHandler(hasNextStep, animated, completion)
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var mapOverlayBackgroundViewSetCallCount = 0
var underlyingMapOverlayBackgroundView: UIView? = nil
public var mapOverlayBackgroundView: UIView? {
        get {
            return underlyingMapOverlayBackgroundView
        }
        set {
            underlyingMapOverlayBackgroundView = newValue
            mapOverlayBackgroundViewSetCallCount += 1
        }
    }
var mapPaddingSetCallCount = 0
var underlyingMapPadding: UIEdgeInsets = .zero
public var mapPadding: UIEdgeInsets {
        get {
            return underlyingMapPadding
        }
        set {
            underlyingMapPadding = newValue
            mapPaddingSetCallCount += 1
        }
    }
var updateAllowsMapInteractionCallCount = 0
public var updateAllowsMapInteractionHandler: (() -> ())?
public func updateAllowsMapInteraction()  {
        updateAllowsMapInteractionCallCount += 1
    
        if let updateAllowsMapInteractionHandler = updateAllowsMapInteractionHandler {
            updateAllowsMapInteractionHandler()
        }
        
    }
var collapseStepCallCount = 0
public var collapseStepHandler: (((() -> ())?) -> ())?
public func collapseStep(completion: (() -> ())?)  {
        collapseStepCallCount += 1
    
        if let collapseStepHandler = collapseStepHandler {
            collapseStepHandler(completion)
        }
        
    }
var expandStepCallCount = 0
public var expandStepHandler: (((() -> ())?) -> ())?
public func expandStep(completion: (() -> ())?)  {
        expandStepCallCount += 1
    
        if let expandStepHandler = expandStepHandler {
            expandStepHandler(completion)
        }
        
    }
var setPinCallCount = 0
public var setPinHandler: ((Bool) -> ())?
public func setPin(visible: Bool)  {
        setPinCallCount += 1
    
        if let setPinHandler = setPinHandler {
            setPinHandler(visible)
        }
        
    }
}

public class ProductSelectionManagingMock: ProductSelectionManaging {

    
    public init() {}
    public init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject(), productSelection: Observable<ProductSelection> = PublishSubject(), userInitiatedProductSelection: Observable<ProductSelection> = PublishSubject(), userImpressedProductSelection: Observable<ProductSelection?> = PublishSubject()) {
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
        self.productSelection = productSelection
        self.userInitiatedProductSelection = userInitiatedProductSelection
        self.userImpressedProductSelection = userImpressedProductSelection
    }
        
    var selectProductCallCount = 0
    public var selectProductHandler: ((ProductId) -> ())?
    public func selectProduct(productId: ProductId)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(productId)
        }
        
    }
var startCallCount = 0
public var startHandler: ((InteractorScope) -> ())?
public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
    
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }
var stopCallCount = 0
public var stopHandler: (() -> ())?
public func stop()  {
        stopCallCount += 1
    
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
var isStartedSetCallCount = 0
var underlyingIsStarted: Bool = false
public var isStarted: Bool {
        get {
            return underlyingIsStarted
        }
        set {
            underlyingIsStarted = newValue
            isStartedSetCallCount += 1
        }
    }
private var isStartedStreamSubjectKind = 0
var isStartedStreamSubjectSetCallCount = 0
var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
var isStartedStreamRxSubject: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
public var isStartedStream: Observable<Bool> {
        get {
            if isStartedStreamSubjectKind == 0 {
                return isStartedStreamSubject
            } else if isStartedStreamSubjectKind == 1 {
                return isStartedStreamBehaviorSubject
            } else if isStartedStreamSubjectKind == 2 {
                return isStartedStreamReplaySubject
            } else {
                return isStartedStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isStartedStreamSubject = val
                isStartedStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isStartedStreamBehaviorSubject = val
                isStartedStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isStartedStreamReplaySubject = val
                isStartedStreamSubjectKind = 2
            } else {
                isStartedStreamRxSubject = newValue
                isStartedStreamSubjectKind = 3
            }
        }
    }
private var productSelectionSubjectKind = 0
var productSelectionSubjectSetCallCount = 0
var productSelectionSubject = PublishSubject<ProductSelection>() { didSet { productSelectionSubjectSetCallCount += 1 } }
var productSelectionReplaySubject = ReplaySubject<ProductSelection>.create(bufferSize: 1) { didSet { productSelectionSubjectSetCallCount += 1 } }
var productSelectionBehaviorSubject: BehaviorSubject<ProductSelection>! { didSet { productSelectionSubjectSetCallCount += 1 } }
var productSelectionRxSubject: Observable<ProductSelection>! { didSet { productSelectionSubjectSetCallCount += 1 } }
public var productSelection: Observable<ProductSelection> {
        get {
            if productSelectionSubjectKind == 0 {
                return productSelectionSubject
            } else if productSelectionSubjectKind == 1 {
                return productSelectionBehaviorSubject
            } else if productSelectionSubjectKind == 2 {
                return productSelectionReplaySubject
            } else {
                return productSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelection> {
                productSelectionSubject = val
                productSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelection> {
                productSelectionBehaviorSubject = val
                productSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelection> {
                productSelectionReplaySubject = val
                productSelectionSubjectKind = 2
            } else {
                productSelectionRxSubject = newValue
                productSelectionSubjectKind = 3
            }
        }
    }
private var userInitiatedProductSelectionSubjectKind = 0
var userInitiatedProductSelectionSubjectSetCallCount = 0
var userInitiatedProductSelectionSubject = PublishSubject<ProductSelection>() { didSet { userInitiatedProductSelectionSubjectSetCallCount += 1 } }
var userInitiatedProductSelectionReplaySubject = ReplaySubject<ProductSelection>.create(bufferSize: 1) { didSet { userInitiatedProductSelectionSubjectSetCallCount += 1 } }
var userInitiatedProductSelectionBehaviorSubject: BehaviorSubject<ProductSelection>! { didSet { userInitiatedProductSelectionSubjectSetCallCount += 1 } }
var userInitiatedProductSelectionRxSubject: Observable<ProductSelection>! { didSet { userInitiatedProductSelectionSubjectSetCallCount += 1 } }
public var userInitiatedProductSelection: Observable<ProductSelection> {
        get {
            if userInitiatedProductSelectionSubjectKind == 0 {
                return userInitiatedProductSelectionSubject
            } else if userInitiatedProductSelectionSubjectKind == 1 {
                return userInitiatedProductSelectionBehaviorSubject
            } else if userInitiatedProductSelectionSubjectKind == 2 {
                return userInitiatedProductSelectionReplaySubject
            } else {
                return userInitiatedProductSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelection> {
                userInitiatedProductSelectionSubject = val
                userInitiatedProductSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelection> {
                userInitiatedProductSelectionBehaviorSubject = val
                userInitiatedProductSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelection> {
                userInitiatedProductSelectionReplaySubject = val
                userInitiatedProductSelectionSubjectKind = 2
            } else {
                userInitiatedProductSelectionRxSubject = newValue
                userInitiatedProductSelectionSubjectKind = 3
            }
        }
    }
private var userImpressedProductSelectionSubjectKind = 0
var userImpressedProductSelectionSubjectSetCallCount = 0
var userImpressedProductSelectionSubject = PublishSubject<ProductSelection?>() { didSet { userImpressedProductSelectionSubjectSetCallCount += 1 } }
var userImpressedProductSelectionReplaySubject = ReplaySubject<ProductSelection?>.create(bufferSize: 1) { didSet { userImpressedProductSelectionSubjectSetCallCount += 1 } }
var userImpressedProductSelectionBehaviorSubject: BehaviorSubject<ProductSelection?>! { didSet { userImpressedProductSelectionSubjectSetCallCount += 1 } }
var userImpressedProductSelectionRxSubject: Observable<ProductSelection?>! { didSet { userImpressedProductSelectionSubjectSetCallCount += 1 } }
public var userImpressedProductSelection: Observable<ProductSelection?> {
        get {
            if userImpressedProductSelectionSubjectKind == 0 {
                return userImpressedProductSelectionSubject
            } else if userImpressedProductSelectionSubjectKind == 1 {
                return userImpressedProductSelectionBehaviorSubject
            } else if userImpressedProductSelectionSubjectKind == 2 {
                return userImpressedProductSelectionReplaySubject
            } else {
                return userImpressedProductSelectionRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelection?> {
                userImpressedProductSelectionSubject = val
                userImpressedProductSelectionSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelection?> {
                userImpressedProductSelectionBehaviorSubject = val
                userImpressedProductSelectionSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelection?> {
                userImpressedProductSelectionReplaySubject = val
                userImpressedProductSelectionSubjectKind = 2
            } else {
                userImpressedProductSelectionRxSubject = newValue
                userImpressedProductSelectionSubjectKind = 3
            }
        }
    }
}

class OutOfCoverageBuildableMock: OutOfCoverageBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (OutOfCoverageRouting))?
    func build() -> OutOfCoverageRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return OutOfCoverageRoutingMock()
    }
}

class ProductSelectionViewControllerListenerMock: ProductSelectionViewControllerListener {

    

    init() {

    }
        
    var bindFareCallCount = 0
    var bindFareHandler: ((FareBindingRequesting, PricingLabel) -> ())?
    func bindFare(fareRequest: FareBindingRequesting, target: PricingLabel)  {
        bindFareCallCount += 1
    
        if let bindFareHandler = bindFareHandler {
            bindFareHandler(fareRequest, target)
        }
        
    }
    
    var didSelectProductCallCount = 0
    var didSelectProductHandler: ((ProductId?) -> ())?
    func didSelectProduct(associatedId: ProductId?)  {
        didSelectProductCallCount += 1
    
        if let didSelectProductHandler = didSelectProductHandler {
            didSelectProductHandler(associatedId)
        }
        
    }
    
    var didShowTooltipCallCount = 0
    var didShowTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func didShowTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        didShowTooltipCallCount += 1
    
        if let didShowTooltipHandler = didShowTooltipHandler {
            didShowTooltipHandler(viewModel)
        }
        
    }
    
    var imagesForProductCallCount = 0
    var imagesForProductHandler: ((ProductViewModel, @escaping (ProductImageMap?) -> ()) -> ())?
    func imagesForProduct(productViewModel: ProductViewModel, completion: @escaping (ProductImageMap?) -> ())  {
        imagesForProductCallCount += 1
    
        if let imagesForProductHandler = imagesForProductHandler {
            imagesForProductHandler(productViewModel, completion)
        }
        
    }
    
    var didShowPricingViewForProductCallCount = 0
    var didShowPricingViewForProductHandler: ((ProductId, Any, String?, FareBindingType?) -> ())?
    func didShowPricingViewForProduct<T>(associatedId: ProductId, pricingView: T, placeholder: String?, fareBindingType: FareBindingType?)  {
        didShowPricingViewForProductCallCount += 1
    
        if let didShowPricingViewForProductHandler = didShowPricingViewForProductHandler {
            didShowPricingViewForProductHandler(associatedId, pricingView, placeholder, fareBindingType)
        }
        
    }
}

class SelectedProductConfigurationViewControllableMock: SelectedProductConfigurationViewControllable {

    
    init() {}
    init(listViewHeight: CGFloat = 0.0, uiviewController: UIViewController = UIViewController()) {
        self.listViewHeight = listViewHeight
        self.uiviewController = uiviewController
    }
        
    var viewListenerSetCallCount = 0
    var underlyingViewListener: SelectedProductConfigurationViewControllerViewListener? = nil
    var viewListener: SelectedProductConfigurationViewControllerViewListener? {
        get {
            return underlyingViewListener
        }
        set {
            underlyingViewListener = newValue
            viewListenerSetCallCount += 1
        }
    }
    
    var listViewHeightSetCallCount = 0
    var underlyingListViewHeight: CGFloat = 0.0
    var listViewHeight: CGFloat {
        get {
            return underlyingListViewHeight
        }
        set {
            underlyingListViewHeight = newValue
            listViewHeightSetCallCount += 1
        }
    }
    
    var presentConfigurationChildCallCount = 0
    var presentConfigurationChildHandler: ((ViewControllable) -> ())?
    func presentConfigurationChild(viewController: ViewControllable)  {
        presentConfigurationChildCallCount += 1
    
        if let presentConfigurationChildHandler = presentConfigurationChildHandler {
            presentConfigurationChildHandler(viewController)
        }
        
    }
    
    var dismissConfigurationChildCallCount = 0
    var dismissConfigurationChildHandler: (() -> ())?
    func dismissConfigurationChild()  {
        dismissConfigurationChildCallCount += 1
    
        if let dismissConfigurationChildHandler = dismissConfigurationChildHandler {
            dismissConfigurationChildHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class MainRoutingMock: MainRouting {

    
    init() {}
    init(mainActionableItem: MainActionableItem = MainActionableItemMock(), modeActionableItemStream: Observable<ModeActionableItem?> = PublishSubject(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.mainActionableItem = mainActionableItem
        self.modeActionableItemStream = modeActionableItemStream
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var mainActionableItemSetCallCount = 0
    var underlyingMainActionableItem: MainActionableItem = MainActionableItemMock()
    var mainActionableItem: MainActionableItem {
        get {
            return underlyingMainActionableItem
        }
        set {
            underlyingMainActionableItem = newValue
            mainActionableItemSetCallCount += 1
        }
    }
    
    var presentMenuCallCount = 0
    var presentMenuHandler: ((Bool) -> ())?
    func presentMenu(animated: Bool)  {
        presentMenuCallCount += 1
    
        if let presentMenuHandler = presentMenuHandler {
            presentMenuHandler(animated)
        }
        
    }
    
    var presentMenuLandingUrlCallCount = 0
    var presentMenuLandingUrlHandler: ((String?, Bool, ((_ menuActionableItem: MenuActionableItem?) -> ())?) -> ())?
    func presentMenu(landingUrl: String?, animated: Bool, completion: ((_ menuActionableItem: MenuActionableItem?) -> ())?)  {
        presentMenuLandingUrlCallCount += 1
    
        if let presentMenuLandingUrlHandler = presentMenuLandingUrlHandler {
            presentMenuLandingUrlHandler(landingUrl, animated, completion)
        }
        
    }
    
    var attachMenuCallCount = 0
    var attachMenuHandler: ((String?) -> (MenuRouting))?
    func attachMenu(landingUrl: String?) -> MenuRouting {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            return attachMenuHandler(landingUrl)
        }
        return MenuRoutingMock()
    }
    
    var hideMenuCallCount = 0
    var hideMenuHandler: (((() -> ())?) -> ())?
    func hideMenu(completion: (() -> ())?)  {
        hideMenuCallCount += 1
    
        if let hideMenuHandler = hideMenuHandler {
            hideMenuHandler(completion)
        }
        
    }
    
    var routeAwayFromCurrentMenuCallCount = 0
    var routeAwayFromCurrentMenuHandler: (((() -> ())?) -> ())?
    func routeAwayFromCurrentMenu(completion: (() -> ())?)  {
        routeAwayFromCurrentMenuCallCount += 1
    
        if let routeAwayFromCurrentMenuHandler = routeAwayFromCurrentMenuHandler {
            routeAwayFromCurrentMenuHandler(completion)
        }
        
    }
    
    var presentFullScreenCallCount = 0
    var presentFullScreenHandler: ((ViewableRouting, NavigationViewType) -> (Bool))?
    func presentFullScreen(router: ViewableRouting, inNavigationView: NavigationViewType) -> Bool {
        presentFullScreenCallCount += 1
    
        if let presentFullScreenHandler = presentFullScreenHandler {
            return presentFullScreenHandler(router, inNavigationView)
        }
        return false
    }
    
    var hideFullScreenCallCount = 0
    var hideFullScreenHandler: ((ViewableRouting, (() -> ())?) -> (Bool))?
    func hideFullScreen(router: ViewableRouting, completion: (() -> ())?) -> Bool {
        hideFullScreenCallCount += 1
    
        if let hideFullScreenHandler = hideFullScreenHandler {
            return hideFullScreenHandler(router, completion)
        }
        return false
    }
    
    var toggleNetworkErrorAlertCallCount = 0
    var toggleNetworkErrorAlertHandler: ((Bool) -> ())?
    func toggleNetworkErrorAlert(visible: Bool)  {
        toggleNetworkErrorAlertCallCount += 1
    
        if let toggleNetworkErrorAlertHandler = toggleNetworkErrorAlertHandler {
            toggleNetworkErrorAlertHandler(visible)
        }
        
    }
    
    var attachBugReporterCallCount = 0
    var attachBugReporterHandler: (() -> ())?
    func attachBugReporter()  {
        attachBugReporterCallCount += 1
    
        if let attachBugReporterHandler = attachBugReporterHandler {
            attachBugReporterHandler()
        }
        
    }
    
    var attachUpgradesCallCount = 0
    var attachUpgradesHandler: (() -> ())?
    func attachUpgrades()  {
        attachUpgradesCallCount += 1
    
        if let attachUpgradesHandler = attachUpgradesHandler {
            attachUpgradesHandler()
        }
        
    }
    
    private var modeActionableItemStreamSubjectKind = 0
    var modeActionableItemStreamSubjectSetCallCount = 0
    var modeActionableItemStreamSubject = PublishSubject<ModeActionableItem?>() { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStreamReplaySubject = ReplaySubject<ModeActionableItem?>.create(bufferSize: 1) { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStreamBehaviorSubject: BehaviorSubject<ModeActionableItem?>! { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStreamRxSubject: Observable<ModeActionableItem?>! { didSet { modeActionableItemStreamSubjectSetCallCount += 1 } }
    var modeActionableItemStream: Observable<ModeActionableItem?> {
        get {
            if modeActionableItemStreamSubjectKind == 0 {
                return modeActionableItemStreamSubject
            } else if modeActionableItemStreamSubjectKind == 1 {
                return modeActionableItemStreamBehaviorSubject
            } else if modeActionableItemStreamSubjectKind == 2 {
                return modeActionableItemStreamReplaySubject
            } else {
                return modeActionableItemStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ModeActionableItem?> {
                modeActionableItemStreamSubject = val
                modeActionableItemStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ModeActionableItem?> {
                modeActionableItemStreamBehaviorSubject = val
                modeActionableItemStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ModeActionableItem?> {
                modeActionableItemStreamReplaySubject = val
                modeActionableItemStreamSubjectKind = 2
            } else {
                modeActionableItemStreamRxSubject = newValue
                modeActionableItemStreamSubjectKind = 3
            }
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class DestinationPromptViewControllableMock: DestinationPromptViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var dismissDestinationEntryAccessoryCallCount = 0
    var dismissDestinationEntryAccessoryHandler: (() -> ())?
    func dismissDestinationEntryAccessory()  {
        dismissDestinationEntryAccessoryCallCount += 1
    
        if let dismissDestinationEntryAccessoryHandler = dismissDestinationEntryAccessoryHandler {
            dismissDestinationEntryAccessoryHandler()
        }
        
    }
    
    var presentDestinationEntryAccessoryCallCount = 0
    var presentDestinationEntryAccessoryHandler: ((UIViewController) -> ())?
    func presentDestinationEntryAccessory(viewController: UIViewController)  {
        presentDestinationEntryAccessoryCallCount += 1
    
        if let presentDestinationEntryAccessoryHandler = presentDestinationEntryAccessoryHandler {
            presentDestinationEntryAccessoryHandler(viewController)
        }
        
    }
    
    var updateBottomMarginCallCount = 0
    var updateBottomMarginHandler: ((Bool) -> ())?
    func updateBottomMargin(remove: Bool)  {
        updateBottomMarginCallCount += 1
    
        if let updateBottomMarginHandler = updateBottomMarginHandler {
            updateBottomMarginHandler(remove)
        }
        
    }
    
    var addTopAccessoryCallCount = 0
    var addTopAccessoryHandler: ((UIViewController) -> ())?
    func addTopAccessory(viewController: UIViewController)  {
        addTopAccessoryCallCount += 1
    
        if let addTopAccessoryHandler = addTopAccessoryHandler {
            addTopAccessoryHandler(viewController)
        }
        
    }
    
    var removeTopAccessoryCallCount = 0
    var removeTopAccessoryHandler: ((UIViewController) -> ())?
    func removeTopAccessory(viewController: UIViewController)  {
        removeTopAccessoryCallCount += 1
    
        if let removeTopAccessoryHandler = removeTopAccessoryHandler {
            removeTopAccessoryHandler(viewController)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var providedMapPaddingCallCount = 0
public var providedMapPaddingHandler: (() -> (ProvidedMapPadding))?
public func providedMapPadding() -> ProvidedMapPadding {
        providedMapPaddingCallCount += 1
    
        if let providedMapPaddingHandler = providedMapPaddingHandler {
            return providedMapPaddingHandler()
        }
        fatalError("providedMapPaddingHandler returns can't have a default value thus its handler must be set")
    }
}

class HomeInteractableMock: HomeInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: HomeRouting? = nil
    var router: HomeRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var acceleratorsListenerSetCallCount = 0
    var underlyingAcceleratorsListener: AcceleratorsListener_DEPRECATED? = nil
    var acceleratorsListener: AcceleratorsListener_DEPRECATED? {
        get {
            return underlyingAcceleratorsListener
        }
        set {
            underlyingAcceleratorsListener = newValue
            acceleratorsListenerSetCallCount += 1
        }
    }
    
    var homeListenerSetCallCount = 0
    var underlyingHomeListener: HomeListener? = nil
    var homeListener: HomeListener? {
        get {
            return underlyingHomeListener
        }
        set {
            underlyingHomeListener = newValue
            homeListenerSetCallCount += 1
        }
    }
    
    var didAttachFeedCallCount = 0
    var didAttachFeedHandler: ((FeedInteractable) -> ())?
    func didAttachFeed(feedInteractor: FeedInteractable)  {
        didAttachFeedCallCount += 1
    
        if let didAttachFeedHandler = didAttachFeedHandler {
            didAttachFeedHandler(feedInteractor)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var dismissFeedPermalinkCallCount = 0
public var dismissFeedPermalinkHandler: (() -> ())?
public func dismissFeedPermalink()  {
        dismissFeedPermalinkCallCount += 1
    
        if let dismissFeedPermalinkHandler = dismissFeedPermalinkHandler {
            dismissFeedPermalinkHandler()
        }
        
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var selectingAcceleratorCompletedCallCount = 0
public var selectingAcceleratorCompletedHandler: (() -> ())?
public func selectingAcceleratorCompleted()  {
        selectingAcceleratorCompletedCallCount += 1
    
        if let selectingAcceleratorCompletedHandler = selectingAcceleratorCompletedHandler {
            selectingAcceleratorCompletedHandler()
        }
        
    }
var acceleratorsDidUpdateCallCount = 0
public var acceleratorsDidUpdateHandler: ((Bool) -> ())?
public func acceleratorsDidUpdate(_ areAvailable: Bool)  {
        acceleratorsDidUpdateCallCount += 1
    
        if let acceleratorsDidUpdateHandler = acceleratorsDidUpdateHandler {
            acceleratorsDidUpdateHandler(areAvailable)
        }
        
    }
var wantDestinationCallCount = 0
public var wantDestinationHandler: (() -> ())?
public func wantDestination()  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler()
        }
        
    }
var didSelectStuntCallCount = 0
public var didSelectStuntHandler: ((FeedInteractable, VehicleViewId) -> ())?
public func didSelectStunt(_ interactor: FeedInteractable, vehicleViewId: VehicleViewId)  {
        didSelectStuntCallCount += 1
    
        if let didSelectStuntHandler = didSelectStuntHandler {
            didSelectStuntHandler(interactor, vehicleViewId)
        }
        
    }
var updateDimmingCallCount = 0
public var updateDimmingHandler: ((CGFloat, Bool) -> ())?
public func updateDimming(to opacity: CGFloat, allowsInteraction: Bool)  {
        updateDimmingCallCount += 1
    
        if let updateDimmingHandler = updateDimmingHandler {
            updateDimmingHandler(opacity, allowsInteraction)
        }
        
    }
var hideFeedCallCount = 0
public var hideFeedHandler: (((@escaping () -> ()) -> ()) -> ())?
public func hideFeed(andPerform actions: (@escaping () -> ()) -> ())  {
        hideFeedCallCount += 1
    
        if let hideFeedHandler = hideFeedHandler {
            hideFeedHandler(actions)
        }
        
    }
var waitForScheduleRideCallCount = 0
public var waitForScheduleRideHandler: (() -> (Observable<(ScheduledRidesDestinationEntryAccessoryActionableItem, ())>))?
public func waitForScheduleRide() -> Observable<(ScheduledRidesDestinationEntryAccessoryActionableItem, ())> {
        waitForScheduleRideCallCount += 1
    
        if let waitForScheduleRideHandler = waitForScheduleRideHandler {
            return waitForScheduleRideHandler()
        }
        return Observable.empty()
    }
var waitForFeedCallCount = 0
public var waitForFeedHandler: (() -> (Observable<(FeedActionableItem, ())>))?
public func waitForFeed() -> Observable<(FeedActionableItem, ())> {
        waitForFeedCallCount += 1
    
        if let waitForFeedHandler = waitForFeedHandler {
            return waitForFeedHandler()
        }
        return Observable.empty()
    }
var presentFeedPermalinkCallCount = 0
public var presentFeedPermalinkHandler: ((String) -> ())?
public func presentFeedPermalink(withPermalinkId permalinkId: String)  {
        presentFeedPermalinkCallCount += 1
    
        if let presentFeedPermalinkHandler = presentFeedPermalinkHandler {
            presentFeedPermalinkHandler(permalinkId)
        }
        
    }
}

class PlusOneInteractableCommonMock: PlusOneInteractableCommon {

    

    init() {

    }
        
    var plusOneListenerSetCallCount = 0
    var underlyingPlusOneListener: PlusOneInteractorListener? = nil
    var plusOneListener: PlusOneInteractorListener? {
        get {
            return underlyingPlusOneListener
        }
        set {
            underlyingPlusOneListener = newValue
            plusOneListenerSetCallCount += 1
        }
    }
}

class ProductConfigurationDataCachingMock: ProductConfigurationDataCaching {

    

    init() {

    }
        
    var saveCallCount = 0
    var saveHandler: ((RidersProductConfigurationData, CityId) -> ())?
    func save(productConfiguration: RidersProductConfigurationData, forCityId cityId: CityId)  {
        saveCallCount += 1
    
        if let saveHandler = saveHandler {
            saveHandler(productConfiguration, cityId)
        }
        
    }
    
    var productConfigurationCallCount = 0
    var productConfigurationHandler: ((CityId) -> (Observable<RidersProductConfigurationData?>))?
    func productConfiguration(forCityId cityId: CityId) -> Observable<RidersProductConfigurationData?> {
        productConfigurationCallCount += 1
    
        if let productConfigurationHandler = productConfigurationHandler {
            return productConfigurationHandler(cityId)
        }
        return Observable.empty()
    }
    
    var clearCallCount = 0
    var clearHandler: (() -> ())?
    func clear()  {
        clearCallCount += 1
    
        if let clearHandler = clearHandler {
            clearHandler()
        }
        
    }
}

class TripViewControllableMock: TripViewControllable {

    
    init() {}
    init(cardCollectionViewController: CardCollectionViewControllable = CardCollectionViewControllableMock(), isShowingScrim: Bool = false, themeStream: ThemeStream, uiviewController: UIViewController = UIViewController()) {
        self.cardCollectionViewController = cardCollectionViewController
        self.isShowingScrim = isShowingScrim
        self.themeStream = themeStream
        self.uiviewController = uiviewController
    }
        
    var titleSetCallCount = 0
    var underlyingTitle: String? = nil
    var title: String? {
        get {
            return underlyingTitle
        }
        set {
            underlyingTitle = newValue
            titleSetCallCount += 1
        }
    }
    
    var showTripHeaderViewControllerCallCount = 0
    public var showTripHeaderViewControllerHandler: ((TripHeaderViewControllable) -> ())?
    public func showTripHeaderViewController(viewController: TripHeaderViewControllable)  {
        showTripHeaderViewControllerCallCount += 1
    
        if let showTripHeaderViewControllerHandler = showTripHeaderViewControllerHandler {
            showTripHeaderViewControllerHandler(viewController)
        }
        
    }
    
    var cardCollectionViewControllerSetCallCount = 0
    var underlyingCardCollectionViewController: CardCollectionViewControllable = CardCollectionViewControllableMock()
    var cardCollectionViewController: CardCollectionViewControllable {
        get {
            return underlyingCardCollectionViewController
        }
        set {
            underlyingCardCollectionViewController = newValue
            cardCollectionViewControllerSetCallCount += 1
        }
    }
    
    var removeTripHeaderViewControllerIfNeededCallCount = 0
    public var removeTripHeaderViewControllerIfNeededHandler: (() -> ())?
    public func removeTripHeaderViewControllerIfNeeded()  {
        removeTripHeaderViewControllerIfNeededCallCount += 1
    
        if let removeTripHeaderViewControllerIfNeededHandler = removeTripHeaderViewControllerIfNeededHandler {
            removeTripHeaderViewControllerIfNeededHandler()
        }
        
    }
    
    var navigationListenerSetCallCount = 0
    var underlyingNavigationListener: TripViewControllerListener? = nil
    var navigationListener: TripViewControllerListener? {
        get {
            return underlyingNavigationListener
        }
        set {
            underlyingNavigationListener = newValue
            navigationListenerSetCallCount += 1
        }
    }
    
    var presentTripDetailsSectionCallCount = 0
    var presentTripDetailsSectionHandler: ((TripDetailsSectionProviding) -> ())?
    func presentTripDetailsSection(_ sectionProvider: TripDetailsSectionProviding)  {
        presentTripDetailsSectionCallCount += 1
    
        if let presentTripDetailsSectionHandler = presentTripDetailsSectionHandler {
            presentTripDetailsSectionHandler(sectionProvider)
        }
        
    }
    
    var dismissTripDetailsSectionIfNeededCallCount = 0
    var dismissTripDetailsSectionIfNeededHandler: (() -> ())?
    func dismissTripDetailsSectionIfNeeded()  {
        dismissTripDetailsSectionIfNeededCallCount += 1
    
        if let dismissTripDetailsSectionIfNeededHandler = dismissTripDetailsSectionIfNeededHandler {
            dismissTripDetailsSectionIfNeededHandler()
        }
        
    }
    
    var insertSectionProviderCallCount = 0
    var insertSectionProviderHandler: ((CardCollectionViewSectionProviding, Int) -> ())?
    func insertSectionProvider(sectionProvider: CardCollectionViewSectionProviding, atIndex: Int)  {
        insertSectionProviderCallCount += 1
    
        if let insertSectionProviderHandler = insertSectionProviderHandler {
            insertSectionProviderHandler(sectionProvider, atIndex)
        }
        
    }
    
    var removeSectionProviderCallCount = 0
    var removeSectionProviderHandler: ((CardCollectionViewSectionProviding) -> ())?
    func removeSectionProvider(sectionProvider: CardCollectionViewSectionProviding)  {
        removeSectionProviderCallCount += 1
    
        if let removeSectionProviderHandler = removeSectionProviderHandler {
            removeSectionProviderHandler(sectionProvider)
        }
        
    }
    
    var presentFeedCallCount = 0
    var presentFeedHandler: ((CardCollectionViewSectionProviding) -> ())?
    func presentFeed(sectionProvider: CardCollectionViewSectionProviding)  {
        presentFeedCallCount += 1
    
        if let presentFeedHandler = presentFeedHandler {
            presentFeedHandler(sectionProvider)
        }
        
    }
    
    var collapseCardCollectionViewControllerCallCount = 0
    var collapseCardCollectionViewControllerHandler: ((Bool) -> ())?
    func collapseCardCollectionViewController(animated: Bool)  {
        collapseCardCollectionViewControllerCallCount += 1
    
        if let collapseCardCollectionViewControllerHandler = collapseCardCollectionViewControllerHandler {
            collapseCardCollectionViewControllerHandler(animated)
        }
        
    }
    
    var showCancellationViewControllerCallCount = 0
    var showCancellationViewControllerHandler: ((TripCancellationViewControllable) -> ())?
    func showCancellationViewController(viewController: TripCancellationViewControllable)  {
        showCancellationViewControllerCallCount += 1
    
        if let showCancellationViewControllerHandler = showCancellationViewControllerHandler {
            showCancellationViewControllerHandler(viewController)
        }
        
    }
    
    var hideCancellationViewControllerCallCount = 0
    var hideCancellationViewControllerHandler: (() -> ())?
    func hideCancellationViewController()  {
        hideCancellationViewControllerCallCount += 1
    
        if let hideCancellationViewControllerHandler = hideCancellationViewControllerHandler {
            hideCancellationViewControllerHandler()
        }
        
    }
    
    var showInstructionsViewControllerCallCount = 0
    var showInstructionsViewControllerHandler: ((TripInstructionsViewControllable) -> ())?
    func showInstructionsViewController(viewController: TripInstructionsViewControllable)  {
        showInstructionsViewControllerCallCount += 1
    
        if let showInstructionsViewControllerHandler = showInstructionsViewControllerHandler {
            showInstructionsViewControllerHandler(viewController)
        }
        
    }
    
    var hideInstructionsViewControllerCallCount = 0
    var hideInstructionsViewControllerHandler: ((Bool) -> ())?
    func hideInstructionsViewController(animated: Bool)  {
        hideInstructionsViewControllerCallCount += 1
    
        if let hideInstructionsViewControllerHandler = hideInstructionsViewControllerHandler {
            hideInstructionsViewControllerHandler(animated)
        }
        
    }
    
    var showTripModalRIBCallCount = 0
    var showTripModalRIBHandler: ((ViewControllable) -> ())?
    func showTripModalRIB(viewController: ViewControllable)  {
        showTripModalRIBCallCount += 1
    
        if let showTripModalRIBHandler = showTripModalRIBHandler {
            showTripModalRIBHandler(viewController)
        }
        
    }
    
    var hideTripModalRIBCallCount = 0
    var hideTripModalRIBHandler: (() -> ())?
    func hideTripModalRIB()  {
        hideTripModalRIBCallCount += 1
    
        if let hideTripModalRIBHandler = hideTripModalRIBHandler {
            hideTripModalRIBHandler()
        }
        
    }
    
    var showTrayViewControllerCallCount = 0
    var showTrayViewControllerHandler: ((TripTrayViewControllable) -> ())?
    func showTrayViewController(viewController: TripTrayViewControllable)  {
        showTrayViewControllerCallCount += 1
    
        if let showTrayViewControllerHandler = showTrayViewControllerHandler {
            showTrayViewControllerHandler(viewController)
        }
        
    }
    
    var hideTrayViewControllerCallCount = 0
    var hideTrayViewControllerHandler: (() -> ())?
    func hideTrayViewController()  {
        hideTrayViewControllerCallCount += 1
    
        if let hideTrayViewControllerHandler = hideTrayViewControllerHandler {
            hideTrayViewControllerHandler()
        }
        
    }
    
    var showAlertControllerCallCount = 0
    var showAlertControllerHandler: ((String?, String) -> ())?
    func showAlertController(title: String?, message: String)  {
        showAlertControllerCallCount += 1
    
        if let showAlertControllerHandler = showAlertControllerHandler {
            showAlertControllerHandler(title, message)
        }
        
    }
    
    var showLocationEditorCallCount = 0
    var showLocationEditorHandler: ((ViewControllable) -> ())?
    func showLocationEditor(viewController: ViewControllable)  {
        showLocationEditorCallCount += 1
    
        if let showLocationEditorHandler = showLocationEditorHandler {
            showLocationEditorHandler(viewController)
        }
        
    }
    
    var hideLocationEditorCallCount = 0
    var hideLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func hideLocationEditor(completion: ((Bool) -> ())?)  {
        hideLocationEditorCallCount += 1
    
        if let hideLocationEditorHandler = hideLocationEditorHandler {
            hideLocationEditorHandler(completion)
        }
        
    }
    
    var showGenericLocationEditorCallCount = 0
    var showGenericLocationEditorHandler: ((ViewControllable) -> ())?
    func showGenericLocationEditor(viewController: ViewControllable)  {
        showGenericLocationEditorCallCount += 1
    
        if let showGenericLocationEditorHandler = showGenericLocationEditorHandler {
            showGenericLocationEditorHandler(viewController)
        }
        
    }
    
    var hideGenericLocationEditorCallCount = 0
    var hideGenericLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func hideGenericLocationEditor(completion: ((Bool) -> ())?)  {
        hideGenericLocationEditorCallCount += 1
    
        if let hideGenericLocationEditorHandler = hideGenericLocationEditorHandler {
            hideGenericLocationEditorHandler(completion)
        }
        
    }
    
    var isShowingScrimSetCallCount = 0
    var underlyingIsShowingScrim: Bool = false
    var isShowingScrim: Bool {
        get {
            return underlyingIsShowingScrim
        }
        set {
            underlyingIsShowingScrim = newValue
            isShowingScrimSetCallCount += 1
        }
    }
    
    var showFeedPermalinkCallCount = 0
    var showFeedPermalinkHandler: ((ViewControllable) -> ())?
    func showFeedPermalink(with viewController: ViewControllable)  {
        showFeedPermalinkCallCount += 1
    
        if let showFeedPermalinkHandler = showFeedPermalinkHandler {
            showFeedPermalinkHandler(viewController)
        }
        
    }
    
    var dismissFeedPermalinkCallCount = 0
    var dismissFeedPermalinkHandler: (() -> ())?
    func dismissFeedPermalink()  {
        dismissFeedPermalinkCallCount += 1
    
        if let dismissFeedPermalinkHandler = dismissFeedPermalinkHandler {
            dismissFeedPermalinkHandler()
        }
        
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
    
    var dismissPresentedModalViewControllersCallCount = 0
    var dismissPresentedModalViewControllersHandler: (() -> ())?
    func dismissPresentedModalViewControllers()  {
        dismissPresentedModalViewControllersCallCount += 1
    
        if let dismissPresentedModalViewControllersHandler = dismissPresentedModalViewControllersHandler {
            dismissPresentedModalViewControllersHandler()
        }
        
    }
    
    var showOfferViewControllerCallCount = 0
    var showOfferViewControllerHandler: ((ViewControllable) -> ())?
    func showOfferViewController(viewController: ViewControllable)  {
        showOfferViewControllerCallCount += 1
    
        if let showOfferViewControllerHandler = showOfferViewControllerHandler {
            showOfferViewControllerHandler(viewController)
        }
        
    }
    
    var hideOfferViewControllerCallCount = 0
    var hideOfferViewControllerHandler: ((ViewControllable) -> ())?
    func hideOfferViewController(viewController: ViewControllable)  {
        hideOfferViewControllerCallCount += 1
    
        if let hideOfferViewControllerHandler = hideOfferViewControllerHandler {
            hideOfferViewControllerHandler(viewController)
        }
        
    }
var dismissCallCount = 0
public var dismissHandler: ((Bool, (() -> ())?) -> ())?
public func dismiss(animated: Bool, completion: (() -> ())?)  {
        dismissCallCount += 1
    
        if let dismissHandler = dismissHandler {
            dismissHandler(animated, completion)
        }
        
    }
var presentCallCount = 0
public var presentHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
public func present(_ viewController: UIViewController, animated: Bool, completion: (() -> ())?)  {
        presentCallCount += 1
    
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
        
    }
var themeStreamSetCallCount = 0
var underlyingThemeStream: ThemeStream!
public var themeStream: ThemeStream {
        get {
            return underlyingThemeStream
        }
        set {
            underlyingThemeStream = newValue
            themeStreamSetCallCount += 1
        }
    }
var presentedViewControllerSetCallCount = 0
var underlyingPresentedViewController: UIViewController? = nil
public var presentedViewController: UIViewController? {
        get {
            return underlyingPresentedViewController
        }
        set {
            underlyingPresentedViewController = newValue
            presentedViewControllerSetCallCount += 1
        }
    }
var showAppSettingsCallCount = 0
public var showAppSettingsHandler: ((ActionSheetController) -> ())?
public func showAppSettings(_ appSettingsModalVC: ActionSheetController)  {
        showAppSettingsCallCount += 1
    
        if let showAppSettingsHandler = showAppSettingsHandler {
            showAppSettingsHandler(appSettingsModalVC)
        }
        
    }
var transitionFromViewControllerCallCount = 0
public var transitionFromViewControllerHandler: ((UIViewController?, UIViewController?, TransitionDirection, TransitionStyle) -> ())?
public func transitionFromViewController(_ fromViewController: UIViewController?, toViewController: UIViewController?, direction: TransitionDirection, transitionStyle: TransitionStyle)  {
        transitionFromViewControllerCallCount += 1
    
        if let transitionFromViewControllerHandler = transitionFromViewControllerHandler {
            transitionFromViewControllerHandler(fromViewController, toViewController, direction, transitionStyle)
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var showMapAlertControllerCallCount = 0
public var showMapAlertControllerHandler: ((Bool, ModularMapAlertOptions, @escaping (_ backgroundViews: [UIView]) -> BaseAlertController) -> ())?
public func showMapAlertController(dismissPresentedViewController: Bool, options: ModularMapAlertOptions, alertControllerFactory: @escaping (_ backgroundViews: [UIView]) -> BaseAlertController)  {
        showMapAlertControllerCallCount += 1
    
        if let showMapAlertControllerHandler = showMapAlertControllerHandler {
            showMapAlertControllerHandler(dismissPresentedViewController, options, alertControllerFactory)
        }
        
    }
var createBackgroundSensitiveAlertCallCount = 0
public var createBackgroundSensitiveAlertHandler: ((Any) -> (Any))?
public func createBackgroundSensitiveAlert<A: BaseAlertController>(_ handler: @escaping ((_ interactableViews: [UIView]) -> A)) -> A {
        createBackgroundSensitiveAlertCallCount += 1
    
        if let createBackgroundSensitiveAlertHandler = createBackgroundSensitiveAlertHandler {
            return createBackgroundSensitiveAlertHandler(handler) as! A
        }
        fatalError("createBackgroundSensitiveAlertHandler returns can't have a default value thus its handler must be set")
    }
var showTripModalViewControllerCallCount = 0
public var showTripModalViewControllerHandler: ((TripModalViewControllable) -> ())?
public func showTripModalViewController(viewController: TripModalViewControllable)  {
        showTripModalViewControllerCallCount += 1
    
        if let showTripModalViewControllerHandler = showTripModalViewControllerHandler {
            showTripModalViewControllerHandler(viewController)
        }
        
    }
var fullScreenMapTripModalWillShowCallCount = 0
public var fullScreenMapTripModalWillShowHandler: (() -> ())?
public func fullScreenMapTripModalWillShow()  {
        fullScreenMapTripModalWillShowCallCount += 1
    
        if let fullScreenMapTripModalWillShowHandler = fullScreenMapTripModalWillShowHandler {
            fullScreenMapTripModalWillShowHandler()
        }
        
    }
var hideTripModalViewControllerCallCount = 0
public var hideTripModalViewControllerHandler: (() -> ())?
public func hideTripModalViewController()  {
        hideTripModalViewControllerCallCount += 1
    
        if let hideTripModalViewControllerHandler = hideTripModalViewControllerHandler {
            hideTripModalViewControllerHandler()
        }
        
    }
var fullScreenMapTripModalWillHideCallCount = 0
public var fullScreenMapTripModalWillHideHandler: (() -> ())?
public func fullScreenMapTripModalWillHide()  {
        fullScreenMapTripModalWillHideCallCount += 1
    
        if let fullScreenMapTripModalWillHideHandler = fullScreenMapTripModalWillHideHandler {
            fullScreenMapTripModalWillHideHandler()
        }
        
    }
}

class RequestInteractableMock: RequestInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var plusOneCompletedCallCount = 0
    var plusOneCompletedHandler: (() -> ())?
    func plusOneCompleted()  {
        plusOneCompletedCallCount += 1
    
        if let plusOneCompletedHandler = plusOneCompletedHandler {
            plusOneCompletedHandler()
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: RequestRouting? = nil
    var router: RequestRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: RequestListener? = nil
    var listener: RequestListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var plusOneAbortedCallCount = 0
    var plusOneAbortedHandler: ((Bool) -> ())?
    func plusOneAborted(forceRefreshFares: Bool)  {
        plusOneAbortedCallCount += 1
    
        if let plusOneAbortedHandler = plusOneAbortedHandler {
            plusOneAbortedHandler(forceRefreshFares)
        }
        
    }
    
    var confirmationDidFinishCallCount = 0
    var confirmationDidFinishHandler: (() -> ())?
    func confirmationDidFinish()  {
        confirmationDidFinishCallCount += 1
    
        if let confirmationDidFinishHandler = confirmationDidFinishHandler {
            confirmationDidFinishHandler()
        }
        
    }
    
    var wantToEditPickupLocationCallCount = 0
    var wantToEditPickupLocationHandler: ((Bool) -> ())?
    func wantToEditPickupLocation(destinationHidden: Bool)  {
        wantToEditPickupLocationCallCount += 1
    
        if let wantToEditPickupLocationHandler = wantToEditPickupLocationHandler {
            wantToEditPickupLocationHandler(destinationHidden)
        }
        
    }
    
    var wantDestinationCallCount = 0
    var wantDestinationHandler: ((LocationEditorMode) -> ())?
    func wantDestination(mode: LocationEditorMode)  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler(mode)
        }
        
    }
    
    var wantToEditDestinationLocationCallCount = 0
    var wantToEditDestinationLocationHandler: (() -> ())?
    func wantToEditDestinationLocation()  {
        wantToEditDestinationLocationCallCount += 1
    
        if let wantToEditDestinationLocationHandler = wantToEditDestinationLocationHandler {
            wantToEditDestinationLocationHandler()
        }
        
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
    
    var wantPickupCallCount = 0
    var wantPickupHandler: ((LocationEditorMode) -> ())?
    func wantPickup(mode: LocationEditorMode)  {
        wantPickupCallCount += 1
    
        if let wantPickupHandler = wantPickupHandler {
            wantPickupHandler(mode)
        }
        
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var didSelectStuntCallCount = 0
    var didSelectStuntHandler: ((HomeInteractable, VehicleViewId) -> ())?
    func didSelectStunt(interactor: HomeInteractable, vehicleViewId: VehicleViewId)  {
        didSelectStuntCallCount += 1
    
        if let didSelectStuntHandler = didSelectStuntHandler {
            didSelectStuntHandler(interactor, vehicleViewId)
        }
        
    }
    
    var wantToDismissCallCount = 0
    var wantToDismissHandler: (() -> ())?
    func wantToDismiss()  {
        wantToDismissCallCount += 1
    
        if let wantToDismissHandler = wantToDismissHandler {
            wantToDismissHandler()
        }
        
    }
var wantHomeStateCallCount = 0
public var wantHomeStateHandler: (() -> ())?
public func wantHomeState()  {
        wantHomeStateCallCount += 1
    
        if let wantHomeStateHandler = wantHomeStateHandler {
            wantHomeStateHandler()
        }
        
    }
var wantSelectedProductCallCount = 0
public var wantSelectedProductHandler: ((ProductId) -> ())?
public func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var didUpdatePickupLocationCallCount = 0
public var didUpdatePickupLocationHandler: ((RequestLocation) -> ())?
public func didUpdatePickupLocation(location: RequestLocation)  {
        didUpdatePickupLocationCallCount += 1
    
        if let didUpdatePickupLocationHandler = didUpdatePickupLocationHandler {
            didUpdatePickupLocationHandler(location)
        }
        
    }
var didUpdateDestinationLocationsCallCount = 0
public var didUpdateDestinationLocationsHandler: (([RequestLocation]) -> ())?
public func didUpdateDestinationLocations(locations: [RequestLocation])  {
        didUpdateDestinationLocationsCallCount += 1
    
        if let didUpdateDestinationLocationsHandler = didUpdateDestinationLocationsHandler {
            didUpdateDestinationLocationsHandler(locations)
        }
        
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var locationEditorDidFinishCallCount = 0
var deactivateCallCount = 0
public var locationEditorDidFinishHandler: ((Bool) -> ())?
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
public func locationEditorDidFinish(destinationSelected: Bool)  {
        locationEditorDidFinishCallCount += 1
    
        if let locationEditorDidFinishHandler = locationEditorDidFinishHandler {
            locationEditorDidFinishHandler(destinationSelected)
        }
        
    }
var locationEditorDidTapBackCallCount = 0
public var locationEditorDidTapBackHandler: (() -> ())?
public func locationEditorDidTapBack()  {
        locationEditorDidTapBackCallCount += 1
    
        if let locationEditorDidTapBackHandler = locationEditorDidTapBackHandler {
            locationEditorDidTapBackHandler()
        }
        
    }
var didCompleteErrorHandlingCallCount = 0
public var didCompleteErrorHandlingHandler: ((RequestErrorHandlerResolution) -> ())?
public func didCompleteErrorHandling(resolution: RequestErrorHandlerResolution)  {
        didCompleteErrorHandlingCallCount += 1
    
        if let didCompleteErrorHandlingHandler = didCompleteErrorHandlingHandler {
            didCompleteErrorHandlingHandler(resolution)
        }
        
    }
var selectingAcceleratorCompletedCallCount = 0
public var selectingAcceleratorCompletedHandler: (() -> ())?
public func selectingAcceleratorCompleted()  {
        selectingAcceleratorCompletedCallCount += 1
    
        if let selectingAcceleratorCompletedHandler = selectingAcceleratorCompletedHandler {
            selectingAcceleratorCompletedHandler()
        }
        
    }
var acceleratorsDidUpdateCallCount = 0
public var acceleratorsDidUpdateHandler: ((Bool) -> ())?
public func acceleratorsDidUpdate(_ areAvailable: Bool)  {
        acceleratorsDidUpdateCallCount += 1
    
        if let acceleratorsDidUpdateHandler = acceleratorsDidUpdateHandler {
            acceleratorsDidUpdateHandler(areAvailable)
        }
        
    }
var acceleratorsUpdatedCallCount = 0
public var acceleratorsUpdatedHandler: ((Bool) -> ())?
public func acceleratorsUpdated(availability: Bool)  {
        acceleratorsUpdatedCallCount += 1
    
        if let acceleratorsUpdatedHandler = acceleratorsUpdatedHandler {
            acceleratorsUpdatedHandler(availability)
        }
        
    }
var wantLocationEditorCallCount = 0
public var wantLocationEditorHandler: ((LocationEditorContext, LocationEditorMode) -> ())?
public func wantLocationEditor(context: LocationEditorContext, mode: LocationEditorMode)  {
        wantLocationEditorCallCount += 1
    
        if let wantLocationEditorHandler = wantLocationEditorHandler {
            wantLocationEditorHandler(context, mode)
        }
        
    }
var cacheClientIDCallCount = 0
public var cacheClientIDHandler: ((String?) -> (Observable<(RequestActionableItem, Bool)>))?
public func cacheClientID(clientID: String?) -> Observable<(RequestActionableItem, Bool)> {
        cacheClientIDCallCount += 1
    
        if let cacheClientIDHandler = cacheClientIDHandler {
            return cacheClientIDHandler(clientID)
        }
        return Observable.empty()
    }
var setPickupCallCount = 0
public var setPickupHandler: ((RideRequestLocatable?) -> (Observable<(RequestPickupConfirmedActionableItem, Bool)>))?
public func setPickup(pickup: RideRequestLocatable?) -> Observable<(RequestPickupConfirmedActionableItem, Bool)> {
        setPickupCallCount += 1
    
        if let setPickupHandler = setPickupHandler {
            return setPickupHandler(pickup)
        }
        return Observable.empty()
    }
var waitForHomeCallCount = 0
public var waitForHomeHandler: (() -> (Observable<(HomeActionableItem, ())>))?
public func waitForHome() -> Observable<(HomeActionableItem, ())> {
        waitForHomeCallCount += 1
    
        if let waitForHomeHandler = waitForHomeHandler {
            return waitForHomeHandler()
        }
        return Observable.empty()
    }
var waitForHomeV2CallCount = 0
public var waitForHomeV2Handler: (() -> (Observable<(HomeActionableItemV2, ())>))?
public func waitForHomeV2() -> Observable<(HomeActionableItemV2, ())> {
        waitForHomeV2CallCount += 1
    
        if let waitForHomeV2Handler = waitForHomeV2Handler {
            return waitForHomeV2Handler()
        }
        return Observable.empty()
    }
var setProductCallCount = 0
public var setProductHandler: ((String?, Bool) -> (Observable<(RequestSetDestinationOrTransitionToConfirmationActionableItem, Bool)>))?
public func setProduct(productID: String?, forceSelection: Bool) -> Observable<(RequestSetDestinationOrTransitionToConfirmationActionableItem, Bool)> {
        setProductCallCount += 1
    
        if let setProductHandler = setProductHandler {
            return setProductHandler(productID, forceSelection)
        }
        return Observable.empty()
    }
var setDestinationCallCount = 0
public var setDestinationHandler: ((RideRequestLocatable?) -> (Observable<(RequestSetProductOrTransitionToConfirmationActionableItem, Bool)>))?
public func setDestination(destination: RideRequestLocatable?) -> Observable<(RequestSetProductOrTransitionToConfirmationActionableItem, Bool)> {
        setDestinationCallCount += 1
    
        if let setDestinationHandler = setDestinationHandler {
            return setDestinationHandler(destination)
        }
        return Observable.empty()
    }
var waitForConfirmationCallCount = 0
public var waitForConfirmationHandler: (() -> (Observable<(ConfirmationActionableItem, ())>))?
public func waitForConfirmation() -> Observable<(ConfirmationActionableItem, ())> {
        waitForConfirmationCallCount += 1
    
        if let waitForConfirmationHandler = waitForConfirmationHandler {
            return waitForConfirmationHandler()
        }
        return Observable.empty()
    }
var waitForConfirmationV2CallCount = 0
public var waitForConfirmationV2Handler: (() -> (Observable<(ConfirmationActionableItemV2, ())>))?
public func waitForConfirmationV2() -> Observable<(ConfirmationActionableItemV2, ())> {
        waitForConfirmationV2CallCount += 1
    
        if let waitForConfirmationV2Handler = waitForConfirmationV2Handler {
            return waitForConfirmationV2Handler()
        }
        return Observable.empty()
    }
var goToConfirmationCallCount = 0
public var goToConfirmationHandler: (() -> (Observable<(ConfirmationActionableItem, ())>))?
public func goToConfirmation() -> Observable<(ConfirmationActionableItem, ())> {
        goToConfirmationCallCount += 1
    
        if let goToConfirmationHandler = goToConfirmationHandler {
            return goToConfirmationHandler()
        }
        return Observable.empty()
    }
var goToConfirmationV2CallCount = 0
public var goToConfirmationV2Handler: (() -> (Observable<(ConfirmationActionableItemV2, ())>))?
public func goToConfirmationV2() -> Observable<(ConfirmationActionableItemV2, ())> {
        goToConfirmationV2CallCount += 1
    
        if let goToConfirmationV2Handler = goToConfirmationV2Handler {
            return goToConfirmationV2Handler()
        }
        return Observable.empty()
    }
}

class DualLocationEditorEntryViewControllableMock: DualLocationEditorEntryViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var dismissDestinationEntryAccessoryCallCount = 0
    var dismissDestinationEntryAccessoryHandler: (() -> ())?
    func dismissDestinationEntryAccessory()  {
        dismissDestinationEntryAccessoryCallCount += 1
    
        if let dismissDestinationEntryAccessoryHandler = dismissDestinationEntryAccessoryHandler {
            dismissDestinationEntryAccessoryHandler()
        }
        
    }
    
    var presentDestinationEntryAccessoryCallCount = 0
    var presentDestinationEntryAccessoryHandler: ((UIViewController) -> ())?
    func presentDestinationEntryAccessory(viewController: UIViewController)  {
        presentDestinationEntryAccessoryCallCount += 1
    
        if let presentDestinationEntryAccessoryHandler = presentDestinationEntryAccessoryHandler {
            presentDestinationEntryAccessoryHandler(viewController)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var providedMapPaddingCallCount = 0
public var providedMapPaddingHandler: (() -> (ProvidedMapPadding))?
public func providedMapPadding() -> ProvidedMapPadding {
        providedMapPaddingCallCount += 1
    
        if let providedMapPaddingHandler = providedMapPaddingHandler {
            return providedMapPaddingHandler()
        }
        fatalError("providedMapPaddingHandler returns can't have a default value thus its handler must be set")
    }
}

class TripRoutingMock: TripRouting {

    
    init() {}
    init(interactor: TripInteractable = TripInteractableMock(), viewController: TripViewControllable = TripViewControllableMock(), tripActionableItem: TripActionableItem = TripActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.viewController = viewController
        self.tripActionableItem = tripActionableItem
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: TripInteractable = TripInteractableMock()
    var interactor: TripInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var viewControllerSetCallCount = 0
    var underlyingViewController: TripViewControllable = TripViewControllableMock()
    var viewController: TripViewControllable {
        get {
            return underlyingViewController
        }
        set {
            underlyingViewController = newValue
            viewControllerSetCallCount += 1
        }
    }
    
    var tripActionableItemSetCallCount = 0
    var underlyingTripActionableItem: TripActionableItem = TripActionableItemMock()
    var tripActionableItem: TripActionableItem {
        get {
            return underlyingTripActionableItem
        }
        set {
            underlyingTripActionableItem = newValue
            tripActionableItemSetCallCount += 1
        }
    }
    
    var routeToCancellationCallCount = 0
    var routeToCancellationHandler: ((TripCancellationBuildable) -> ())?
    func routeToCancellation(builder: TripCancellationBuildable)  {
        routeToCancellationCallCount += 1
    
        if let routeToCancellationHandler = routeToCancellationHandler {
            routeToCancellationHandler(builder)
        }
        
    }
    
    var routeAwayFromCancellationCallCount = 0
    var routeAwayFromCancellationHandler: (() -> ())?
    func routeAwayFromCancellation()  {
        routeAwayFromCancellationCallCount += 1
    
        if let routeAwayFromCancellationHandler = routeAwayFromCancellationHandler {
            routeAwayFromCancellationHandler()
        }
        
    }
    
    var routeToInstructionsCallCount = 0
    var routeToInstructionsHandler: ((TripInstructionsBuildable) -> ())?
    func routeToInstructions(builder: TripInstructionsBuildable)  {
        routeToInstructionsCallCount += 1
    
        if let routeToInstructionsHandler = routeToInstructionsHandler {
            routeToInstructionsHandler(builder)
        }
        
    }
    
    var routeAwayFromInstructionsCallCount = 0
    var routeAwayFromInstructionsHandler: ((Bool) -> ())?
    func routeAwayFromInstructions(animated: Bool)  {
        routeAwayFromInstructionsCallCount += 1
    
        if let routeAwayFromInstructionsHandler = routeAwayFromInstructionsHandler {
            routeAwayFromInstructionsHandler(animated)
        }
        
    }
    
    var routeToDispatchingMapCallCount = 0
    var routeToDispatchingMapHandler: ((DispatchingMapBuildable) -> ())?
    func routeToDispatchingMap(builder: DispatchingMapBuildable)  {
        routeToDispatchingMapCallCount += 1
    
        if let routeToDispatchingMapHandler = routeToDispatchingMapHandler {
            routeToDispatchingMapHandler(builder)
        }
        
    }
    
    var routeAwayFromDispatchingMapCallCount = 0
    var routeAwayFromDispatchingMapHandler: (() -> ())?
    func routeAwayFromDispatchingMap()  {
        routeAwayFromDispatchingMapCallCount += 1
    
        if let routeAwayFromDispatchingMapHandler = routeAwayFromDispatchingMapHandler {
            routeAwayFromDispatchingMapHandler()
        }
        
    }
    
    var routeToTripMapCallCount = 0
    var routeToTripMapHandler: ((TripMapBuildable) -> ())?
    func routeToTripMap(builder: TripMapBuildable)  {
        routeToTripMapCallCount += 1
    
        if let routeToTripMapHandler = routeToTripMapHandler {
            routeToTripMapHandler(builder)
        }
        
    }
    
    var routeAwayFromTripMapCallCount = 0
    var routeAwayFromTripMapHandler: (() -> ())?
    func routeAwayFromTripMap()  {
        routeAwayFromTripMapCallCount += 1
    
        if let routeAwayFromTripMapHandler = routeAwayFromTripMapHandler {
            routeAwayFromTripMapHandler()
        }
        
    }
    
    var routeToLocationEditorCallCount = 0
    var routeToLocationEditorHandler: ((LocationEditorConfiguration) -> ())?
    func routeToLocationEditor(configuration: LocationEditorConfiguration)  {
        routeToLocationEditorCallCount += 1
    
        if let routeToLocationEditorHandler = routeToLocationEditorHandler {
            routeToLocationEditorHandler(configuration)
        }
        
    }
    
    var routeAwayFromLocationEditorCallCount = 0
    var routeAwayFromLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func routeAwayFromLocationEditor(completion: ((Bool) -> ())?)  {
        routeAwayFromLocationEditorCallCount += 1
    
        if let routeAwayFromLocationEditorHandler = routeAwayFromLocationEditorHandler {
            routeAwayFromLocationEditorHandler(completion)
        }
        
    }
    
    var routeToGenericLocationEditorCallCount = 0
    var routeToGenericLocationEditorHandler: ((GenericLocationEditorConfiguration) -> ())?
    func routeToGenericLocationEditor(configuration: GenericLocationEditorConfiguration)  {
        routeToGenericLocationEditorCallCount += 1
    
        if let routeToGenericLocationEditorHandler = routeToGenericLocationEditorHandler {
            routeToGenericLocationEditorHandler(configuration)
        }
        
    }
    
    var routeAwayFromGenericLocationEditorCallCount = 0
    var routeAwayFromGenericLocationEditorHandler: ((((Bool) -> ())?) -> ())?
    func routeAwayFromGenericLocationEditor(completion: ((Bool) -> ())?)  {
        routeAwayFromGenericLocationEditorCallCount += 1
    
        if let routeAwayFromGenericLocationEditorHandler = routeAwayFromGenericLocationEditorHandler {
            routeAwayFromGenericLocationEditorHandler(completion)
        }
        
    }
    
    var routeToFeedPermalinkCallCount = 0
    var routeToFeedPermalinkHandler: ((String, FeedPermalinkBuildable) -> ())?
    func routeToFeedPermalink(with permalinkId: String, builder: FeedPermalinkBuildable)  {
        routeToFeedPermalinkCallCount += 1
    
        if let routeToFeedPermalinkHandler = routeToFeedPermalinkHandler {
            routeToFeedPermalinkHandler(permalinkId, builder)
        }
        
    }
    
    var routeAwayFromFeedPermalinkCallCount = 0
    var routeAwayFromFeedPermalinkHandler: (() -> ())?
    func routeAwayFromFeedPermalink()  {
        routeAwayFromFeedPermalinkCallCount += 1
    
        if let routeAwayFromFeedPermalinkHandler = routeAwayFromFeedPermalinkHandler {
            routeAwayFromFeedPermalinkHandler()
        }
        
    }
    
    var routeToTripCardsCallCount = 0
    var routeToTripCardsHandler: (() -> ())?
    func routeToTripCards()  {
        routeToTripCardsCallCount += 1
    
        if let routeToTripCardsHandler = routeToTripCardsHandler {
            routeToTripCardsHandler()
        }
        
    }
    
    var routeAwayFromTripCardsCallCount = 0
    var routeAwayFromTripCardsHandler: (() -> ())?
    func routeAwayFromTripCards()  {
        routeAwayFromTripCardsCallCount += 1
    
        if let routeAwayFromTripCardsHandler = routeAwayFromTripCardsHandler {
            routeAwayFromTripCardsHandler()
        }
        
    }
    
    var routeToTripTrayCallCount = 0
    var routeToTripTrayHandler: ((TripTrayBuildable) -> ())?
    func routeToTripTray(builder: TripTrayBuildable)  {
        routeToTripTrayCallCount += 1
    
        if let routeToTripTrayHandler = routeToTripTrayHandler {
            routeToTripTrayHandler(builder)
        }
        
    }
    
    var routeAwayFromTripTrayCallCount = 0
    var routeAwayFromTripTrayHandler: (() -> ())?
    func routeAwayFromTripTray()  {
        routeAwayFromTripTrayCallCount += 1
    
        if let routeAwayFromTripTrayHandler = routeAwayFromTripTrayHandler {
            routeAwayFromTripTrayHandler()
        }
        
    }
    
    var routeToSafetyActionSheetCallCount = 0
    var routeToSafetyActionSheetHandler: ((SafetyActionSheet, SafetyCenterActionSheetIncidentType) -> ())?
    func routeToSafetyActionSheet(with actionSheet: SafetyActionSheet, incidentType: SafetyCenterActionSheetIncidentType)  {
        routeToSafetyActionSheetCallCount += 1
    
        if let routeToSafetyActionSheetHandler = routeToSafetyActionSheetHandler {
            routeToSafetyActionSheetHandler(actionSheet, incidentType)
        }
        
    }
    
    var routeAwayFromSafetyActionSheetCallCount = 0
    var routeAwayFromSafetyActionSheetHandler: (() -> ())?
    func routeAwayFromSafetyActionSheet()  {
        routeAwayFromSafetyActionSheetCallCount += 1
    
        if let routeAwayFromSafetyActionSheetHandler = routeAwayFromSafetyActionSheetHandler {
            routeAwayFromSafetyActionSheetHandler()
        }
        
    }
    
    var routeToRiderOfferCallCount = 0
    var routeToRiderOfferHandler: ((RiderOfferBuildable, RiderOfferListener) -> ())?
    func routeToRiderOffer(buildable: RiderOfferBuildable, offerListener: RiderOfferListener)  {
        routeToRiderOfferCallCount += 1
    
        if let routeToRiderOfferHandler = routeToRiderOfferHandler {
            routeToRiderOfferHandler(buildable, offerListener)
        }
        
    }
    
    var routeAwayFromRiderOfferCallCount = 0
    var routeAwayFromRiderOfferHandler: (() -> ())?
    func routeAwayFromRiderOffer()  {
        routeAwayFromRiderOfferCallCount += 1
    
        if let routeAwayFromRiderOfferHandler = routeAwayFromRiderOfferHandler {
            routeAwayFromRiderOfferHandler()
        }
        
    }
    
    var routeToModalRIBCallCount = 0
    var routeToModalRIBHandler: ((ModalRIBRouting) -> ())?
    func routeToModalRIB(_ router: ModalRIBRouting)  {
        routeToModalRIBCallCount += 1
    
        if let routeToModalRIBHandler = routeToModalRIBHandler {
            routeToModalRIBHandler(router)
        }
        
    }
    
    var routeAwayFromModalRIBCallCount = 0
    var routeAwayFromModalRIBHandler: (() -> ())?
    func routeAwayFromModalRIB()  {
        routeAwayFromModalRIBCallCount += 1
    
        if let routeAwayFromModalRIBHandler = routeAwayFromModalRIBHandler {
            routeAwayFromModalRIBHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ConfirmationViewControllerListenerMock: ConfirmationViewControllerListener {

    

    init() {

    }
        
    var didTapDestinationEntryCallCount = 0
    var didTapDestinationEntryHandler: ((ConfirmationViewControllable) -> ())?
    func didTapDestinationEntry(confirmationViewController: ConfirmationViewControllable)  {
        didTapDestinationEntryCallCount += 1
    
        if let didTapDestinationEntryHandler = didTapDestinationEntryHandler {
            didTapDestinationEntryHandler(confirmationViewController)
        }
        
    }
    
    var didTapBackToUberHomeCallCount = 0
    var didTapBackToUberHomeHandler: (() -> ())?
    func didTapBackToUberHome()  {
        didTapBackToUberHomeCallCount += 1
    
        if let didTapBackToUberHomeHandler = didTapBackToUberHomeHandler {
            didTapBackToUberHomeHandler()
        }
        
    }
}

public class TripHeaderRootViewControllableMock: TripHeaderRootViewControllable {

    
    public init() {}
    public init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var showTripHeaderViewControllerCallCount = 0
    public var showTripHeaderViewControllerHandler: ((TripHeaderViewControllable) -> ())?
    public func showTripHeaderViewController(viewController: TripHeaderViewControllable)  {
        showTripHeaderViewControllerCallCount += 1
    
        if let showTripHeaderViewControllerHandler = showTripHeaderViewControllerHandler {
            showTripHeaderViewControllerHandler(viewController)
        }
        
    }
    
    var removeTripHeaderViewControllerIfNeededCallCount = 0
    public var removeTripHeaderViewControllerIfNeededHandler: (() -> ())?
    public func removeTripHeaderViewControllerIfNeeded()  {
        removeTripHeaderViewControllerIfNeededCallCount += 1
    
        if let removeTripHeaderViewControllerIfNeededHandler = removeTripHeaderViewControllerIfNeededHandler {
            removeTripHeaderViewControllerIfNeededHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class HomeRoutingMock: HomeRouting {

    
    init() {}
    init(interactor: HomeInteractable = HomeInteractableMock(), homeActionableItem: HomeActionableItem = HomeActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.homeActionableItem = homeActionableItem
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: HomeInteractable = HomeInteractableMock()
    var interactor: HomeInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var homeActionableItemSetCallCount = 0
    var underlyingHomeActionableItem: HomeActionableItem = HomeActionableItemMock()
    var homeActionableItem: HomeActionableItem {
        get {
            return underlyingHomeActionableItem
        }
        set {
            underlyingHomeActionableItem = newValue
            homeActionableItemSetCallCount += 1
        }
    }
    
    var routeToAccessoriesCallCount = 0
    var routeToAccessoriesHandler: (([DestinationEntryAccessoryBuildable]) -> ([DestinationEntryAccessoryActionableItem]))?
    func routeToAccessories(accessoryBuilders: [DestinationEntryAccessoryBuildable]) -> [DestinationEntryAccessoryActionableItem] {
        routeToAccessoriesCallCount += 1
    
        if let routeToAccessoriesHandler = routeToAccessoriesHandler {
            return routeToAccessoriesHandler(accessoryBuilders)
        }
        return [DestinationEntryAccessoryActionableItem]()
    }
    
    var routeToEdgesCallCount = 0
    var routeToEdgesHandler: ((DestinationEntryEdges<DestinationEntryEdgeBuildable>) -> ())?
    func routeToEdges(edgeBuilders: DestinationEntryEdges<DestinationEntryEdgeBuildable>)  {
        routeToEdgesCallCount += 1
    
        if let routeToEdgesHandler = routeToEdgesHandler {
            routeToEdgesHandler(edgeBuilders)
        }
        
    }
    
    var routeToPermalinkCallCount = 0
    var routeToPermalinkHandler: ((String, FeedPermalinkBuildable) -> ())?
    func routeToPermalink(with permalinkId: String, builder: FeedPermalinkBuildable)  {
        routeToPermalinkCallCount += 1
    
        if let routeToPermalinkHandler = routeToPermalinkHandler {
            routeToPermalinkHandler(permalinkId, builder)
        }
        
    }
    
    var detachPermalinkCallCount = 0
    var detachPermalinkHandler: (() -> ())?
    func detachPermalink()  {
        detachPermalinkCallCount += 1
    
        if let detachPermalinkHandler = detachPermalinkHandler {
            detachPermalinkHandler()
        }
        
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((HomeMapBuildable) -> ())?
    func routeToMap(builder: HomeMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToTopRowCallCount = 0
    var routeToTopRowHandler: ((TopRowBuildable) -> ())?
    func routeToTopRow(builder: TopRowBuildable)  {
        routeToTopRowCallCount += 1
    
        if let routeToTopRowHandler = routeToTopRowHandler {
            routeToTopRowHandler(builder)
        }
        
    }
    
    var routeFromTopRowCallCount = 0
    var routeFromTopRowHandler: (() -> ())?
    func routeFromTopRow()  {
        routeFromTopRowCallCount += 1
    
        if let routeFromTopRowHandler = routeFromTopRowHandler {
            routeFromTopRowHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class ConfirmationViewControllableMock: ConfirmationViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationViewControllerListener? = nil
    var listener: ConfirmationViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var transitionListenerSetCallCount = 0
    var underlyingTransitionListener: ConfirmationViewControllerTransitionListener? = nil
    var transitionListener: ConfirmationViewControllerTransitionListener? {
        get {
            return underlyingTransitionListener
        }
        set {
            underlyingTransitionListener = newValue
            transitionListenerSetCallCount += 1
        }
    }
    
    var showProductSelectionViewControllerCallCount = 0
    var showProductSelectionViewControllerHandler: ((UIViewController, UIViewController) -> ())?
    func showProductSelectionViewController(productSelectionViewController: UIViewController, productOptionsViewController: UIViewController)  {
        showProductSelectionViewControllerCallCount += 1
    
        if let showProductSelectionViewControllerHandler = showProductSelectionViewControllerHandler {
            showProductSelectionViewControllerHandler(productSelectionViewController, productOptionsViewController)
        }
        
    }
    
    var showProductOptionsContentCallCount = 0
    var showProductOptionsContentHandler: ((ProductOptionsItemContentViewControllable) -> ())?
    func showProductOptionsContent(contentViewController viewController: ProductOptionsItemContentViewControllable)  {
        showProductOptionsContentCallCount += 1
    
        if let showProductOptionsContentHandler = showProductOptionsContentHandler {
            showProductOptionsContentHandler(viewController)
        }
        
    }
    
    var dismissProductOptionsContentCallCount = 0
    var dismissProductOptionsContentHandler: ((ProductOptionsItemContentViewControllable) -> ())?
    func dismissProductOptionsContent(contentViewController viewController: ProductOptionsItemContentViewControllable)  {
        dismissProductOptionsContentCallCount += 1
    
        if let dismissProductOptionsContentHandler = dismissProductOptionsContentHandler {
            dismissProductOptionsContentHandler(viewController)
        }
        
    }
    
    var showDestinationEntryCallCount = 0
    var showDestinationEntryHandler: (() -> ())?
    func showDestinationEntry()  {
        showDestinationEntryCallCount += 1
    
        if let showDestinationEntryHandler = showDestinationEntryHandler {
            showDestinationEntryHandler()
        }
        
    }
    
    var dismissDestinationEntryCallCount = 0
    var dismissDestinationEntryHandler: (() -> ())?
    func dismissDestinationEntry()  {
        dismissDestinationEntryCallCount += 1
    
        if let dismissDestinationEntryHandler = dismissDestinationEntryHandler {
            dismissDestinationEntryHandler()
        }
        
    }
    
    var showFirstTimeUserExperienceCallCount = 0
    var showFirstTimeUserExperienceHandler: ((Bool) -> ())?
    func showFirstTimeUserExperience(dismissOnCalloutTap: Bool)  {
        showFirstTimeUserExperienceCallCount += 1
    
        if let showFirstTimeUserExperienceHandler = showFirstTimeUserExperienceHandler {
            showFirstTimeUserExperienceHandler(dismissOnCalloutTap)
        }
        
    }
    
    var dismissFirstTimeUserExperienceCallCount = 0
    var dismissFirstTimeUserExperienceHandler: (() -> ())?
    func dismissFirstTimeUserExperience()  {
        dismissFirstTimeUserExperienceCallCount += 1
    
        if let dismissFirstTimeUserExperienceHandler = dismissFirstTimeUserExperienceHandler {
            dismissFirstTimeUserExperienceHandler()
        }
        
    }
    
    var showConfirmationMapViewControllableCallCount = 0
    var showConfirmationMapViewControllableHandler: ((ConfirmationMapLayerControllable) -> ())?
    func showConfirmationMapViewControllable(confirmationMapLayerControllable: ConfirmationMapLayerControllable)  {
        showConfirmationMapViewControllableCallCount += 1
    
        if let showConfirmationMapViewControllableHandler = showConfirmationMapViewControllableHandler {
            showConfirmationMapViewControllableHandler(confirmationMapLayerControllable)
        }
        
    }
    
    var showActionViewControllableCallCount = 0
    var showActionViewControllableHandler: ((ViewControllable) -> ())?
    func showActionViewControllable(_ actionViewControllable: ViewControllable)  {
        showActionViewControllableCallCount += 1
    
        if let showActionViewControllableHandler = showActionViewControllableHandler {
            showActionViewControllableHandler(actionViewControllable)
        }
        
    }
    
    var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
    
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }
    
    var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
    
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }
    
    var updateRideContextEntryTypeCallCount = 0
    var updateRideContextEntryTypeHandler: ((RideContextEntryType) -> ())?
    func updateRideContextEntryType(_ type: RideContextEntryType)  {
        updateRideContextEntryTypeCallCount += 1
    
        if let updateRideContextEntryTypeHandler = updateRideContextEntryTypeHandler {
            updateRideContextEntryTypeHandler(type)
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var showConfirmationActionAccessoryCallCount = 0
public var showConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryViewControllable?, @escaping () -> ()) -> ())?
public func showConfirmationActionAccessory(_ accessory: ConfirmationActionAccessoryViewControllable?, completion: @escaping () -> ())  {
        showConfirmationActionAccessoryCallCount += 1
    
        if let showConfirmationActionAccessoryHandler = showConfirmationActionAccessoryHandler {
            showConfirmationActionAccessoryHandler(accessory, completion)
        }
        
    }
}

class ConfirmationRoutingMock: ConfirmationRouting {

    
    init() {}
    init(interactor: ConfirmationInteractable = ConfirmationInteractableMock(), confirmationViewControllable: ConfirmationViewControllable = ConfirmationViewControllableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.confirmationViewControllable = confirmationViewControllable
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ConfirmationInteractable = ConfirmationInteractableMock()
    var interactor: ConfirmationInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var confirmationViewControllableSetCallCount = 0
    var underlyingConfirmationViewControllable: ConfirmationViewControllable = ConfirmationViewControllableMock()
    var confirmationViewControllable: ConfirmationViewControllable {
        get {
            return underlyingConfirmationViewControllable
        }
        set {
            underlyingConfirmationViewControllable = newValue
            confirmationViewControllableSetCallCount += 1
        }
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((ConfirmationMapBuildable) -> ())?
    func routeToMap(builder: ConfirmationMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeAwayFromMapCallCount = 0
    var routeAwayFromMapHandler: (() -> ())?
    func routeAwayFromMap()  {
        routeAwayFromMapCallCount += 1
    
        if let routeAwayFromMapHandler = routeAwayFromMapHandler {
            routeAwayFromMapHandler()
        }
        
    }
    
    var routeToConfirmationActionAccessoryCallCount = 0
    var routeToConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryRouting?) -> ())?
    func routeToConfirmationActionAccessory(accessory: ConfirmationActionAccessoryRouting?)  {
        routeToConfirmationActionAccessoryCallCount += 1
    
        if let routeToConfirmationActionAccessoryHandler = routeToConfirmationActionAccessoryHandler {
            routeToConfirmationActionAccessoryHandler(accessory)
        }
        
    }
    
    var routeToActionCallCount = 0
    var routeToActionHandler: ((ConfirmationActionRouting) -> ())?
    func routeToAction(_ actionRouter: ConfirmationActionRouting)  {
        routeToActionCallCount += 1
    
        if let routeToActionHandler = routeToActionHandler {
            routeToActionHandler(actionRouter)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class SelectedProductPresentableMock: SelectedProductPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductPresentableListener? = nil
    var listener: SelectedProductPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateViewModelCallCount = 0
    var updateViewModelHandler: ((ProductSelectionCellViewModel) -> ())?
    func updateViewModel(_ viewModel: ProductSelectionCellViewModel)  {
        updateViewModelCallCount += 1
    
        if let updateViewModelHandler = updateViewModelHandler {
            updateViewModelHandler(viewModel)
        }
        
    }
    
    var updateFareBreakdownViewModelCallCount = 0
    var updateFareBreakdownViewModelHandler: ((ProductFareBreakdownViewModel) -> ())?
    func updateFareBreakdownViewModel(_ viewModel: ProductFareBreakdownViewModel)  {
        updateFareBreakdownViewModelCallCount += 1
    
        if let updateFareBreakdownViewModelHandler = updateFareBreakdownViewModelHandler {
            updateFareBreakdownViewModelHandler(viewModel)
        }
        
    }
var updateFareViewModelCallCount = 0
public var updateFareViewModelHandler: ((ProductCellFareViewModel?, ProductItemId) -> ())?
public func updateFareViewModel(_ viewModel: ProductCellFareViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateFareViewModelCallCount += 1
    
        if let updateFareViewModelHandler = updateFareViewModelHandler {
            updateFareViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateCapacityViewModelCallCount = 0
public var updateCapacityViewModelHandler: ((ProductCellCapacityViewModel?, ProductItemId) -> ())?
public func updateCapacityViewModel(_ viewModel: ProductCellCapacityViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateCapacityViewModelCallCount += 1
    
        if let updateCapacityViewModelHandler = updateCapacityViewModelHandler {
            updateCapacityViewModelHandler(viewModel, productItemId)
        }
        
    }
var updatePromoViewModelCallCount = 0
public var updatePromoViewModelHandler: ((ProductCellPromoViewModel?, ProductItemId) -> ())?
public func updatePromoViewModel(_ viewModel: ProductCellPromoViewModel?, forProductItemId productItemId: ProductItemId)  {
        updatePromoViewModelCallCount += 1
    
        if let updatePromoViewModelHandler = updatePromoViewModelHandler {
            updatePromoViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateEtdViewModelCallCount = 0
public var updateEtdViewModelHandler: ((ProductCellEtdViewModel?, ProductItemId) -> ())?
public func updateEtdViewModel(_ viewModel: ProductCellEtdViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateEtdViewModelCallCount += 1
    
        if let updateEtdViewModelHandler = updateEtdViewModelHandler {
            updateEtdViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateTitleViewModelCallCount = 0
public var updateTitleViewModelHandler: ((ProductCellTitleViewModel?, ProductItemId) -> ())?
public func updateTitleViewModel(_ viewModel: ProductCellTitleViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateTitleViewModelCallCount += 1
    
        if let updateTitleViewModelHandler = updateTitleViewModelHandler {
            updateTitleViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateDescriptionViewModelCallCount = 0
public var updateDescriptionViewModelHandler: ((ProductCellDescriptionViewModel?, ProductItemId) -> ())?
public func updateDescriptionViewModel(_ viewModel: ProductCellDescriptionViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateDescriptionViewModelCallCount += 1
    
        if let updateDescriptionViewModelHandler = updateDescriptionViewModelHandler {
            updateDescriptionViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateSupplementaryViewModelCallCount = 0
public var updateSupplementaryViewModelHandler: ((ProductCellSupplementaryViewModel?, ProductItemId) -> ())?
public func updateSupplementaryViewModel(_ viewModel: ProductCellSupplementaryViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateSupplementaryViewModelCallCount += 1
    
        if let updateSupplementaryViewModelHandler = updateSupplementaryViewModelHandler {
            updateSupplementaryViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateIconViewModelCallCount = 0
public var updateIconViewModelHandler: ((ProductCellIconViewModel?, ProductItemId) -> ())?
public func updateIconViewModel(_ viewModel: ProductCellIconViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateIconViewModelCallCount += 1
    
        if let updateIconViewModelHandler = updateIconViewModelHandler {
            updateIconViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateRecommendationViewModelCallCount = 0
public var updateRecommendationViewModelHandler: ((ProductCellRecommendationViewModel?, ProductItemId) -> ())?
public func updateRecommendationViewModel(_ viewModel: ProductCellRecommendationViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateRecommendationViewModelCallCount += 1
    
        if let updateRecommendationViewModelHandler = updateRecommendationViewModelHandler {
            updateRecommendationViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateFareExplainerViewModelCallCount = 0
public var updateFareExplainerViewModelHandler: ((ProductCellFareExplainerViewModel?, ProductItemId) -> ())?
public func updateFareExplainerViewModel(_ viewModel: ProductCellFareExplainerViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateFareExplainerViewModelCallCount += 1
    
        if let updateFareExplainerViewModelHandler = updateFareExplainerViewModelHandler {
            updateFareExplainerViewModelHandler(viewModel, productItemId)
        }
        
    }
}

class PlusOnePresentableMock: PlusOnePresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: PlusOnePresenterListener? = nil
    var listener: PlusOnePresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class ModeListenerMock: ModeListener {

    

    init() {

    }
    var didInitiateMenuOpenCallCount = 0
public var didInitiateMenuOpenHandler: (() -> ())?
public func didInitiateMenuOpen()  {
        didInitiateMenuOpenCallCount += 1
    
        if let didInitiateMenuOpenHandler = didInitiateMenuOpenHandler {
            didInitiateMenuOpenHandler()
        }
        
    }
var didInitiateMenuItemCloseCallCount = 0
public var didInitiateMenuItemCloseHandler: (() -> ())?
public func didInitiateMenuItemClose()  {
        didInitiateMenuItemCloseCallCount += 1
    
        if let didInitiateMenuItemCloseHandler = didInitiateMenuItemCloseHandler {
            didInitiateMenuItemCloseHandler()
        }
        
    }
}

class SelectedProductConfigurationPresentableMock: SelectedProductConfigurationPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: SelectedProductConfigurationPresentableListener? = nil
    var listener: SelectedProductConfigurationPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class TripDetailsListenerMock: TripDetailsListener {

    

    init() {

    }
        
    var cancelTripWithoutConfirmingCallCount = 0
    var cancelTripWithoutConfirmingHandler: (() -> ())?
    func cancelTripWithoutConfirming()  {
        cancelTripWithoutConfirmingCallCount += 1
    
        if let cancelTripWithoutConfirmingHandler = cancelTripWithoutConfirmingHandler {
            cancelTripWithoutConfirmingHandler()
        }
        
    }
    
    var tripDetailsDidCancelTripCallCount = 0
    var tripDetailsDidCancelTripHandler: (() -> ())?
    func tripDetailsDidCancelTrip()  {
        tripDetailsDidCancelTripCallCount += 1
    
        if let tripDetailsDidCancelTripHandler = tripDetailsDidCancelTripHandler {
            tripDetailsDidCancelTripHandler()
        }
        
    }
    
    var tripDetailsWillPresentEmergencyModalCallCount = 0
    var tripDetailsWillPresentEmergencyModalHandler: (() -> ())?
    func tripDetailsWillPresentEmergencyModal()  {
        tripDetailsWillPresentEmergencyModalCallCount += 1
    
        if let tripDetailsWillPresentEmergencyModalHandler = tripDetailsWillPresentEmergencyModalHandler {
            tripDetailsWillPresentEmergencyModalHandler()
        }
        
    }
    
    var tripDetailsWillDismissEmergencyModalCallCount = 0
    var tripDetailsWillDismissEmergencyModalHandler: ((Bool) -> ())?
    func tripDetailsWillDismissEmergencyModal(userDismissed: Bool)  {
        tripDetailsWillDismissEmergencyModalCallCount += 1
    
        if let tripDetailsWillDismissEmergencyModalHandler = tripDetailsWillDismissEmergencyModalHandler {
            tripDetailsWillDismissEmergencyModalHandler(userDismissed)
        }
        
    }
}

class ProductSelectionPresentableV2Mock: ProductSelectionPresentableV2 {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionPresentableListenerV2? = nil
    var listener: ProductSelectionPresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateViewModelsCallCount = 0
    var updateViewModelsHandler: (([ProductSelectionCategoryViewModel]) -> ())?
    func updateViewModels(_ viewModels: [ProductSelectionCategoryViewModel])  {
        updateViewModelsCallCount += 1
    
        if let updateViewModelsHandler = updateViewModelsHandler {
            updateViewModelsHandler(viewModels)
        }
        
    }
    
    var updateRecommendedCountCallCount = 0
    var updateRecommendedCountHandler: ((Int) -> ())?
    func updateRecommendedCount(_ count: Int)  {
        updateRecommendedCountCallCount += 1
    
        if let updateRecommendedCountHandler = updateRecommendedCountHandler {
            updateRecommendedCountHandler(count)
        }
        
    }
    
    var updateSelectedProductCallCount = 0
    var updateSelectedProductHandler: ((ProductItemId) -> ())?
    func updateSelectedProduct(productItemId: ProductItemId)  {
        updateSelectedProductCallCount += 1
    
        if let updateSelectedProductHandler = updateSelectedProductHandler {
            updateSelectedProductHandler(productItemId)
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
var updateFareViewModelCallCount = 0
public var updateFareViewModelHandler: ((ProductCellFareViewModel?, ProductItemId) -> ())?
public func updateFareViewModel(_ viewModel: ProductCellFareViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateFareViewModelCallCount += 1
    
        if let updateFareViewModelHandler = updateFareViewModelHandler {
            updateFareViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateCapacityViewModelCallCount = 0
public var updateCapacityViewModelHandler: ((ProductCellCapacityViewModel?, ProductItemId) -> ())?
public func updateCapacityViewModel(_ viewModel: ProductCellCapacityViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateCapacityViewModelCallCount += 1
    
        if let updateCapacityViewModelHandler = updateCapacityViewModelHandler {
            updateCapacityViewModelHandler(viewModel, productItemId)
        }
        
    }
var updatePromoViewModelCallCount = 0
public var updatePromoViewModelHandler: ((ProductCellPromoViewModel?, ProductItemId) -> ())?
public func updatePromoViewModel(_ viewModel: ProductCellPromoViewModel?, forProductItemId productItemId: ProductItemId)  {
        updatePromoViewModelCallCount += 1
    
        if let updatePromoViewModelHandler = updatePromoViewModelHandler {
            updatePromoViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateEtdViewModelCallCount = 0
public var updateEtdViewModelHandler: ((ProductCellEtdViewModel?, ProductItemId) -> ())?
public func updateEtdViewModel(_ viewModel: ProductCellEtdViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateEtdViewModelCallCount += 1
    
        if let updateEtdViewModelHandler = updateEtdViewModelHandler {
            updateEtdViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateTitleViewModelCallCount = 0
public var updateTitleViewModelHandler: ((ProductCellTitleViewModel?, ProductItemId) -> ())?
public func updateTitleViewModel(_ viewModel: ProductCellTitleViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateTitleViewModelCallCount += 1
    
        if let updateTitleViewModelHandler = updateTitleViewModelHandler {
            updateTitleViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateDescriptionViewModelCallCount = 0
public var updateDescriptionViewModelHandler: ((ProductCellDescriptionViewModel?, ProductItemId) -> ())?
public func updateDescriptionViewModel(_ viewModel: ProductCellDescriptionViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateDescriptionViewModelCallCount += 1
    
        if let updateDescriptionViewModelHandler = updateDescriptionViewModelHandler {
            updateDescriptionViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateSupplementaryViewModelCallCount = 0
public var updateSupplementaryViewModelHandler: ((ProductCellSupplementaryViewModel?, ProductItemId) -> ())?
public func updateSupplementaryViewModel(_ viewModel: ProductCellSupplementaryViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateSupplementaryViewModelCallCount += 1
    
        if let updateSupplementaryViewModelHandler = updateSupplementaryViewModelHandler {
            updateSupplementaryViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateIconViewModelCallCount = 0
public var updateIconViewModelHandler: ((ProductCellIconViewModel?, ProductItemId) -> ())?
public func updateIconViewModel(_ viewModel: ProductCellIconViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateIconViewModelCallCount += 1
    
        if let updateIconViewModelHandler = updateIconViewModelHandler {
            updateIconViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateRecommendationViewModelCallCount = 0
public var updateRecommendationViewModelHandler: ((ProductCellRecommendationViewModel?, ProductItemId) -> ())?
public func updateRecommendationViewModel(_ viewModel: ProductCellRecommendationViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateRecommendationViewModelCallCount += 1
    
        if let updateRecommendationViewModelHandler = updateRecommendationViewModelHandler {
            updateRecommendationViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateFareExplainerViewModelCallCount = 0
public var updateFareExplainerViewModelHandler: ((ProductCellFareExplainerViewModel?, ProductItemId) -> ())?
public func updateFareExplainerViewModel(_ viewModel: ProductCellFareExplainerViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateFareExplainerViewModelCallCount += 1
    
        if let updateFareExplainerViewModelHandler = updateFareExplainerViewModelHandler {
            updateFareExplainerViewModelHandler(viewModel, productItemId)
        }
        
    }
}

class SelectedProductConfigurationManagerListenerMock: SelectedProductConfigurationManagerListener {

    

    init() {

    }
        
    var productConfigurationDidUpdateCallCount = 0
    var productConfigurationDidUpdateHandler: ((CoreShared.Product) -> ())?
    func productConfigurationDidUpdate(product: CoreShared.Product)  {
        productConfigurationDidUpdateCallCount += 1
    
        if let productConfigurationDidUpdateHandler = productConfigurationDidUpdateHandler {
            productConfigurationDidUpdateHandler(product)
        }
        
    }
}

class RootViewControllableMock: RootViewControllable {

    
    init() {}
    init(statusBarStyle: UIStatusBarStyle, uiviewController: UIViewController = UIViewController()) {
        self.statusBarStyle = statusBarStyle
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: RootViewControllerListener? = nil
    var listener: RootViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var clearSplashScreenCallCount = 0
    var clearSplashScreenHandler: ((@escaping SplashScreenClearCompletionCallback) -> ())?
    func clearSplashScreen(completion: @escaping SplashScreenClearCompletionCallback)  {
        clearSplashScreenCallCount += 1
    
        if let clearSplashScreenHandler = clearSplashScreenHandler {
            clearSplashScreenHandler(completion)
        }
        
    }
    
    var statusBarStyleSetCallCount = 0
    var underlyingStatusBarStyle: UIStatusBarStyle! 
    var statusBarStyle: UIStatusBarStyle {
        get {
            return underlyingStatusBarStyle
        }
        set {
            underlyingStatusBarStyle = newValue
            statusBarStyleSetCallCount += 1
        }
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
}

class RequestRoutingMock: RequestRouting {

    
    init() {}
    init(interactor: RequestInteractable = RequestInteractableMock(), requestActionableItem: RequestActionableItem = RequestActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.requestActionableItem = requestActionableItem
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: RequestInteractable = RequestInteractableMock()
    var interactor: RequestInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var requestActionableItemSetCallCount = 0
    var underlyingRequestActionableItem: RequestActionableItem = RequestActionableItemMock()
    var requestActionableItem: RequestActionableItem {
        get {
            return underlyingRequestActionableItem
        }
        set {
            underlyingRequestActionableItem = newValue
            requestActionableItemSetCallCount += 1
        }
    }
    
    var routeToMapCallCount = 0
    var routeToMapHandler: ((RequestMapBuildable) -> ())?
    func routeToMap(builder: RequestMapBuildable)  {
        routeToMapCallCount += 1
    
        if let routeToMapHandler = routeToMapHandler {
            routeToMapHandler(builder)
        }
        
    }
    
    var routeToHomeCallCount = 0
    var routeToHomeHandler: (() -> (HomeActionableItem?))?
    func routeToHome() -> HomeActionableItem? {
        routeToHomeCallCount += 1
    
        if let routeToHomeHandler = routeToHomeHandler {
            return routeToHomeHandler()
        }
        return nil
    }
    
    var routeToHomeV2CallCount = 0
    var routeToHomeV2Handler: (() -> (HomeActionableItemV2?))?
    func routeToHomeV2() -> HomeActionableItemV2? {
        routeToHomeV2CallCount += 1
    
        if let routeToHomeV2Handler = routeToHomeV2Handler {
            return routeToHomeV2Handler()
        }
        return nil
    }
    
    var routeToLocationEditorCallCount = 0
    var routeToLocationEditorHandler: ((LocationEditorConfiguration, LocationEditorViewConfiguration?) -> ())?
    func routeToLocationEditor(configuration: LocationEditorConfiguration, viewConfiguration: LocationEditorViewConfiguration?)  {
        routeToLocationEditorCallCount += 1
    
        if let routeToLocationEditorHandler = routeToLocationEditorHandler {
            routeToLocationEditorHandler(configuration, viewConfiguration)
        }
        
    }
    
    var routeToConfirmationCallCount = 0
    var routeToConfirmationHandler: ((Bool) -> (ConfirmationActionableItem?))?
    func routeToConfirmation(requireDestination: Bool) -> ConfirmationActionableItem? {
        routeToConfirmationCallCount += 1
    
        if let routeToConfirmationHandler = routeToConfirmationHandler {
            return routeToConfirmationHandler(requireDestination)
        }
        return nil
    }
    
    var routeToConfirmationV2CallCount = 0
    var routeToConfirmationV2Handler: ((Bool) -> (ConfirmationActionableItemV2?))?
    func routeToConfirmationV2(requireDestination: Bool) -> ConfirmationActionableItemV2? {
        routeToConfirmationV2CallCount += 1
    
        if let routeToConfirmationV2Handler = routeToConfirmationV2Handler {
            return routeToConfirmationV2Handler(requireDestination)
        }
        return nil
    }
    
    var routeToPlusOneCallCount = 0
    var routeToPlusOneHandler: (() -> (PlusOneActionableItem?))?
    func routeToPlusOne() -> PlusOneActionableItem? {
        routeToPlusOneCallCount += 1
    
        if let routeToPlusOneHandler = routeToPlusOneHandler {
            return routeToPlusOneHandler()
        }
        return nil
    }
    
    var routeToServerErrorHandlingCallCount = 0
    var routeToServerErrorHandlingHandler: ((PickupRequestV2?, Error) -> ())?
    func routeToServerErrorHandling(request: PickupRequestV2?, error: Error)  {
        routeToServerErrorHandlingCallCount += 1
    
        if let routeToServerErrorHandlingHandler = routeToServerErrorHandlingHandler {
            routeToServerErrorHandlingHandler(request, error)
        }
        
    }
    
    var routeFromServerErrorHandlerCallCount = 0
    var routeFromServerErrorHandlerHandler: ((Bool, (() -> ())?) -> ())?
    func routeFromServerErrorHandler(immediately: Bool, completion: (() -> ())?)  {
        routeFromServerErrorHandlerCallCount += 1
    
        if let routeFromServerErrorHandlerHandler = routeFromServerErrorHandlerHandler {
            routeFromServerErrorHandlerHandler(immediately, completion)
        }
        
    }
    
    var routeToCustomTransientCallCount = 0
    var routeToCustomTransientHandler: ((RequestCustomStateRouter) -> ())?
    func routeToCustomTransient(stateRouter: RequestCustomStateRouter)  {
        routeToCustomTransientCallCount += 1
    
        if let routeToCustomTransientHandler = routeToCustomTransientHandler {
            routeToCustomTransientHandler(stateRouter)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
var attachModalPluginRouterCallCount = 0
public var attachModalPluginRouterHandler: ((ViewableRouting) -> ())?
public func attachModalPluginRouter(router: ViewableRouting)  {
        attachModalPluginRouterCallCount += 1
    
        if let attachModalPluginRouterHandler = attachModalPluginRouterHandler {
            attachModalPluginRouterHandler(router)
        }
        
    }
var detachModalPluginRouterCallCount = 0
public var detachModalPluginRouterHandler: (() -> ())?
public func detachModalPluginRouter()  {
        detachModalPluginRouterCallCount += 1
    
        if let detachModalPluginRouterHandler = detachModalPluginRouterHandler {
            detachModalPluginRouterHandler()
        }
        
    }
}

public class RideDependencyMock: RideDependency {

    
    public init() {}
    public init(riderStream: RiderStreaming = RiderStreamingMock(), marketplaceRiderService: MarketplaceRiderServicing = MarketplaceRiderServicingMock(), realtimeClient: RealtimeClient = RealtimeClientMock(), cachedExperiments: CachedExperimenting = CachedExperimentingMock(), appLifecycle: ApplicationLifecycleBroadcaster = ApplicationLifecycleBroadcasterMock(), deviceLocationProvider: DeviceLocationProviding = DeviceLocationProvidingMock(), userLocationProvider: UserLocationProviding = UserLocationProvidingMock(), applicationLaunchStream: ApplicationLaunchStream = ApplicationLaunchStreamMock(), mutableRiderStatusTargetLocationStream: MutableRiderStatusTargetLocationStreaming = MutableRiderStatusTargetLocationStreamingMock(), statusPollCompletedStream: StatusPollCompletedStreaming = StatusPollCompletedStreamingMock(), modeExperiments: ModeExperimenting = ModeExperimentingMock(), modeEventStream: MutableModeEventStreaming = MutableModeEventStreamingMock()) {
        self.riderStream = riderStream
        self.marketplaceRiderService = marketplaceRiderService
        self.realtimeClient = realtimeClient
        self.cachedExperiments = cachedExperiments
        self.appLifecycle = appLifecycle
        self.deviceLocationProvider = deviceLocationProvider
        self.userLocationProvider = userLocationProvider
        self.applicationLaunchStream = applicationLaunchStream
        self.mutableRiderStatusTargetLocationStream = mutableRiderStatusTargetLocationStream
        self.statusPollCompletedStream = statusPollCompletedStream
        self.modeExperiments = modeExperiments
        self.modeEventStream = modeEventStream
    }
        
    var riderStreamSetCallCount = 0
    var underlyingRiderStream: RiderStreaming = RiderStreamingMock()
    public var riderStream: RiderStreaming {
        get {
            return underlyingRiderStream
        }
        set {
            underlyingRiderStream = newValue
            riderStreamSetCallCount += 1
        }
    }
    
    var marketplaceRiderServiceSetCallCount = 0
    var underlyingMarketplaceRiderService: MarketplaceRiderServicing = MarketplaceRiderServicingMock()
    public var marketplaceRiderService: MarketplaceRiderServicing {
        get {
            return underlyingMarketplaceRiderService
        }
        set {
            underlyingMarketplaceRiderService = newValue
            marketplaceRiderServiceSetCallCount += 1
        }
    }
    
    var realtimeClientSetCallCount = 0
    var underlyingRealtimeClient: RealtimeClient = RealtimeClientMock()
    public var realtimeClient: RealtimeClient {
        get {
            return underlyingRealtimeClient
        }
        set {
            underlyingRealtimeClient = newValue
            realtimeClientSetCallCount += 1
        }
    }
    
    var cachedExperimentsSetCallCount = 0
    var underlyingCachedExperiments: CachedExperimenting = CachedExperimentingMock()
    public var cachedExperiments: CachedExperimenting {
        get {
            return underlyingCachedExperiments
        }
        set {
            underlyingCachedExperiments = newValue
            cachedExperimentsSetCallCount += 1
        }
    }
    
    var appLifecycleSetCallCount = 0
    var underlyingAppLifecycle: ApplicationLifecycleBroadcaster = ApplicationLifecycleBroadcasterMock()
    public var appLifecycle: ApplicationLifecycleBroadcaster {
        get {
            return underlyingAppLifecycle
        }
        set {
            underlyingAppLifecycle = newValue
            appLifecycleSetCallCount += 1
        }
    }
    
    var deviceLocationProviderSetCallCount = 0
    var underlyingDeviceLocationProvider: DeviceLocationProviding = DeviceLocationProvidingMock()
    public var deviceLocationProvider: DeviceLocationProviding {
        get {
            return underlyingDeviceLocationProvider
        }
        set {
            underlyingDeviceLocationProvider = newValue
            deviceLocationProviderSetCallCount += 1
        }
    }
    
    var userLocationProviderSetCallCount = 0
    var underlyingUserLocationProvider: UserLocationProviding = UserLocationProvidingMock()
    public var userLocationProvider: UserLocationProviding {
        get {
            return underlyingUserLocationProvider
        }
        set {
            underlyingUserLocationProvider = newValue
            userLocationProviderSetCallCount += 1
        }
    }
    
    var applicationLaunchStreamSetCallCount = 0
    var underlyingApplicationLaunchStream: ApplicationLaunchStream = ApplicationLaunchStreamMock()
    public var applicationLaunchStream: ApplicationLaunchStream {
        get {
            return underlyingApplicationLaunchStream
        }
        set {
            underlyingApplicationLaunchStream = newValue
            applicationLaunchStreamSetCallCount += 1
        }
    }
    
    var mutableRiderStatusTargetLocationStreamSetCallCount = 0
    var underlyingMutableRiderStatusTargetLocationStream: MutableRiderStatusTargetLocationStreaming = MutableRiderStatusTargetLocationStreamingMock()
    public var mutableRiderStatusTargetLocationStream: MutableRiderStatusTargetLocationStreaming {
        get {
            return underlyingMutableRiderStatusTargetLocationStream
        }
        set {
            underlyingMutableRiderStatusTargetLocationStream = newValue
            mutableRiderStatusTargetLocationStreamSetCallCount += 1
        }
    }
    
    var statusPollCompletedStreamSetCallCount = 0
    var underlyingStatusPollCompletedStream: StatusPollCompletedStreaming = StatusPollCompletedStreamingMock()
    public var statusPollCompletedStream: StatusPollCompletedStreaming {
        get {
            return underlyingStatusPollCompletedStream
        }
        set {
            underlyingStatusPollCompletedStream = newValue
            statusPollCompletedStreamSetCallCount += 1
        }
    }
    
    var modeExperimentsSetCallCount = 0
    var underlyingModeExperiments: ModeExperimenting = ModeExperimentingMock()
    public var modeExperiments: ModeExperimenting {
        get {
            return underlyingModeExperiments
        }
        set {
            underlyingModeExperiments = newValue
            modeExperimentsSetCallCount += 1
        }
    }
    
    var modeEventStreamSetCallCount = 0
    var underlyingModeEventStream: MutableModeEventStreaming = MutableModeEventStreamingMock()
    public var modeEventStream: MutableModeEventStreaming {
        get {
            return underlyingModeEventStream
        }
        set {
            underlyingModeEventStream = newValue
            modeEventStreamSetCallCount += 1
        }
    }
}

class ConfirmationViewControllableV2Mock: ConfirmationViewControllableV2 {

    
    init() {}
    init(currentViewState: ConfirmationViewState, uiviewController: UIViewController = UIViewController()) {
        self.currentViewState = currentViewState
        self.uiviewController = uiviewController
    }
        
    var currentViewStateSetCallCount = 0
    var underlyingCurrentViewState: ConfirmationViewState! 
    var currentViewState: ConfirmationViewState {
        get {
            return underlyingCurrentViewState
        }
        set {
            underlyingCurrentViewState = newValue
            currentViewStateSetCallCount += 1
        }
    }
    
    var showProductOptionsViewControllerCallCount = 0
    var showProductOptionsViewControllerHandler: ((ProductOptionsViewControllable) -> ())?
    func showProductOptionsViewController(_ productOptionsViewController: ProductOptionsViewControllable)  {
        showProductOptionsViewControllerCallCount += 1
    
        if let showProductOptionsViewControllerHandler = showProductOptionsViewControllerHandler {
            showProductOptionsViewControllerHandler(productOptionsViewController)
        }
        
    }
    
    var showActionViewControllableCallCount = 0
    var showActionViewControllableHandler: ((ViewControllable) -> ())?
    func showActionViewControllable(_ actionViewControllable: ViewControllable)  {
        showActionViewControllableCallCount += 1
    
        if let showActionViewControllableHandler = showActionViewControllableHandler {
            showActionViewControllableHandler(actionViewControllable)
        }
        
    }
    
    var showConfirmationAlertViewControllableCallCount = 0
    var showConfirmationAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showConfirmationAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showConfirmationAlertViewControllableCallCount += 1
    
        if let showConfirmationAlertViewControllableHandler = showConfirmationAlertViewControllableHandler {
            showConfirmationAlertViewControllableHandler(alertViewControllable)
        }
        
    }
    
    var presentConfirmationSlidableCallCount = 0
    var presentConfirmationSlidableHandler: ((ConfirmationSlidable, Bool) -> ())?
    func presentConfirmationSlidable(_ slidable: ConfirmationSlidable, animated: Bool)  {
        presentConfirmationSlidableCallCount += 1
    
        if let presentConfirmationSlidableHandler = presentConfirmationSlidableHandler {
            presentConfirmationSlidableHandler(slidable, animated)
        }
        
    }
    
    var dismissConfirmationSlidableCallCount = 0
    var dismissConfirmationSlidableHandler: ((ConfirmationSlidable, Bool) -> ())?
    func dismissConfirmationSlidable(_ slidable: ConfirmationSlidable, animated: Bool)  {
        dismissConfirmationSlidableCallCount += 1
    
        if let dismissConfirmationSlidableHandler = dismissConfirmationSlidableHandler {
            dismissConfirmationSlidableHandler(slidable, animated)
        }
        
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationPresentableListenerV2? = nil
    var listener: ConfirmationPresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateDestinationEntryNeededCallCount = 0
    var updateDestinationEntryNeededHandler: ((Bool) -> ())?
    func updateDestinationEntryNeeded(_ destinationEntryNeeded: Bool)  {
        updateDestinationEntryNeededCallCount += 1
    
        if let updateDestinationEntryNeededHandler = updateDestinationEntryNeededHandler {
            updateDestinationEntryNeededHandler(destinationEntryNeeded)
        }
        
    }
    
    var updateViewStateIfNeededCallCount = 0
    var updateViewStateIfNeededHandler: (() -> ())?
    func updateViewStateIfNeeded()  {
        updateViewStateIfNeededCallCount += 1
    
        if let updateViewStateIfNeededHandler = updateViewStateIfNeededHandler {
            updateViewStateIfNeededHandler()
        }
        
    }
    
    var updateMapPaddingIfNeededCallCount = 0
    var updateMapPaddingIfNeededHandler: (() -> ())?
    func updateMapPaddingIfNeeded()  {
        updateMapPaddingIfNeededCallCount += 1
    
        if let updateMapPaddingIfNeededHandler = updateMapPaddingIfNeededHandler {
            updateMapPaddingIfNeededHandler()
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
var leadingButtonConfigurationListenerSetCallCount = 0
var underlyingLeadingButtonConfigurationListener: LeadingButtonConfigurationListener? = nil
public var leadingButtonConfigurationListener: LeadingButtonConfigurationListener? {
        get {
            return underlyingLeadingButtonConfigurationListener
        }
        set {
            underlyingLeadingButtonConfigurationListener = newValue
            leadingButtonConfigurationListenerSetCallCount += 1
        }
    }
var prepForTransitionIfNeededCallCount = 0
public var prepForTransitionIfNeededHandler: (() -> ())?
public func prepForTransitionIfNeeded()  {
        prepForTransitionIfNeededCallCount += 1
    
        if let prepForTransitionIfNeededHandler = prepForTransitionIfNeededHandler {
            prepForTransitionIfNeededHandler()
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var showConfirmationActionAccessoryCallCount = 0
public var showConfirmationActionAccessoryHandler: ((ConfirmationActionAccessoryViewControllable?, @escaping () -> ()) -> ())?
public func showConfirmationActionAccessory(_ accessory: ConfirmationActionAccessoryViewControllable?, completion: @escaping () -> ())  {
        showConfirmationActionAccessoryCallCount += 1
    
        if let showConfirmationActionAccessoryHandler = showConfirmationActionAccessoryHandler {
            showConfirmationActionAccessoryHandler(accessory, completion)
        }
        
    }
}

class HomeViewControllableV2Mock: HomeViewControllableV2 {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), topRowPillContainerView: ThemeableView) {
        self.uiviewController = uiviewController
        self.topRowPillContainerView = topRowPillContainerView
    }
        
    var dismissScheduledRidesHomeEntryCallCount = 0
    var dismissScheduledRidesHomeEntryHandler: (() -> ())?
    func dismissScheduledRidesHomeEntry()  {
        dismissScheduledRidesHomeEntryCallCount += 1
    
        if let dismissScheduledRidesHomeEntryHandler = dismissScheduledRidesHomeEntryHandler {
            dismissScheduledRidesHomeEntryHandler()
        }
        
    }
    
    var presentScheduledRidesHomeEntryCallCount = 0
    var presentScheduledRidesHomeEntryHandler: ((UIViewController) -> ())?
    func presentScheduledRidesHomeEntry(viewController: UIViewController)  {
        presentScheduledRidesHomeEntryCallCount += 1
    
        if let presentScheduledRidesHomeEntryHandler = presentScheduledRidesHomeEntryHandler {
            presentScheduledRidesHomeEntryHandler(viewController)
        }
        
    }
    
    var dismissAcceleratorsCallCount = 0
    var dismissAcceleratorsHandler: (() -> ())?
    func dismissAccelerators()  {
        dismissAcceleratorsCallCount += 1
    
        if let dismissAcceleratorsHandler = dismissAcceleratorsHandler {
            dismissAcceleratorsHandler()
        }
        
    }
    
    var presentAcceleratorsCallCount = 0
    var presentAcceleratorsHandler: ((UIViewController) -> ())?
    func presentAccelerators(viewController: UIViewController)  {
        presentAcceleratorsCallCount += 1
    
        if let presentAcceleratorsHandler = presentAcceleratorsHandler {
            presentAcceleratorsHandler(viewController)
        }
        
    }
    
    var presentCommunicationBannerCallCount = 0
    var presentCommunicationBannerHandler: ((UIViewController) -> ())?
    func presentCommunicationBanner(viewController: UIViewController)  {
        presentCommunicationBannerCallCount += 1
    
        if let presentCommunicationBannerHandler = presentCommunicationBannerHandler {
            presentCommunicationBannerHandler(viewController)
        }
        
    }
    
    var dismissLocationEditorEntryCallCount = 0
    var dismissLocationEditorEntryHandler: (() -> ())?
    func dismissLocationEditorEntry()  {
        dismissLocationEditorEntryCallCount += 1
    
        if let dismissLocationEditorEntryHandler = dismissLocationEditorEntryHandler {
            dismissLocationEditorEntryHandler()
        }
        
    }
    
    var presentLocationEditorEntryCallCount = 0
    var presentLocationEditorEntryHandler: ((UIViewController) -> ())?
    func presentLocationEditorEntry(viewController: UIViewController)  {
        presentLocationEditorEntryCallCount += 1
    
        if let presentLocationEditorEntryHandler = presentLocationEditorEntryHandler {
            presentLocationEditorEntryHandler(viewController)
        }
        
    }
    
    var dismissRewardsRiderStatusBarCallCount = 0
    var dismissRewardsRiderStatusBarHandler: (() -> ())?
    func dismissRewardsRiderStatusBar()  {
        dismissRewardsRiderStatusBarCallCount += 1
    
        if let dismissRewardsRiderStatusBarHandler = dismissRewardsRiderStatusBarHandler {
            dismissRewardsRiderStatusBarHandler()
        }
        
    }
    
    var presentRewardsRiderStatusBarCallCount = 0
    var presentRewardsRiderStatusBarHandler: ((UIViewController) -> ())?
    func presentRewardsRiderStatusBar(viewController: UIViewController)  {
        presentRewardsRiderStatusBarCallCount += 1
    
        if let presentRewardsRiderStatusBarHandler = presentRewardsRiderStatusBarHandler {
            presentRewardsRiderStatusBarHandler(viewController)
        }
        
    }
var leadingButtonConfigurationListenerSetCallCount = 0
var underlyingLeadingButtonConfigurationListener: LeadingButtonConfigurationListener? = nil
public var leadingButtonConfigurationListener: LeadingButtonConfigurationListener? {
        get {
            return underlyingLeadingButtonConfigurationListener
        }
        set {
            underlyingLeadingButtonConfigurationListener = newValue
            leadingButtonConfigurationListenerSetCallCount += 1
        }
    }
var prepForTransitionIfNeededCallCount = 0
public var prepForTransitionIfNeededHandler: (() -> ())?
public func prepForTransitionIfNeeded()  {
        prepForTransitionIfNeededCallCount += 1
    
        if let prepForTransitionIfNeededHandler = prepForTransitionIfNeededHandler {
            prepForTransitionIfNeededHandler()
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var topRowPillContainerViewSetCallCount = 0
var underlyingTopRowPillContainerView: ThemeableView!
public var topRowPillContainerView: ThemeableView {
        get {
            return underlyingTopRowPillContainerView
        }
        set {
            underlyingTopRowPillContainerView = newValue
            topRowPillContainerViewSetCallCount += 1
        }
    }
var topRowPillViewInsertionBehaviorProviderSetCallCount = 0
var underlyingTopRowPillViewInsertionBehaviorProvider: TopRowPillViewInsertionBehaviorProviding? = nil
public var topRowPillViewInsertionBehaviorProvider: TopRowPillViewInsertionBehaviorProviding? {
        get {
            return underlyingTopRowPillViewInsertionBehaviorProvider
        }
        set {
            underlyingTopRowPillViewInsertionBehaviorProvider = newValue
            topRowPillViewInsertionBehaviorProviderSetCallCount += 1
        }
    }
var topRowSecondaryContainerViewSetCallCount = 0
var underlyingTopRowSecondaryContainerView: UIView? = nil
public var topRowSecondaryContainerView: UIView? {
        get {
            return underlyingTopRowSecondaryContainerView
        }
        set {
            underlyingTopRowSecondaryContainerView = newValue
            topRowSecondaryContainerViewSetCallCount += 1
        }
    }
var topRowSecondaryAnimationProviderSetCallCount = 0
var underlyingTopRowSecondaryAnimationProvider: TopRowSecondaryViewControllerAnimationProviding? = nil
public var topRowSecondaryAnimationProvider: TopRowSecondaryViewControllerAnimationProviding? {
        get {
            return underlyingTopRowSecondaryAnimationProvider
        }
        set {
            underlyingTopRowSecondaryAnimationProvider = newValue
            topRowSecondaryAnimationProviderSetCallCount += 1
        }
    }
}

class RideRoutingMock: RideRouting {

    
    init() {}
    init(interactor: RideInteractable = RideInteractableMock(), rideActionableItem: RideActionableItem = RideActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing](), modeChildActionableItem: ModeChildActionableItem = ModeChildActionableItemMock(), modeChildInteractor: ModeChildInteractable = ModeChildInteractableMock()) {
        self.interactor = interactor
        self.rideActionableItem = rideActionableItem
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
        self.modeChildActionableItem = modeChildActionableItem
        self.modeChildInteractor = modeChildInteractor
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: RideInteractable = RideInteractableMock()
    var interactor: RideInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var rideActionableItemSetCallCount = 0
    var underlyingRideActionableItem: RideActionableItem = RideActionableItemMock()
    var rideActionableItem: RideActionableItem {
        get {
            return underlyingRideActionableItem
        }
        set {
            underlyingRideActionableItem = newValue
            rideActionableItemSetCallCount += 1
        }
    }
    
    var routeToRequestCallCount = 0
    var routeToRequestHandler: (() -> (RequestActionableItem))?
    func routeToRequest() -> RequestActionableItem {
        routeToRequestCallCount += 1
    
        if let routeToRequestHandler = routeToRequestHandler {
            return routeToRequestHandler()
        }
        return RequestActionableItemMock()
    }
    
    var routeToTripCallCount = 0
    var routeToTripHandler: (() -> (TripActionableItem))?
    func routeToTrip() -> TripActionableItem {
        routeToTripCallCount += 1
    
        if let routeToTripHandler = routeToTripHandler {
            return routeToTripHandler()
        }
        return TripActionableItemMock()
    }
    
    var routeToAlternativeTripCallCount = 0
    var routeToAlternativeTripHandler: ((AlternativeTripBuildable) -> ())?
    func routeToAlternativeTrip(alternativeTripRouter: AlternativeTripBuildable)  {
        routeToAlternativeTripCallCount += 1
    
        if let routeToAlternativeTripHandler = routeToAlternativeTripHandler {
            routeToAlternativeTripHandler(alternativeTripRouter)
        }
        
    }
    
    var releaseRequestCallCount = 0
    var releaseRequestHandler: (() -> ())?
    func releaseRequest()  {
        releaseRequestCallCount += 1
    
        if let releaseRequestHandler = releaseRequestHandler {
            releaseRequestHandler()
        }
        
    }
    
    var routeToModalCallCount = 0
    var routeToModalHandler: ((ViewableRouting) -> ())?
    func routeToModal(router: ViewableRouting)  {
        routeToModalCallCount += 1
    
        if let routeToModalHandler = routeToModalHandler {
            routeToModalHandler(router)
        }
        
    }
    
    var routeAwayFromModalCallCount = 0
    var routeAwayFromModalHandler: (() -> ())?
    func routeAwayFromModal()  {
        routeAwayFromModalCallCount += 1
    
        if let routeAwayFromModalHandler = routeAwayFromModalHandler {
            routeAwayFromModalHandler()
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
var modeChildActionableItemSetCallCount = 0
var underlyingModeChildActionableItem: ModeChildActionableItem = ModeChildActionableItemMock()
public var modeChildActionableItem: ModeChildActionableItem {
        get {
            return underlyingModeChildActionableItem
        }
        set {
            underlyingModeChildActionableItem = newValue
            modeChildActionableItemSetCallCount += 1
        }
    }
var modeChildInteractorSetCallCount = 0
var underlyingModeChildInteractor: ModeChildInteractable = ModeChildInteractableMock()
public var modeChildInteractor: ModeChildInteractable {
        get {
            return underlyingModeChildInteractor
        }
        set {
            underlyingModeChildInteractor = newValue
            modeChildInteractorSetCallCount += 1
        }
    }
var updateCallCount = 0
public var updateHandler: ((ModeStateContext) -> ())?
public func update(withStateContext context: ModeStateContext)  {
        updateCallCount += 1
    
        if let updateHandler = updateHandler {
            updateHandler(context)
        }
        
    }
}

class ProductOptionsInteractableMock: ProductOptionsInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var routerSetCallCount = 0
    var underlyingRouter: ProductOptionsRouting? = nil
    var router: ProductOptionsRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ProductOptionsListener? = nil
    var listener: ProductOptionsListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var productOptionsItemListenerSetCallCount = 0
    var underlyingProductOptionsItemListener: ProductOptionsItemListener? = nil
    var productOptionsItemListener: ProductOptionsItemListener? {
        get {
            return underlyingProductOptionsItemListener
        }
        set {
            underlyingProductOptionsItemListener = newValue
            productOptionsItemListenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class ConfirmationAlertBuildableMock: ConfirmationAlertBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ConfirmationAlertRouting))?
    func build() -> ConfirmationAlertRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ConfirmationAlertRoutingMock()
    }
}

class PlusOneInteractorListenerMock: PlusOneInteractorListener {

    

    init() {

    }
        
    var plusOneCompletedCallCount = 0
    var plusOneCompletedHandler: (() -> ())?
    func plusOneCompleted()  {
        plusOneCompletedCallCount += 1
    
        if let plusOneCompletedHandler = plusOneCompletedHandler {
            plusOneCompletedHandler()
        }
        
    }
    
    var plusOneAbortedCallCount = 0
    var plusOneAbortedHandler: ((Bool) -> ())?
    func plusOneAborted(forceRefreshFares: Bool)  {
        plusOneAbortedCallCount += 1
    
        if let plusOneAbortedHandler = plusOneAbortedHandler {
            plusOneAbortedHandler(forceRefreshFares)
        }
        
    }
}

class DestinationPromptPresentableMock: DestinationPromptPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: DestinationPromptPresentableListener? = nil
    var listener: DestinationPromptPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var configureCallCount = 0
    var configureHandler: (() -> ())?
    func configure()  {
        configureCallCount += 1
    
        if let configureHandler = configureHandler {
            configureHandler()
        }
        
    }
}

class PlusOneMonitoringAnalyticsReporterMock: PlusOneMonitoringAnalyticsReporter {

    

    init() {

    }
        
    var reportEventCallCount = 0
    var reportEventHandler: ((PlusOneMonitoringAnalyticsEvent, String?) -> ())?
    func reportEvent(event: PlusOneMonitoringAnalyticsEvent, stepId: String?)  {
        reportEventCallCount += 1
    
        if let reportEventHandler = reportEventHandler {
            reportEventHandler(event, stepId)
        }
        
    }
    
    var reportTotalWaitTimeCallCount = 0
    var reportTotalWaitTimeHandler: (() -> ())?
    func reportTotalWaitTime()  {
        reportTotalWaitTimeCallCount += 1
    
        if let reportTotalWaitTimeHandler = reportTotalWaitTimeHandler {
            reportTotalWaitTimeHandler()
        }
        
    }
}

class ConfirmationActionRequestPresenterListenerMock: ConfirmationActionRequestPresenterListener {

    

    init() {

    }
        
    var performRequestActionCallCount = 0
    var performRequestActionHandler: (() -> ())?
    func performRequestAction()  {
        performRequestActionCallCount += 1
    
        if let performRequestActionHandler = performRequestActionHandler {
            performRequestActionHandler()
        }
        
    }
    
    var getTapAnalyticsMetadataCallCount = 0
    var getTapAnalyticsMetadataHandler: (() -> (AnalyticsMetadata?))?
    func getTapAnalyticsMetadata() -> AnalyticsMetadata? {
        getTapAnalyticsMetadataCallCount += 1
    
        if let getTapAnalyticsMetadataHandler = getTapAnalyticsMetadataHandler {
            return getTapAnalyticsMetadataHandler()
        }
        return nil
    }
}

class SelectedProductConfigurationListenerMock: SelectedProductConfigurationListener {

    

    init() {

    }
        
    var productItemIdSetCallCount = 0
    var underlyingProductItemId: ProductItemId? = nil
    var productItemId: ProductItemId? {
        get {
            return underlyingProductItemId
        }
        set {
            underlyingProductItemId = newValue
            productItemIdSetCallCount += 1
        }
    }
    
    var productConfigurationDidUpdateCallCount = 0
    var productConfigurationDidUpdateHandler: ((CoreShared.Product) -> ())?
    func productConfigurationDidUpdate(product: CoreShared.Product)  {
        productConfigurationDidUpdateCallCount += 1
    
        if let productConfigurationDidUpdateHandler = productConfigurationDidUpdateHandler {
            productConfigurationDidUpdateHandler(product)
        }
        
    }
}

class TripHeaderRootBuildableMock: TripHeaderRootBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (TripHeaderRootRouting))?
    func build() -> TripHeaderRootRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return TripHeaderRootRoutingMock()
    }
}

class ConfirmationViewControllerTransitionListenerMock: ConfirmationViewControllerTransitionListener {

    

    init() {

    }
        
    var buttonHidingTransitionDidProgressCallCount = 0
    var buttonHidingTransitionDidProgressHandler: ((CGFloat) -> ())?
    func buttonHidingTransitionDidProgress(progress: CGFloat)  {
        buttonHidingTransitionDidProgressCallCount += 1
    
        if let buttonHidingTransitionDidProgressHandler = buttonHidingTransitionDidProgressHandler {
            buttonHidingTransitionDidProgressHandler(progress)
        }
        
    }
}

class ConfirmationAlertViewControllerViewListenerMock: ConfirmationAlertViewControllerViewListener {

    

    init() {

    }
        
    var alertViewControllerDidUpdateCallCount = 0
    var alertViewControllerDidUpdateHandler: (() -> ())?
    func alertViewControllerDidUpdate()  {
        alertViewControllerDidUpdateCallCount += 1
    
        if let alertViewControllerDidUpdateHandler = alertViewControllerDidUpdateHandler {
            alertViewControllerDidUpdateHandler()
        }
        
    }
}

class ProductDetailListViewFareBreakdownListenerMock: ProductDetailListViewFareBreakdownListener {

    

    init() {

    }
        
    var detailListViewCallCount = 0
    var detailListViewHandler: ((ProductDetailListView, PricingLabel, ProductId, String?, FareBindingType) -> ())?
    func detailListView(_ detailListView: ProductDetailListView, didConfigurePricingView pricingView: PricingLabel, associatedId: ProductId, placeholder: String?, bindingType: FareBindingType)  {
        detailListViewCallCount += 1
    
        if let detailListViewHandler = detailListViewHandler {
            detailListViewHandler(detailListView, pricingView, associatedId, placeholder, bindingType)
        }
        
    }
}

class ProductBadgeNotificationStateStreamStoringMock: ProductBadgeNotificationStateStreamStoring {

    

    init() {

    }
        
    var fetchStreamPairCallCount = 0
    var fetchStreamPairHandler: ((VehicleViewId) -> (ProductBadgeNotificationStateStreamPair?))?
    func fetchStreamPair(vehicleViewId: VehicleViewId) -> ProductBadgeNotificationStateStreamPair? {
        fetchStreamPairCallCount += 1
    
        if let fetchStreamPairHandler = fetchStreamPairHandler {
            return fetchStreamPairHandler(vehicleViewId)
        }
        return nil
    }
    
    var createStateStreamPairIfNotExistsCallCount = 0
    var createStateStreamPairIfNotExistsHandler: ((VehicleViewId) -> (ProductBadgeNotificationStateStreamPair))?
    func createStateStreamPairIfNotExists(vehicleViewId: VehicleViewId) -> ProductBadgeNotificationStateStreamPair {
        createStateStreamPairIfNotExistsCallCount += 1
    
        if let createStateStreamPairIfNotExistsHandler = createStateStreamPairIfNotExistsHandler {
            return createStateStreamPairIfNotExistsHandler(vehicleViewId)
        }
        fatalError("createStateStreamPairIfNotExistsHandler returns can't have a default value thus its handler must be set")
    }
}

class DualLocationEditorEntryRoutingMock: DualLocationEditorEntryRouting {

    
    init() {}
    init(interactor: DualLocationEditorEntryInteractable = DualLocationEditorEntryInteractableMock(), actionableItem: LocationEditorEntryActionableItem = LocationEditorEntryActionableItemMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.actionableItem = actionableItem
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: DualLocationEditorEntryInteractable = DualLocationEditorEntryInteractableMock()
    var interactor: DualLocationEditorEntryInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var routeFromDestinationEntryAccessoryCallCount = 0
    var routeFromDestinationEntryAccessoryHandler: (() -> ())?
    func routeFromDestinationEntryAccessory()  {
        routeFromDestinationEntryAccessoryCallCount += 1
    
        if let routeFromDestinationEntryAccessoryHandler = routeFromDestinationEntryAccessoryHandler {
            routeFromDestinationEntryAccessoryHandler()
        }
        
    }
    
    var routeToDestinationEntryAccessoryCallCount = 0
    var routeToDestinationEntryAccessoryHandler: ((DestinationEntryAccessoryBuildable) -> (DestinationEntryAccessoryActionableItem))?
    func routeToDestinationEntryAccessory(builder: DestinationEntryAccessoryBuildable) -> DestinationEntryAccessoryActionableItem {
        routeToDestinationEntryAccessoryCallCount += 1
    
        if let routeToDestinationEntryAccessoryHandler = routeToDestinationEntryAccessoryHandler {
            return routeToDestinationEntryAccessoryHandler(builder)
        }
        return DestinationEntryAccessoryActionableItemMock()
    }
var actionableItemSetCallCount = 0
var underlyingActionableItem: LocationEditorEntryActionableItem = LocationEditorEntryActionableItemMock()
public var actionableItem: LocationEditorEntryActionableItem {
        get {
            return underlyingActionableItem
        }
        set {
            underlyingActionableItem = newValue
            actionableItemSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class RideModalPresentationViewControllableMock: RideModalPresentationViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var presentModalCallCount = 0
    var presentModalHandler: ((ViewControllable) -> ())?
    func presentModal(viewController: ViewControllable)  {
        presentModalCallCount += 1
    
        if let presentModalHandler = presentModalHandler {
            presentModalHandler(viewController)
        }
        
    }
    
    var dismissModalCallCount = 0
    var dismissModalHandler: ((Bool, (() -> ())?) -> ())?
    func dismissModal(animated: Bool, completion: (() -> ())?)  {
        dismissModalCallCount += 1
    
        if let dismissModalHandler = dismissModalHandler {
            dismissModalHandler(animated, completion)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var transitionFromViewControllerCallCount = 0
public var transitionFromViewControllerHandler: ((UIViewController?, UIViewController?, UIViewControllerAnimatedTransitioning?, TransitionContext, CachedExperimenting?) -> ())?
public func transitionFromViewController(_ fromViewController: UIViewController?, toViewController: UIViewController?, animator: UIViewControllerAnimatedTransitioning?, context: TransitionContext, cachedExperiments: CachedExperimenting?)  {
        transitionFromViewControllerCallCount += 1
    
        if let transitionFromViewControllerHandler = transitionFromViewControllerHandler {
            transitionFromViewControllerHandler(fromViewController, toViewController, animator, context, cachedExperiments)
        }
        
    }
}

class ProductSelectionViewControllerImageFetchingListenerMock: ProductSelectionViewControllerImageFetchingListener {

    

    init() {

    }
        
    var imagesForProductCallCount = 0
    var imagesForProductHandler: ((ProductViewModel, @escaping (ProductImageMap?) -> ()) -> ())?
    func imagesForProduct(productViewModel: ProductViewModel, completion: @escaping (ProductImageMap?) -> ())  {
        imagesForProductCallCount += 1
    
        if let imagesForProductHandler = imagesForProductHandler {
            imagesForProductHandler(productViewModel, completion)
        }
        
    }
}

class ProductOptionsPresentableMock: ProductOptionsPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductOptionsPresenterListener? = nil
    var listener: ProductOptionsPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class ConfirmationListenerV2Mock: ConfirmationListenerV2 {

    

    init() {

    }
        
    var confirmationDidFinishCallCount = 0
    var confirmationDidFinishHandler: (() -> ())?
    func confirmationDidFinish()  {
        confirmationDidFinishCallCount += 1
    
        if let confirmationDidFinishHandler = confirmationDidFinishHandler {
            confirmationDidFinishHandler()
        }
        
    }
    
    var wantToEditPickupLocationCallCount = 0
    var wantToEditPickupLocationHandler: ((Bool) -> ())?
    func wantToEditPickupLocation(destinationHidden: Bool)  {
        wantToEditPickupLocationCallCount += 1
    
        if let wantToEditPickupLocationHandler = wantToEditPickupLocationHandler {
            wantToEditPickupLocationHandler(destinationHidden)
        }
        
    }
    
    var wantToEditDestinationLocationCallCount = 0
    var wantToEditDestinationLocationHandler: (() -> ())?
    func wantToEditDestinationLocation()  {
        wantToEditDestinationLocationCallCount += 1
    
        if let wantToEditDestinationLocationHandler = wantToEditDestinationLocationHandler {
            wantToEditDestinationLocationHandler()
        }
        
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
    
    var wantToDismissCallCount = 0
    var wantToDismissHandler: (() -> ())?
    func wantToDismiss()  {
        wantToDismissCallCount += 1
    
        if let wantToDismissHandler = wantToDismissHandler {
            wantToDismissHandler()
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
}

class MainPresenterListenerMock: MainPresenterListener {

    

    init() {

    }
        
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var mainViewDidAppearCallCount = 0
    var mainViewDidAppearHandler: (() -> ())?
    func mainViewDidAppear()  {
        mainViewDidAppearCallCount += 1
    
        if let mainViewDidAppearHandler = mainViewDidAppearHandler {
            mainViewDidAppearHandler()
        }
        
    }
    
    var mainViewDidDisappearCallCount = 0
    var mainViewDidDisappearHandler: (() -> ())?
    func mainViewDidDisappear()  {
        mainViewDidDisappearCallCount += 1
    
        if let mainViewDidDisappearHandler = mainViewDidDisappearHandler {
            mainViewDidDisappearHandler()
        }
        
    }
}

class HomeViewControllableMock: HomeViewControllable {

    
    init() {}
    init(cardCollectionViewController: CardCollectionViewControllable = CardCollectionViewControllableMock(), destinationEntryEdgeViewsHidden: Bool = false, uiviewController: UIViewController = UIViewController(), topRowPillContainerView: ThemeableView) {
        self.cardCollectionViewController = cardCollectionViewController
        self.destinationEntryEdgeViewsHidden = destinationEntryEdgeViewsHidden
        self.uiviewController = uiviewController
        self.topRowPillContainerView = topRowPillContainerView
    }
        
    var updateDimmingCallCount = 0
    var updateDimmingHandler: ((CGFloat, Bool) -> ())?
    func updateDimming(to opacity: CGFloat, allowsInteraction: Bool)  {
        updateDimmingCallCount += 1
    
        if let updateDimmingHandler = updateDimmingHandler {
            updateDimmingHandler(opacity, allowsInteraction)
        }
        
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: HomeViewControllerListener? = nil
    var listener: HomeViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var cardCollectionViewControllerSetCallCount = 0
    var underlyingCardCollectionViewController: CardCollectionViewControllable = CardCollectionViewControllableMock()
    var cardCollectionViewController: CardCollectionViewControllable {
        get {
            return underlyingCardCollectionViewController
        }
        set {
            underlyingCardCollectionViewController = newValue
            cardCollectionViewControllerSetCallCount += 1
        }
    }
    
    var presentAcceleratorsViewControllerCallCount = 0
    var presentAcceleratorsViewControllerHandler: ((UIViewController) -> ())?
    func presentAcceleratorsViewController(viewController: UIViewController)  {
        presentAcceleratorsViewControllerCallCount += 1
    
        if let presentAcceleratorsViewControllerHandler = presentAcceleratorsViewControllerHandler {
            presentAcceleratorsViewControllerHandler(viewController)
        }
        
    }
    
    var showDestinationEntryAccessoryViewsCallCount = 0
    var showDestinationEntryAccessoryViewsHandler: (([ViewControllable]) -> ())?
    func showDestinationEntryAccessoryViews(view: [ViewControllable])  {
        showDestinationEntryAccessoryViewsCallCount += 1
    
        if let showDestinationEntryAccessoryViewsHandler = showDestinationEntryAccessoryViewsHandler {
            showDestinationEntryAccessoryViewsHandler(view)
        }
        
    }
    
    var showDestinationEntryEdgesCallCount = 0
    var showDestinationEntryEdgesHandler: ((DestinationEntryEdges<ViewControllable>) -> ())?
    func showDestinationEntryEdges(edgeViews: DestinationEntryEdges<ViewControllable>)  {
        showDestinationEntryEdgesCallCount += 1
    
        if let showDestinationEntryEdgesHandler = showDestinationEntryEdgesHandler {
            showDestinationEntryEdgesHandler(edgeViews)
        }
        
    }
    
    var showDestinationEntryCallCount = 0
    var showDestinationEntryHandler: (() -> ())?
    func showDestinationEntry()  {
        showDestinationEntryCallCount += 1
    
        if let showDestinationEntryHandler = showDestinationEntryHandler {
            showDestinationEntryHandler()
        }
        
    }
    
    var showNoGPSExperienceCallCount = 0
    var showNoGPSExperienceHandler: (() -> ())?
    func showNoGPSExperience()  {
        showNoGPSExperienceCallCount += 1
    
        if let showNoGPSExperienceHandler = showNoGPSExperienceHandler {
            showNoGPSExperienceHandler()
        }
        
    }
    
    var hideNoGPSExperience_deprecatedCallCount = 0
    var hideNoGPSExperience_deprecatedHandler: (() -> ())?
    func hideNoGPSExperience_deprecated()  {
        hideNoGPSExperience_deprecatedCallCount += 1
    
        if let hideNoGPSExperience_deprecatedHandler = hideNoGPSExperience_deprecatedHandler {
            hideNoGPSExperience_deprecatedHandler()
        }
        
    }
    
    var showLocationEditorEntryPluginCallCount = 0
    var showLocationEditorEntryPluginHandler: ((HomeV1LocationEditorEntryViewable) -> ())?
    func showLocationEditorEntryPlugin(view: HomeV1LocationEditorEntryViewable)  {
        showLocationEditorEntryPluginCallCount += 1
    
        if let showLocationEditorEntryPluginHandler = showLocationEditorEntryPluginHandler {
            showLocationEditorEntryPluginHandler(view)
        }
        
    }
    
    var destinationEntryEdgeViewsHiddenSetCallCount = 0
    var underlyingDestinationEntryEdgeViewsHidden: Bool = false
    var destinationEntryEdgeViewsHidden: Bool {
        get {
            return underlyingDestinationEntryEdgeViewsHidden
        }
        set {
            underlyingDestinationEntryEdgeViewsHidden = newValue
            destinationEntryEdgeViewsHiddenSetCallCount += 1
        }
    }
    
    var showFeedPermalinkCallCount = 0
    var showFeedPermalinkHandler: ((ViewControllable) -> ())?
    func showFeedPermalink(with viewController: ViewControllable)  {
        showFeedPermalinkCallCount += 1
    
        if let showFeedPermalinkHandler = showFeedPermalinkHandler {
            showFeedPermalinkHandler(viewController)
        }
        
    }
    
    var dismissFeedPermalinkCallCount = 0
    var dismissFeedPermalinkHandler: (() -> ())?
    func dismissFeedPermalink()  {
        dismissFeedPermalinkCallCount += 1
    
        if let dismissFeedPermalinkHandler = dismissFeedPermalinkHandler {
            dismissFeedPermalinkHandler()
        }
        
    }
    
    var acceleratorsDidUpdateCallCount = 0
    var acceleratorsDidUpdateHandler: ((Bool) -> ())?
    func acceleratorsDidUpdate(areAvailable: Bool)  {
        acceleratorsDidUpdateCallCount += 1
    
        if let acceleratorsDidUpdateHandler = acceleratorsDidUpdateHandler {
            acceleratorsDidUpdateHandler(areAvailable)
        }
        
    }
    
    var hideFeedCallCount = 0
    var hideFeedHandler: (((@escaping () -> ()) -> ()) -> ())?
    func hideFeed(andPerform actions: (@escaping () -> ()) -> ())  {
        hideFeedCallCount += 1
    
        if let hideFeedHandler = hideFeedHandler {
            hideFeedHandler(actions)
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var topRowPillContainerViewSetCallCount = 0
var underlyingTopRowPillContainerView: ThemeableView!
public var topRowPillContainerView: ThemeableView {
        get {
            return underlyingTopRowPillContainerView
        }
        set {
            underlyingTopRowPillContainerView = newValue
            topRowPillContainerViewSetCallCount += 1
        }
    }
var topRowPillViewInsertionBehaviorProviderSetCallCount = 0
var underlyingTopRowPillViewInsertionBehaviorProvider: TopRowPillViewInsertionBehaviorProviding? = nil
public var topRowPillViewInsertionBehaviorProvider: TopRowPillViewInsertionBehaviorProviding? {
        get {
            return underlyingTopRowPillViewInsertionBehaviorProvider
        }
        set {
            underlyingTopRowPillViewInsertionBehaviorProvider = newValue
            topRowPillViewInsertionBehaviorProviderSetCallCount += 1
        }
    }
var topRowSecondaryContainerViewSetCallCount = 0
var underlyingTopRowSecondaryContainerView: UIView? = nil
public var topRowSecondaryContainerView: UIView? {
        get {
            return underlyingTopRowSecondaryContainerView
        }
        set {
            underlyingTopRowSecondaryContainerView = newValue
            topRowSecondaryContainerViewSetCallCount += 1
        }
    }
var topRowSecondaryAnimationProviderSetCallCount = 0
var underlyingTopRowSecondaryAnimationProvider: TopRowSecondaryViewControllerAnimationProviding? = nil
public var topRowSecondaryAnimationProvider: TopRowSecondaryViewControllerAnimationProviding? {
        get {
            return underlyingTopRowSecondaryAnimationProvider
        }
        set {
            underlyingTopRowSecondaryAnimationProvider = newValue
            topRowSecondaryAnimationProviderSetCallCount += 1
        }
    }
}

class ProductSelectionRoutingMock: ProductSelectionRouting {

    
    init() {}
    init(interactor: ProductSelectionInteractable = ProductSelectionInteractableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: ProductSelectionInteractable = ProductSelectionInteractableMock()
    var interactor: ProductSelectionInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

class RequestViewControllableMock: RequestViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var buttonHidingTransitionDidProgressCallCount = 0
    var buttonHidingTransitionDidProgressHandler: ((CGFloat) -> ())?
    func buttonHidingTransitionDidProgress(progress: CGFloat)  {
        buttonHidingTransitionDidProgressCallCount += 1
    
        if let buttonHidingTransitionDidProgressHandler = buttonHidingTransitionDidProgressHandler {
            buttonHidingTransitionDidProgressHandler(progress)
        }
        
    }
    
    var navigationListenerSetCallCount = 0
    var underlyingNavigationListener: RequestViewControllerListener? = nil
    var navigationListener: RequestViewControllerListener? {
        get {
            return underlyingNavigationListener
        }
        set {
            underlyingNavigationListener = newValue
            navigationListenerSetCallCount += 1
        }
    }
    
    var showModalCallCount = 0
    var showModalHandler: ((UIViewController) -> ())?
    func showModal(viewController: UIViewController)  {
        showModalCallCount += 1
    
        if let showModalHandler = showModalHandler {
            showModalHandler(viewController)
        }
        
    }
var presentMapLayerControllerCallCount = 0
public var presentMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func presentMapLayerController(_ controller: MapLayerControllable)  {
        presentMapLayerControllerCallCount += 1
    
        if let presentMapLayerControllerHandler = presentMapLayerControllerHandler {
            presentMapLayerControllerHandler(controller)
        }
        
    }
var dismissMapLayerControllerCallCount = 0
public var dismissMapLayerControllerHandler: ((MapLayerControllable) -> ())?
public func dismissMapLayerController(_ controller: MapLayerControllable)  {
        dismissMapLayerControllerCallCount += 1
    
        if let dismissMapLayerControllerHandler = dismissMapLayerControllerHandler {
            dismissMapLayerControllerHandler(controller)
        }
        
    }
var dismissAllMapLayersCallCount = 0
public var dismissAllMapLayersHandler: (() -> ())?
public func dismissAllMapLayers()  {
        dismissAllMapLayersCallCount += 1
    
        if let dismissAllMapLayersHandler = dismissAllMapLayersHandler {
            dismissAllMapLayersHandler()
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var transitionFromViewControllerCallCount = 0
public var transitionFromViewControllerHandler: ((UIViewController?, UIViewController?, TransitionDirection, TransitionStyle) -> ())?
public func transitionFromViewController(_ fromViewController: UIViewController?, toViewController: UIViewController?, direction: TransitionDirection, transitionStyle: TransitionStyle)  {
        transitionFromViewControllerCallCount += 1
    
        if let transitionFromViewControllerHandler = transitionFromViewControllerHandler {
            transitionFromViewControllerHandler(fromViewController, toViewController, direction, transitionStyle)
        }
        
    }
}

class ProductSelectionViewControllerPricingViewListenerMock: ProductSelectionViewControllerPricingViewListener {

    

    init() {

    }
        
    var didShowPricingViewForProductCallCount = 0
    var didShowPricingViewForProductHandler: ((ProductId, Any, String?, FareBindingType?) -> ())?
    func didShowPricingViewForProduct<T>(associatedId: ProductId, pricingView: T, placeholder: String?, fareBindingType: FareBindingType?)  {
        didShowPricingViewForProductCallCount += 1
    
        if let didShowPricingViewForProductHandler = didShowPricingViewForProductHandler {
            didShowPricingViewForProductHandler(associatedId, pricingView, placeholder, fareBindingType)
        }
        
    }
}

class ProductSelectionViewControllableMock: ProductSelectionViewControllable {

    
    init() {}
    init(transitionStateStream: Observable<ProductSelectionTransitionState> = PublishSubject(), uiviewController: UIViewController = UIViewController()) {
        self.transitionStateStream = transitionStateStream
        self.uiviewController = uiviewController
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionViewControllerListener? = nil
    var listener: ProductSelectionViewControllerListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var updateProductsCallCount = 0
    var updateProductsHandler: ((ProductCatalogViewModel, ProductId?) -> ())?
    func updateProducts(productCatalog: ProductCatalogViewModel, selectedProductId: ProductId?)  {
        updateProductsCallCount += 1
    
        if let updateProductsHandler = updateProductsHandler {
            updateProductsHandler(productCatalog, selectedProductId)
        }
        
    }
    
    var updateProductsProductCatalogCallCount = 0
    var updateProductsProductCatalogHandler: ((ProductCatalogViewModel) -> ())?
    func updateProducts(productCatalog: ProductCatalogViewModel)  {
        updateProductsProductCatalogCallCount += 1
    
        if let updateProductsProductCatalogHandler = updateProductsProductCatalogHandler {
            updateProductsProductCatalogHandler(productCatalog)
        }
        
    }
    
    var updateSelectedProductCallCount = 0
    var updateSelectedProductHandler: ((ProductId) -> ())?
    func updateSelectedProduct(associatedId: ProductId)  {
        updateSelectedProductCallCount += 1
    
        if let updateSelectedProductHandler = updateSelectedProductHandler {
            updateSelectedProductHandler(associatedId)
        }
        
    }
    
    private var transitionStateStreamSubjectKind = 0
    var transitionStateStreamSubjectSetCallCount = 0
    var transitionStateStreamSubject = PublishSubject<ProductSelectionTransitionState>() { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStreamReplaySubject = ReplaySubject<ProductSelectionTransitionState>.create(bufferSize: 1) { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStreamBehaviorSubject: BehaviorSubject<ProductSelectionTransitionState>! { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStreamRxSubject: Observable<ProductSelectionTransitionState>! { didSet { transitionStateStreamSubjectSetCallCount += 1 } }
    var transitionStateStream: Observable<ProductSelectionTransitionState> {
        get {
            if transitionStateStreamSubjectKind == 0 {
                return transitionStateStreamSubject
            } else if transitionStateStreamSubjectKind == 1 {
                return transitionStateStreamBehaviorSubject
            } else if transitionStateStreamSubjectKind == 2 {
                return transitionStateStreamReplaySubject
            } else {
                return transitionStateStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<ProductSelectionTransitionState> {
                transitionStateStreamSubject = val
                transitionStateStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<ProductSelectionTransitionState> {
                transitionStateStreamBehaviorSubject = val
                transitionStateStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<ProductSelectionTransitionState> {
                transitionStateStreamReplaySubject = val
                transitionStateStreamSubjectKind = 2
            } else {
                transitionStateStreamRxSubject = newValue
                transitionStateStreamSubjectKind = 3
            }
        }
    }
    
    var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
    
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }
    
    var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
    
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }
    
    var dismissDetailCallCount = 0
    var dismissDetailHandler: (() -> ())?
    func dismissDetail()  {
        dismissDetailCallCount += 1
    
        if let dismissDetailHandler = dismissDetailHandler {
            dismissDetailHandler()
        }
        
    }
    
    var presentAlertControllerCallCount = 0
    var presentAlertControllerHandler: ((BaseAlertController) -> ())?
    func presentAlertController(alertController: BaseAlertController)  {
        presentAlertControllerCallCount += 1
    
        if let presentAlertControllerHandler = presentAlertControllerHandler {
            presentAlertControllerHandler(alertController)
        }
        
    }
    
    var showContentStateCallCount = 0
    var showContentStateHandler: ((ProductSelectionContentState) -> ())?
    func showContentState(state: ProductSelectionContentState)  {
        showContentStateCallCount += 1
    
        if let showContentStateHandler = showContentStateHandler {
            showContentStateHandler(state)
        }
        
    }
    
    var showTooltipCallCount = 0
    var showTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func showTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        showTooltipCallCount += 1
    
        if let showTooltipHandler = showTooltipHandler {
            showTooltipHandler(viewModel)
        }
        
    }
    
    var heightCallCount = 0
    var heightHandler: ((CGFloat) -> (CGFloat))?
    func height(adjustedProgress: CGFloat) -> CGFloat {
        heightCallCount += 1
    
        if let heightHandler = heightHandler {
            return heightHandler(adjustedProgress)
        }
        return 0.0
    }
    
    var hideTooltipCallCount = 0
    var hideTooltipHandler: (() -> ())?
    func hideTooltip()  {
        hideTooltipCallCount += 1
    
        if let hideTooltipHandler = hideTooltipHandler {
            hideTooltipHandler()
        }
        
    }
}

class SelectedProductListenerMock: SelectedProductListener {

    

    init() {

    }
        
    var updateSelectedProductAnchorPointValuesCallCount = 0
    var updateSelectedProductAnchorPointValuesHandler: (() -> ())?
    func updateSelectedProductAnchorPointValues()  {
        updateSelectedProductAnchorPointValuesCallCount += 1
    
        if let updateSelectedProductAnchorPointValuesHandler = updateSelectedProductAnchorPointValuesHandler {
            updateSelectedProductAnchorPointValuesHandler()
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
}

class DualLocationEditorEntryPresentableMock: DualLocationEditorEntryPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: DualLocationEditorEntryPresentableListener? = nil
    var listener: DualLocationEditorEntryPresentableListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var configureCallCount = 0
    var configureHandler: ((PickupLocationConfidence) -> ())?
    func configure(pickupLocationConfidence: PickupLocationConfidence)  {
        configureCallCount += 1
    
        if let configureHandler = configureHandler {
            configureHandler(pickupLocationConfidence)
        }
        
    }
}

class ProductOptionsListenerMock: ProductOptionsListener {

    

    init() {

    }
    
}

class SelectedProductConfigurationBuildableMock: SelectedProductConfigurationBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((SelectedProductConfigurationListener) -> (SelectedProductConfigurationRouting))?
    func build(withListener listener: SelectedProductConfigurationListener) -> SelectedProductConfigurationRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return SelectedProductConfigurationRoutingMock()
    }
}

class HomePresentableV2Mock: HomePresentableV2 {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: HomePresentableListenerV2? = nil
    var listener: HomePresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var acceleratorsUpdatedCallCount = 0
    var acceleratorsUpdatedHandler: ((Bool) -> ())?
    func acceleratorsUpdated(availability: Bool)  {
        acceleratorsUpdatedCallCount += 1
    
        if let acceleratorsUpdatedHandler = acceleratorsUpdatedHandler {
            acceleratorsUpdatedHandler(availability)
        }
        
    }
    
    var calculateAvailableSizeCallCount = 0
    var calculateAvailableSizeHandler: ((Bool) -> (CGSize?))?
    func calculateAvailableSize(_ toScreenTop: Bool) -> CGSize? {
        calculateAvailableSizeCallCount += 1
    
        if let calculateAvailableSizeHandler = calculateAvailableSizeHandler {
            return calculateAvailableSizeHandler(toScreenTop)
        }
        return nil
    }
    
    var updateDimCallCount = 0
    var updateDimHandler: ((Bool) -> ())?
    func updateDim(shouldDim: Bool)  {
        updateDimCallCount += 1
    
        if let updateDimHandler = updateDimHandler {
            updateDimHandler(shouldDim)
        }
        
    }
    
    var updateMapPaddingIfNeededCallCount = 0
    var updateMapPaddingIfNeededHandler: (() -> ())?
    func updateMapPaddingIfNeeded()  {
        updateMapPaddingIfNeededCallCount += 1
    
        if let updateMapPaddingIfNeededHandler = updateMapPaddingIfNeededHandler {
            updateMapPaddingIfNeededHandler()
        }
        
    }
    
    var modeNavigationUpdatedCallCount = 0
    var modeNavigationUpdatedHandler: ((ModeNavigationPosition?) -> ())?
    func modeNavigationUpdated(_ position: ModeNavigationPosition?)  {
        modeNavigationUpdatedCallCount += 1
    
        if let modeNavigationUpdatedHandler = modeNavigationUpdatedHandler {
            modeNavigationUpdatedHandler(position)
        }
        
    }
    
    var updateRideContextEntryTypeCallCount = 0
    var updateRideContextEntryTypeHandler: ((RideContextEntryType) -> ())?
    func updateRideContextEntryType(_ type: RideContextEntryType)  {
        updateRideContextEntryTypeCallCount += 1
    
        if let updateRideContextEntryTypeHandler = updateRideContextEntryTypeHandler {
            updateRideContextEntryTypeHandler(type)
        }
        
    }
}

class ConfirmationPresentableV2Mock: ConfirmationPresentableV2 {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationPresentableListenerV2? = nil
    var listener: ConfirmationPresentableListenerV2? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateDestinationEntryNeededCallCount = 0
    var updateDestinationEntryNeededHandler: ((Bool) -> ())?
    func updateDestinationEntryNeeded(_ destinationEntryNeeded: Bool)  {
        updateDestinationEntryNeededCallCount += 1
    
        if let updateDestinationEntryNeededHandler = updateDestinationEntryNeededHandler {
            updateDestinationEntryNeededHandler(destinationEntryNeeded)
        }
        
    }
    
    var updateViewStateIfNeededCallCount = 0
    var updateViewStateIfNeededHandler: (() -> ())?
    func updateViewStateIfNeeded()  {
        updateViewStateIfNeededCallCount += 1
    
        if let updateViewStateIfNeededHandler = updateViewStateIfNeededHandler {
            updateViewStateIfNeededHandler()
        }
        
    }
    
    var updateMapPaddingIfNeededCallCount = 0
    var updateMapPaddingIfNeededHandler: (() -> ())?
    func updateMapPaddingIfNeeded()  {
        updateMapPaddingIfNeededCallCount += 1
    
        if let updateMapPaddingIfNeededHandler = updateMapPaddingIfNeededHandler {
            updateMapPaddingIfNeededHandler()
        }
        
    }
    
    var updateProductSelectionResponseMetadataCallCount = 0
    var updateProductSelectionResponseMetadataHandler: ((RealtimeRider.ProductSelectionResponseMetadata?) -> ())?
    func updateProductSelectionResponseMetadata(_ productSelectionResponseMetadata: RealtimeRider.ProductSelectionResponseMetadata?)  {
        updateProductSelectionResponseMetadataCallCount += 1
    
        if let updateProductSelectionResponseMetadataHandler = updateProductSelectionResponseMetadataHandler {
            updateProductSelectionResponseMetadataHandler(productSelectionResponseMetadata)
        }
        
    }
}

class HomeListenerMock: HomeListener {

    

    init() {

    }
        
    var wantDestinationCallCount = 0
    var wantDestinationHandler: ((LocationEditorMode) -> ())?
    func wantDestination(mode: LocationEditorMode)  {
        wantDestinationCallCount += 1
    
        if let wantDestinationHandler = wantDestinationHandler {
            wantDestinationHandler(mode)
        }
        
    }
    
    var wantPickupCallCount = 0
    var wantPickupHandler: ((LocationEditorMode) -> ())?
    func wantPickup(mode: LocationEditorMode)  {
        wantPickupCallCount += 1
    
        if let wantPickupHandler = wantPickupHandler {
            wantPickupHandler(mode)
        }
        
    }
    
    var didSelectStuntCallCount = 0
    var didSelectStuntHandler: ((HomeInteractable, VehicleViewId) -> ())?
    func didSelectStunt(interactor: HomeInteractable, vehicleViewId: VehicleViewId)  {
        didSelectStuntCallCount += 1
    
        if let didSelectStuntHandler = didSelectStuntHandler {
            didSelectStuntHandler(interactor, vehicleViewId)
        }
        
    }
}

class ProductOptionsBuildableMock: ProductOptionsBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ProductOptionsRouting))?
    func build() -> ProductOptionsRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ProductOptionsRoutingMock()
    }
}

class PlusOneBuildableMock: PlusOneBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (PlusOneRoutingCommon))?
    func build() -> PlusOneRoutingCommon {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        fatalError("buildHandler returns can't have a default value thus its handler must be set")
    }
}

class ProductSelectionPresentableMock: ProductSelectionPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: ProductSelectionPresenterListener? = nil
    var listener: ProductSelectionPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateProductsCallCount = 0
    var updateProductsHandler: ((ProductCatalog, ProductSubtitleMap?, ProductToastMap?, ProductBadgeMap?, ProductDetailInfoMap?, ProductAnnotationsMap?, ProductFareBindingTypeMap?, ProductExplainerMap?, ProductId?, ProductDetailViewMap?, ProductViewEmphasisMap?, ProductStickerMap?, ProductRecommendationInfoMap?) -> ())?
    func updateProducts(productCatalog: ProductCatalog, productSubtitleMap: ProductSubtitleMap?, productToastMap: ProductToastMap?, productBadgeMap: ProductBadgeMap?, productDetailInfoMap: ProductDetailInfoMap?, productAnnotationsMap: ProductAnnotationsMap?, productFareBindingTypeMap: ProductFareBindingTypeMap?, productExplainerMap: ProductExplainerMap?, selectedProductId: ProductId?, productDetailViewMap: ProductDetailViewMap?, productViewEmphasisMap: ProductViewEmphasisMap?, productStickerMap: ProductStickerMap?, productRecommendationInfoMap: ProductRecommendationInfoMap?)  {
        updateProductsCallCount += 1
    
        if let updateProductsHandler = updateProductsHandler {
            updateProductsHandler(productCatalog, productSubtitleMap, productToastMap, productBadgeMap, productDetailInfoMap, productAnnotationsMap, productFareBindingTypeMap, productExplainerMap, selectedProductId, productDetailViewMap, productViewEmphasisMap, productStickerMap, productRecommendationInfoMap)
        }
        
    }
    
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductId) -> ())?
    func selectProduct(associatedId: ProductId)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(associatedId)
        }
        
    }
    
    var showFetchingFareCallCount = 0
    var showFetchingFareHandler: (() -> ())?
    func showFetchingFare()  {
        showFetchingFareCallCount += 1
    
        if let showFetchingFareHandler = showFetchingFareHandler {
            showFetchingFareHandler()
        }
        
    }
    
    var hideFetchingFareCallCount = 0
    var hideFetchingFareHandler: (() -> ())?
    func hideFetchingFare()  {
        hideFetchingFareCallCount += 1
    
        if let hideFetchingFareHandler = hideFetchingFareHandler {
            hideFetchingFareHandler()
        }
        
    }
    
    var showUpsellCallCount = 0
    var showUpsellHandler: ((Upsell) -> ())?
    func showUpsell(upsell: Upsell)  {
        showUpsellCallCount += 1
    
        if let showUpsellHandler = showUpsellHandler {
            showUpsellHandler(upsell)
        }
        
    }
    
    var showContentStateCallCount = 0
    var showContentStateHandler: ((ProductSelectionContentState) -> ())?
    func showContentState(state: ProductSelectionContentState)  {
        showContentStateCallCount += 1
    
        if let showContentStateHandler = showContentStateHandler {
            showContentStateHandler(state)
        }
        
    }
    
    var showTooltipCallCount = 0
    var showTooltipHandler: ((ProductTooltipViewModel) -> ())?
    func showTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        showTooltipCallCount += 1
    
        if let showTooltipHandler = showTooltipHandler {
            showTooltipHandler(viewModel)
        }
        
    }
    
    var hideTooltipCallCount = 0
    var hideTooltipHandler: (() -> ())?
    func hideTooltip()  {
        hideTooltipCallCount += 1
    
        if let hideTooltipHandler = hideTooltipHandler {
            hideTooltipHandler()
        }
        
    }
}

class ConfirmationListenerMock: ConfirmationListener {

    

    init() {

    }
        
    var confirmationDidFinishCallCount = 0
    var confirmationDidFinishHandler: (() -> ())?
    func confirmationDidFinish()  {
        confirmationDidFinishCallCount += 1
    
        if let confirmationDidFinishHandler = confirmationDidFinishHandler {
            confirmationDidFinishHandler()
        }
        
    }
    
    var wantToEditPickupLocationCallCount = 0
    var wantToEditPickupLocationHandler: ((Bool) -> ())?
    func wantToEditPickupLocation(destinationHidden: Bool)  {
        wantToEditPickupLocationCallCount += 1
    
        if let wantToEditPickupLocationHandler = wantToEditPickupLocationHandler {
            wantToEditPickupLocationHandler(destinationHidden)
        }
        
    }
    
    var wantToEditDestinationLocationCallCount = 0
    var wantToEditDestinationLocationHandler: (() -> ())?
    func wantToEditDestinationLocation()  {
        wantToEditDestinationLocationCallCount += 1
    
        if let wantToEditDestinationLocationHandler = wantToEditDestinationLocationHandler {
            wantToEditDestinationLocationHandler()
        }
        
    }
    
    var productSelectionCompletedCallCount = 0
    var productSelectionCompletedHandler: ((ProductId) -> ())?
    func productSelectionCompleted(productId: ProductId)  {
        productSelectionCompletedCallCount += 1
    
        if let productSelectionCompletedHandler = productSelectionCompletedHandler {
            productSelectionCompletedHandler(productId)
        }
        
    }
    
    var wantSelectedProductCallCount = 0
    var wantSelectedProductHandler: ((ProductId) -> ())?
    func wantSelectedProduct(productId: ProductId)  {
        wantSelectedProductCallCount += 1
    
        if let wantSelectedProductHandler = wantSelectedProductHandler {
            wantSelectedProductHandler(productId)
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
    
    var wantToDismissCallCount = 0
    var wantToDismissHandler: (() -> ())?
    func wantToDismiss()  {
        wantToDismissCallCount += 1
    
        if let wantToDismissHandler = wantToDismissHandler {
            wantToDismissHandler()
        }
        
    }
}

class MenuPresenterListenerMock: MenuPresenterListener {

    

    init() {

    }
        
    var didTapMenuHeaderCallCount = 0
    var didTapMenuHeaderHandler: (() -> ())?
    func didTapMenuHeader()  {
        didTapMenuHeaderCallCount += 1
    
        if let didTapMenuHeaderHandler = didTapMenuHeaderHandler {
            didTapMenuHeaderHandler()
        }
        
    }
    
    var didTapNavigationItemAtIndexCallCount = 0
    var didTapNavigationItemAtIndexHandler: ((Int) -> ())?
    func didTapNavigationItemAtIndex(index: Int)  {
        didTapNavigationItemAtIndexCallCount += 1
    
        if let didTapNavigationItemAtIndexHandler = didTapNavigationItemAtIndexHandler {
            didTapNavigationItemAtIndexHandler(index)
        }
        
    }
    
    var didTapActionItemAtIndexCallCount = 0
    var didTapActionItemAtIndexHandler: ((Int) -> ())?
    func didTapActionItemAtIndex(index: Int)  {
        didTapActionItemAtIndexCallCount += 1
    
        if let didTapActionItemAtIndexHandler = didTapActionItemAtIndexHandler {
            didTapActionItemAtIndexHandler(index)
        }
        
    }
    
    var wantHideMenuCallCount = 0
    var wantHideMenuHandler: (((() -> ())?) -> ())?
    func wantHideMenu(completion: (() -> ())?)  {
        wantHideMenuCallCount += 1
    
        if let wantHideMenuHandler = wantHideMenuHandler {
            wantHideMenuHandler(completion)
        }
        
    }
}

class SelectedProductPresentableListenerMock: SelectedProductPresentableListener {

    

    init() {

    }
        
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
}

public class ProductSelectionTooltipShowingMock: ProductSelectionTooltipShowing {

    

    public init() {

    }
        
    var tooltipShowingListenerSetCallCount = 0
    var underlyingTooltipShowingListener: ProductSelectionTooltipShowingListener? = nil
    public var tooltipShowingListener: ProductSelectionTooltipShowingListener? {
        get {
            return underlyingTooltipShowingListener
        }
        set {
            underlyingTooltipShowingListener = newValue
            tooltipShowingListenerSetCallCount += 1
        }
    }
    
    var showTooltipCallCount = 0
    public var showTooltipHandler: ((ProductTooltipViewModel, TooltipViewBindable?, ProductSelectionTooltipContextProviding?) -> ())?
    public func showTooltip(withViewModel viewModel: ProductTooltipViewModel, tooltipBindable: TooltipViewBindable?, contextProvider: ProductSelectionTooltipContextProviding?)  {
        showTooltipCallCount += 1
    
        if let showTooltipHandler = showTooltipHandler {
            showTooltipHandler(viewModel, tooltipBindable, contextProvider)
        }
        
    }
    
    var hideTooltipCallCount = 0
    public var hideTooltipHandler: ((ProductTooltipViewModel) -> ())?
    public func hideTooltip(withViewModel viewModel: ProductTooltipViewModel)  {
        hideTooltipCallCount += 1
    
        if let hideTooltipHandler = hideTooltipHandler {
            hideTooltipHandler(viewModel)
        }
        
    }
}

class MainPresentableMock: MainPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MainPresenterListener? = nil
    var listener: MainPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
}

class RootDynamicComponentMock: RootDynamicComponent {

    

    init() {

    }
        
    var setStatusUpdateLoggerCallCount = 0
    var setStatusUpdateLoggerHandler: ((StatusUpdateLogger?) -> ())?
    func setStatusUpdateLogger(logger: StatusUpdateLogger?)  {
        setStatusUpdateLoggerCallCount += 1
    
        if let setStatusUpdateLoggerHandler = setStatusUpdateLoggerHandler {
            setStatusUpdateLoggerHandler(logger)
        }
        
    }
}

class TripDetailsBuildableMock: TripDetailsBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((TripDetailsListener) -> (TripDetailsRouting))?
    func build(withListener listener: TripDetailsListener) -> TripDetailsRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return TripDetailsRoutingMock()
    }
}

class MenuPresentableMock: MenuPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: MenuPresenterListener? = nil
    var listener: MenuPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var reloadNavigationItemsCallCount = 0
    var reloadNavigationItemsHandler: (([MenuItemPresentingInternal]) -> ())?
    func reloadNavigationItems(items: [MenuItemPresentingInternal])  {
        reloadNavigationItemsCallCount += 1
    
        if let reloadNavigationItemsHandler = reloadNavigationItemsHandler {
            reloadNavigationItemsHandler(items)
        }
        
    }
    
    var reloadActionItemsCallCount = 0
    var reloadActionItemsHandler: (([MenuItemPresentingInternal]) -> ())?
    func reloadActionItems(items: [MenuItemPresentingInternal])  {
        reloadActionItemsCallCount += 1
    
        if let reloadActionItemsHandler = reloadActionItemsHandler {
            reloadActionItemsHandler(items)
        }
        
    }
    
    var setClientCallCount = 0
    var setClientHandler: ((Rider) -> ())?
    func setClient(client: Rider)  {
        setClientCallCount += 1
    
        if let setClientHandler = setClientHandler {
            setClientHandler(client)
        }
        
    }
    
    var setClientImageCallCount = 0
    var setClientImageHandler: ((UIImage) -> ())?
    func setClientImage(image: UIImage)  {
        setClientImageCallCount += 1
    
        if let setClientImageHandler = setClientImageHandler {
            setClientImageHandler(image)
        }
        
    }
}

class RootRoutingMock: RootRouting {

    
    init() {}
    init(interactor: RootInteractable = RootInteractableMock(), lifecycle: Observable<RouterLifecycle> = PublishSubject(), viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.interactor = interactor
        self.lifecycle = lifecycle
        self.viewControllable = viewControllable
        self.interactable = interactable
        self.children = children
    }
        
    var interactorSetCallCount = 0
    var underlyingInteractor: RootInteractable = RootInteractableMock()
    var interactor: RootInteractable {
        get {
            return underlyingInteractor
        }
        set {
            underlyingInteractor = newValue
            interactorSetCallCount += 1
        }
    }
    
    var applicationOpenURLHandlerSetCallCount = 0
    var underlyingApplicationOpenURLHandler: ApplicationOpenURLHandler! 
    var applicationOpenURLHandler: ApplicationOpenURLHandler {
        get {
            return underlyingApplicationOpenURLHandler
        }
        set {
            underlyingApplicationOpenURLHandler = newValue
            applicationOpenURLHandlerSetCallCount += 1
        }
    }
    
    var routeToEntryCallCount = 0
    var routeToEntryHandler: (() -> (EntryActionableItem))?
    func routeToEntry() -> EntryActionableItem {
        routeToEntryCallCount += 1
    
        if let routeToEntryHandler = routeToEntryHandler {
            return routeToEntryHandler()
        }
        return EntryActionableItemMock()
    }
    
    var routeToMainCallCount = 0
    var routeToMainHandler: ((Session, ImmutableSession) -> (MainActionableItem))?
    func routeToMain(session: Session, immutableSession: ImmutableSession) -> MainActionableItem {
        routeToMainCallCount += 1
    
        if let routeToMainHandler = routeToMainHandler {
            return routeToMainHandler(session, immutableSession)
        }
        return MainActionableItemMock()
    }
var launchFromWindowCallCount = 0
public var launchFromWindowHandler: ((UIWindow) -> ())?
public func launchFromWindow(_ window: UIWindow)  {
        launchFromWindowCallCount += 1
    
        if let launchFromWindowHandler = launchFromWindowHandler {
            launchFromWindowHandler(window)
        }
        
    }
private var lifecycleSubjectKind = 0
var lifecycleSubjectSetCallCount = 0
var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
var lifecycleRxSubject: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
public var lifecycle: Observable<RouterLifecycle> {
        get {
            if lifecycleSubjectKind == 0 {
                return lifecycleSubject
            } else if lifecycleSubjectKind == 1 {
                return lifecycleBehaviorSubject
            } else if lifecycleSubjectKind == 2 {
                return lifecycleReplaySubject
            } else {
                return lifecycleRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<RouterLifecycle> {
                lifecycleSubject = val
                lifecycleSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                lifecycleBehaviorSubject = val
                lifecycleSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                lifecycleReplaySubject = val
                lifecycleSubjectKind = 2
            } else {
                lifecycleRxSubject = newValue
                lifecycleSubjectKind = 3
            }
        }
    }
var viewControllableSetCallCount = 0
var underlyingViewControllable: ViewControllable = ViewControllableMock()
public var viewControllable: ViewControllable {
        get {
            return underlyingViewControllable
        }
        set {
            underlyingViewControllable = newValue
            viewControllableSetCallCount += 1
        }
    }
var interactableSetCallCount = 0
var underlyingInteractable: Interactable = InteractableMock()
public var interactable: Interactable {
        get {
            return underlyingInteractable
        }
        set {
            underlyingInteractable = newValue
            interactableSetCallCount += 1
        }
    }
var childrenSetCallCount = 0
var underlyingChildren: [Routing] = [Routing]()
public var children: [Routing] {
        get {
            return underlyingChildren
        }
        set {
            underlyingChildren = newValue
            childrenSetCallCount += 1
        }
    }
var loadCallCount = 0
public var loadHandler: (() -> ())?
public func load()  {
        loadCallCount += 1
    
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
var attachChildCallCount = 0
public var attachChildHandler: ((Routing) -> ())?
public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
    
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
var detachChildCallCount = 0
public var detachChildHandler: ((Routing) -> ())?
public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
    
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

public class OrchestratorPluginExtensionMock: OrchestratorPluginExtension {

    
    public init() {}
    public init(networkStatusStream: OrchestratorNetworkStatusStreaming = OrchestratorNetworkStatusStreamingMock(), mutableNetworkStatusStream: MutableOrchestratorNetworkStatusStreaming = MutableOrchestratorNetworkStatusStreamingMock()) {
        self.networkStatusStream = networkStatusStream
        self.mutableNetworkStatusStream = mutableNetworkStatusStream
    }
        
    var addPaymentFlowProviderSetCallCount = 0
    var underlyingAddPaymentFlowProvider: AddPaymentFlowProvider? = nil
    public var addPaymentFlowProvider: AddPaymentFlowProvider? {
        get {
            return underlyingAddPaymentFlowProvider
        }
        set {
            underlyingAddPaymentFlowProvider = newValue
            addPaymentFlowProviderSetCallCount += 1
        }
    }
    
    var addPaymentAddonProviderSetCallCount = 0
    var underlyingAddPaymentAddonProvider: AddPaymentAddonProvider? = nil
    public var addPaymentAddonProvider: AddPaymentAddonProvider? {
        get {
            return underlyingAddPaymentAddonProvider
        }
        set {
            underlyingAddPaymentAddonProvider = newValue
            addPaymentAddonProviderSetCallCount += 1
        }
    }
    
    var addPaymentPlusOneAddonProviderSetCallCount = 0
    var underlyingAddPaymentPlusOneAddonProvider: AddPaymentPlusOneAddonProvider? = nil
    public var addPaymentPlusOneAddonProvider: AddPaymentPlusOneAddonProvider? {
        get {
            return underlyingAddPaymentPlusOneAddonProvider
        }
        set {
            underlyingAddPaymentPlusOneAddonProvider = newValue
            addPaymentPlusOneAddonProviderSetCallCount += 1
        }
    }
    
    var legalConsentDisclaimerPluginPointSetCallCount = 0
    var underlyingLegalConsentDisclaimerPluginPoint: LegalConsentDisclaimerPluginPoint? = nil
    public var legalConsentDisclaimerPluginPoint: LegalConsentDisclaimerPluginPoint? {
        get {
            return underlyingLegalConsentDisclaimerPluginPoint
        }
        set {
            underlyingLegalConsentDisclaimerPluginPoint = newValue
            legalConsentDisclaimerPluginPointSetCallCount += 1
        }
    }
    
    var paymentMethodDisplayableProviderSetCallCount = 0
    var underlyingPaymentMethodDisplayableProvider: PaymentMethodDisplayableProvider? = nil
    public var paymentMethodDisplayableProvider: PaymentMethodDisplayableProvider? {
        get {
            return underlyingPaymentMethodDisplayableProvider
        }
        set {
            underlyingPaymentMethodDisplayableProvider = newValue
            paymentMethodDisplayableProviderSetCallCount += 1
        }
    }
    
    var postAddPaymentAddonProviderSetCallCount = 0
    var underlyingPostAddPaymentAddonProvider: PostAddPaymentAddonProvider? = nil
    public var postAddPaymentAddonProvider: PostAddPaymentAddonProvider? {
        get {
            return underlyingPostAddPaymentAddonProvider
        }
        set {
            underlyingPostAddPaymentAddonProvider = newValue
            postAddPaymentAddonProviderSetCallCount += 1
        }
    }
    
    var verifyPaymentFlowProviderSetCallCount = 0
    var underlyingVerifyPaymentFlowProvider: VerifyPaymentFlowProvider? = nil
    public var verifyPaymentFlowProvider: VerifyPaymentFlowProvider? {
        get {
            return underlyingVerifyPaymentFlowProvider
        }
        set {
            underlyingVerifyPaymentFlowProvider = newValue
            verifyPaymentFlowProviderSetCallCount += 1
        }
    }
    
    var helpIssuePluginPointOptionalSetCallCount = 0
    var underlyingHelpIssuePluginPointOptional: HelpIssuePluginPoint? = nil
    public var helpIssuePluginPointOptional: HelpIssuePluginPoint? {
        get {
            return underlyingHelpIssuePluginPointOptional
        }
        set {
            underlyingHelpIssuePluginPointOptional = newValue
            helpIssuePluginPointOptionalSetCallCount += 1
        }
    }
    
    var postAuthenticationStepPluginPointSetCallCount = 0
    var underlyingPostAuthenticationStepPluginPoint: PostAuthenticationStepPluginPoint? = nil
    public var postAuthenticationStepPluginPoint: PostAuthenticationStepPluginPoint? {
        get {
            return underlyingPostAuthenticationStepPluginPoint
        }
        set {
            underlyingPostAuthenticationStepPluginPoint = newValue
            postAuthenticationStepPluginPointSetCallCount += 1
        }
    }
    
    var networkStatusStreamSetCallCount = 0
    var underlyingNetworkStatusStream: OrchestratorNetworkStatusStreaming = OrchestratorNetworkStatusStreamingMock()
    public var networkStatusStream: OrchestratorNetworkStatusStreaming {
        get {
            return underlyingNetworkStatusStream
        }
        set {
            underlyingNetworkStatusStream = newValue
            networkStatusStreamSetCallCount += 1
        }
    }
    
    var mutableNetworkStatusStreamSetCallCount = 0
    var underlyingMutableNetworkStatusStream: MutableOrchestratorNetworkStatusStreaming = MutableOrchestratorNetworkStatusStreamingMock()
    public var mutableNetworkStatusStream: MutableOrchestratorNetworkStatusStreaming {
        get {
            return underlyingMutableNetworkStatusStream
        }
        set {
            underlyingMutableNetworkStatusStream = newValue
            mutableNetworkStatusStreamSetCallCount += 1
        }
    }
}

class RequestPresentableMock: RequestPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: RequestPresenterListener? = nil
    var listener: RequestPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
}

class HomeListenerV2Mock: HomeListenerV2 {

    

    init() {

    }
        
    var wantLocationEditorCallCount = 0
    var wantLocationEditorHandler: ((LocationEditorContext, LocationEditorMode) -> ())?
    func wantLocationEditor(context: LocationEditorContext, mode: LocationEditorMode)  {
        wantLocationEditorCallCount += 1
    
        if let wantLocationEditorHandler = wantLocationEditorHandler {
            wantLocationEditorHandler(context, mode)
        }
        
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
    
    var wantUberHomeCallCount = 0
    var wantUberHomeHandler: (() -> ())?
    func wantUberHome()  {
        wantUberHomeCallCount += 1
    
        if let wantUberHomeHandler = wantUberHomeHandler {
            wantUberHomeHandler()
        }
        
    }
}

class ProductSelectionListenerV2Mock: ProductSelectionListenerV2 {

    

    init() {

    }
        
    var selectProductCallCount = 0
    var selectProductHandler: ((ProductItemId, Bool) -> ())?
    func selectProduct(productItemId: ProductItemId, shouldRouteToSelectedProduct: Bool)  {
        selectProductCallCount += 1
    
        if let selectProductHandler = selectProductHandler {
            selectProductHandler(productItemId, shouldRouteToSelectedProduct)
        }
        
    }
    
    var updateProductSelectionViewStateTransitionProgressCallCount = 0
    var updateProductSelectionViewStateTransitionProgressHandler: (() -> ())?
    func updateProductSelectionViewStateTransitionProgress()  {
        updateProductSelectionViewStateTransitionProgressCallCount += 1
    
        if let updateProductSelectionViewStateTransitionProgressHandler = updateProductSelectionViewStateTransitionProgressHandler {
            updateProductSelectionViewStateTransitionProgressHandler()
        }
        
    }
    
    var updateProductSelectionAnchorPointValuesCallCount = 0
    var updateProductSelectionAnchorPointValuesHandler: (() -> ())?
    func updateProductSelectionAnchorPointValues()  {
        updateProductSelectionAnchorPointValuesCallCount += 1
    
        if let updateProductSelectionAnchorPointValuesHandler = updateProductSelectionAnchorPointValuesHandler {
            updateProductSelectionAnchorPointValuesHandler()
        }
        
    }
}

class RequestListenerMock: RequestListener {

    

    init() {

    }
        
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var pickupLocationUpdatedCallCount = 0
    var pickupLocationUpdatedHandler: ((CLLocationCoordinate2D, Date?) -> ())?
    func pickupLocationUpdated(locationCoordinate: CLLocationCoordinate2D, timestamp: Date?)  {
        pickupLocationUpdatedCallCount += 1
    
        if let pickupLocationUpdatedHandler = pickupLocationUpdatedHandler {
            pickupLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var destinationLocationUpdatedCallCount = 0
    var destinationLocationUpdatedHandler: ((CLLocationCoordinate2D?, Date?) -> ())?
    func destinationLocationUpdated(locationCoordinate: CLLocationCoordinate2D?, timestamp: Date?)  {
        destinationLocationUpdatedCallCount += 1
    
        if let destinationLocationUpdatedHandler = destinationLocationUpdatedHandler {
            destinationLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var sendCallCount = 0
    var sendHandler: ((PickupRequestV2, CoreShared.Product?) -> ())?
    func send(pickupRequest: PickupRequestV2, product: CoreShared.Product?)  {
        sendCallCount += 1
    
        if let sendHandler = sendHandler {
            sendHandler(pickupRequest, product)
        }
        
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
}

public class ProductSelectionTooltipShowingListenerMock: ProductSelectionTooltipShowingListener {

    

    public init() {

    }
        
    var tooltipShowerCallCount = 0
    public var tooltipShowerHandler: ((ProductSelectionTooltipShowing, ProductTooltipViewModel) -> ())?
    public func tooltipShower(_ shower: ProductSelectionTooltipShowing, didShowTooltipWithViewModel tooltipViewModel: ProductTooltipViewModel)  {
        tooltipShowerCallCount += 1
    
        if let tooltipShowerHandler = tooltipShowerHandler {
            tooltipShowerHandler(shower, tooltipViewModel)
        }
        
    }
    
    var tooltipShowerDidHideTooltipWithViewModelCallCount = 0
    public var tooltipShowerDidHideTooltipWithViewModelHandler: ((ProductSelectionTooltipShowing, ProductTooltipViewModel) -> ())?
    public func tooltipShower(_ shower: ProductSelectionTooltipShowing, didHideTooltipWithViewModel tooltipViewModel: ProductTooltipViewModel)  {
        tooltipShowerDidHideTooltipWithViewModelCallCount += 1
    
        if let tooltipShowerDidHideTooltipWithViewModelHandler = tooltipShowerDidHideTooltipWithViewModelHandler {
            tooltipShowerDidHideTooltipWithViewModelHandler(shower, tooltipViewModel)
        }
        
    }
}

class MenuListenerMock: MenuListener {

    

    init() {

    }
        
    var wantHideMenuCallCount = 0
    var wantHideMenuHandler: (((() -> ())?) -> ())?
    func wantHideMenu(completion: (() -> ())?)  {
        wantHideMenuCallCount += 1
    
        if let wantHideMenuHandler = wantHideMenuHandler {
            wantHideMenuHandler(completion)
        }
        
    }
    
    var openMenuItemCallCount = 0
    var openMenuItemHandler: ((MenuItemRouting, Bool) -> (Observable<(MenuItemActionableItem, ())>))?
    func openMenuItem(_ menuItem: MenuItemRouting, shouldShowInFullScreen: Bool) -> Observable<(MenuItemActionableItem, ())> {
        openMenuItemCallCount += 1
    
        if let openMenuItemHandler = openMenuItemHandler {
            return openMenuItemHandler(menuItem, shouldShowInFullScreen)
        }
        return Observable.empty()
    }
}

class RideInteractableMock: RideInteractable {

    
    init() {}
    init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }
        
    var pickupLocationUpdatedCallCount = 0
    var pickupLocationUpdatedHandler: ((CLLocationCoordinate2D, Date?) -> ())?
    func pickupLocationUpdated(locationCoordinate: CLLocationCoordinate2D, timestamp: Date?)  {
        pickupLocationUpdatedCallCount += 1
    
        if let pickupLocationUpdatedHandler = pickupLocationUpdatedHandler {
            pickupLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var destinationLocationUpdatedCallCount = 0
    var destinationLocationUpdatedHandler: ((CLLocationCoordinate2D?, Date?) -> ())?
    func destinationLocationUpdated(locationCoordinate: CLLocationCoordinate2D?, timestamp: Date?)  {
        destinationLocationUpdatedCallCount += 1
    
        if let destinationLocationUpdatedHandler = destinationLocationUpdatedHandler {
            destinationLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var sendCallCount = 0
    var sendHandler: ((PickupRequestV2, CoreShared.Product?) -> ())?
    func send(pickupRequest: PickupRequestV2, product: CoreShared.Product?)  {
        sendCallCount += 1
    
        if let sendHandler = sendHandler {
            sendHandler(pickupRequest, product)
        }
        
    }
    
    var routerSetCallCount = 0
    var underlyingRouter: RideRouting? = nil
    var router: RideRouting? {
        get {
            return underlyingRouter
        }
        set {
            underlyingRouter = newValue
            routerSetCallCount += 1
        }
    }
    
    var showModeNavigationCallCount = 0
    var showModeNavigationHandler: (() -> ())?
    func showModeNavigation()  {
        showModeNavigationCallCount += 1
    
        if let showModeNavigationHandler = showModeNavigationHandler {
            showModeNavigationHandler()
        }
        
    }
    
    var rideListenerSetCallCount = 0
    var underlyingRideListener: RideListener? = nil
    var rideListener: RideListener? {
        get {
            return underlyingRideListener
        }
        set {
            underlyingRideListener = newValue
            rideListenerSetCallCount += 1
        }
    }
    
    var hideModeNavigationCallCount = 0
    var hideModeNavigationHandler: (() -> ())?
    func hideModeNavigation()  {
        hideModeNavigationCallCount += 1
    
        if let hideModeNavigationHandler = hideModeNavigationHandler {
            hideModeNavigationHandler()
        }
        
    }
    
    var updateRideContextCallCount = 0
    var updateRideContextHandler: ((RideContext) -> ())?
    func updateRideContext(_ context: RideContext)  {
        updateRideContextCallCount += 1
    
        if let updateRideContextHandler = updateRideContextHandler {
            updateRideContextHandler(context)
        }
        
    }
    
    var cancelTripCallCount = 0
    var cancelTripHandler: (() -> ())?
    func cancelTrip()  {
        cancelTripCallCount += 1
    
        if let cancelTripHandler = cancelTripHandler {
            cancelTripHandler()
        }
        
    }
    
    var didTripStateReachOnTripCallCount = 0
    var didTripStateReachOnTripHandler: (() -> ())?
    func didTripStateReachOnTrip()  {
        didTripStateReachOnTripCallCount += 1
    
        if let didTripStateReachOnTripHandler = didTripStateReachOnTripHandler {
            didTripStateReachOnTripHandler()
        }
        
    }
    
    var completeTripIfNeededCallCount = 0
    var completeTripIfNeededHandler: ((RiderUuid, TripUuid) -> ())?
    func completeTripIfNeeded(riderUUID: RiderUuid, tripUUID: TripUuid)  {
        completeTripIfNeededCallCount += 1
    
        if let completeTripIfNeededHandler = completeTripIfNeededHandler {
            completeTripIfNeededHandler(riderUUID, tripUUID)
        }
        
    }
var alternativeTripCompletedCallCount = 0
public var alternativeTripCompletedHandler: ((Error?) -> ())?
public func alternativeTripCompleted(withRequestError requestError: Error?)  {
        alternativeTripCompletedCallCount += 1
    
        if let alternativeTripCompletedHandler = alternativeTripCompletedHandler {
            alternativeTripCompletedHandler(requestError)
        }
        
    }
var attachMenuCallCount = 0
public var attachMenuHandler: (() -> ())?
public func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
var modeChildListenerSetCallCount = 0
var underlyingModeChildListener: ModeChildListener? = nil
public var modeChildListener: ModeChildListener? {
        get {
            return underlyingModeChildListener
        }
        set {
            underlyingModeChildListener = newValue
            modeChildListenerSetCallCount += 1
        }
    }
var isActiveSetCallCount = 0
var underlyingIsActive: Bool = false
public var isActive: Bool {
        get {
            return underlyingIsActive
        }
        set {
            underlyingIsActive = newValue
            isActiveSetCallCount += 1
        }
    }
private var isActiveStreamSubjectKind = 0
var isActiveStreamSubjectSetCallCount = 0
var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamReplaySubject = ReplaySubject<Bool>.create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
var isActiveStreamRxSubject: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
public var isActiveStream: Observable<Bool> {
        get {
            if isActiveStreamSubjectKind == 0 {
                return isActiveStreamSubject
            } else if isActiveStreamSubjectKind == 1 {
                return isActiveStreamBehaviorSubject
            } else if isActiveStreamSubjectKind == 2 {
                return isActiveStreamReplaySubject
            } else {
                return isActiveStreamRxSubject
            }
        }
        set {
            if let val = newValue as? PublishSubject<Bool> {
                isActiveStreamSubject = val
                isActiveStreamSubjectKind = 0
            } else if let val = newValue as? BehaviorSubject<Bool> {
                isActiveStreamBehaviorSubject = val
                isActiveStreamSubjectKind = 1
            } else if let val = newValue as? ReplaySubject<Bool> {
                isActiveStreamReplaySubject = val
                isActiveStreamSubjectKind = 2
            } else {
                isActiveStreamRxSubject = newValue
                isActiveStreamSubjectKind = 3
            }
        }
    }
var activateCallCount = 0
public var activateHandler: (() -> ())?
public func activate()  {
        activateCallCount += 1
    
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
var deactivateCallCount = 0
public var deactivateHandler: (() -> ())?
public func deactivate()  {
        deactivateCallCount += 1
    
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
var closeModalCallCount = 0
public var closeModalHandler: (() -> ())?
public func closeModal()  {
        closeModalCallCount += 1
    
        if let closeModalHandler = closeModalHandler {
            closeModalHandler()
        }
        
    }
var attachEatsWebCallCount = 0
public var attachEatsWebHandler: ((ViewableRouting) -> ())?
public func attachEatsWeb(eatsWebRouter: ViewableRouting)  {
        attachEatsWebCallCount += 1
    
        if let attachEatsWebHandler = attachEatsWebHandler {
            attachEatsWebHandler(eatsWebRouter)
        }
        
    }
var detachEatsWebCallCount = 0
public var detachEatsWebHandler: (() -> ())?
public func detachEatsWeb()  {
        detachEatsWebCallCount += 1
    
        if let detachEatsWebHandler = detachEatsWebHandler {
            detachEatsWebHandler()
        }
        
    }
var onTripCallCount = 0
public var onTripHandler: (() -> (Observable<(RideActionableItem, Bool)>))?
public func onTrip() -> Observable<(RideActionableItem, Bool)> {
        onTripCallCount += 1
    
        if let onTripHandler = onTripHandler {
            return onTripHandler()
        }
        return Observable.empty()
    }
var waitForRequestCallCount = 0
public var waitForRequestHandler: (() -> (Observable<(RequestActionableItem, ())>))?
public func waitForRequest() -> Observable<(RequestActionableItem, ())> {
        waitForRequestCallCount += 1
    
        if let waitForRequestHandler = waitForRequestHandler {
            return waitForRequestHandler()
        }
        return Observable.empty()
    }
var waitForTripCallCount = 0
public var waitForTripHandler: (() -> (Observable<(TripActionableItem, ())>))?
public func waitForTrip() -> Observable<(TripActionableItem, ())> {
        waitForTripCallCount += 1
    
        if let waitForTripHandler = waitForTripHandler {
            return waitForTripHandler()
        }
        return Observable.empty()
    }
}

class ProductBadgeNotificationStateShowingMock: ProductBadgeNotificationStateShowing {

    

    init() {

    }
        
    var setBadgeNotificationStateCallCount = 0
    var setBadgeNotificationStateHandler: ((ProductBadgeNotificationState) -> ())?
    func setBadgeNotificationState(state: ProductBadgeNotificationState)  {
        setBadgeNotificationStateCallCount += 1
    
        if let setBadgeNotificationStateHandler = setBadgeNotificationStateHandler {
            setBadgeNotificationStateHandler(state)
        }
        
    }
    
    var productViewModelSetCallCount = 0
    var underlyingProductViewModel: ProductViewModel? = nil
    var productViewModel: ProductViewModel? {
        get {
            return underlyingProductViewModel
        }
        set {
            underlyingProductViewModel = newValue
            productViewModelSetCallCount += 1
        }
    }
    
    var productBadgeNotificationStreamInfoSetCallCount = 0
    var underlyingProductBadgeNotificationStreamInfo: ProductBadgeNotificationStateStreamPair? = nil
    var productBadgeNotificationStreamInfo: ProductBadgeNotificationStateStreamPair? {
        get {
            return underlyingProductBadgeNotificationStreamInfo
        }
        set {
            underlyingProductBadgeNotificationStreamInfo = newValue
            productBadgeNotificationStreamInfoSetCallCount += 1
        }
    }
}

class HomePresentableMock: HomePresentable {

    
    init() {}
    init(destinationEntryEdgeViewsHidden: Bool = false) {
        self.destinationEntryEdgeViewsHidden = destinationEntryEdgeViewsHidden
    }
        
    var listenerSetCallCount = 0
    var underlyingListener: HomePresenterListener? = nil
    var listener: HomePresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var presentDestinationEntryCallCount = 0
    var presentDestinationEntryHandler: (() -> ())?
    func presentDestinationEntry()  {
        presentDestinationEntryCallCount += 1
    
        if let presentDestinationEntryHandler = presentDestinationEntryHandler {
            presentDestinationEntryHandler()
        }
        
    }
    
    var presentNoGPSExperienceCallCount = 0
    var presentNoGPSExperienceHandler: (() -> ())?
    func presentNoGPSExperience()  {
        presentNoGPSExperienceCallCount += 1
    
        if let presentNoGPSExperienceHandler = presentNoGPSExperienceHandler {
            presentNoGPSExperienceHandler()
        }
        
    }
    
    var presentLocationEditorEntryPluginCallCount = 0
    var presentLocationEditorEntryPluginHandler: ((HomeV1LocationEditorEntryViewable) -> ())?
    func presentLocationEditorEntryPlugin(view: HomeV1LocationEditorEntryViewable)  {
        presentLocationEditorEntryPluginCallCount += 1
    
        if let presentLocationEditorEntryPluginHandler = presentLocationEditorEntryPluginHandler {
            presentLocationEditorEntryPluginHandler(view)
        }
        
    }
    
    var dismissNoGPSExperience_deprecatedCallCount = 0
    var dismissNoGPSExperience_deprecatedHandler: (() -> ())?
    func dismissNoGPSExperience_deprecated()  {
        dismissNoGPSExperience_deprecatedCallCount += 1
    
        if let dismissNoGPSExperience_deprecatedHandler = dismissNoGPSExperience_deprecatedHandler {
            dismissNoGPSExperience_deprecatedHandler()
        }
        
    }
    
    var destinationEntryEdgeViewsHiddenSetCallCount = 0
    var underlyingDestinationEntryEdgeViewsHidden: Bool = false
    var destinationEntryEdgeViewsHidden: Bool {
        get {
            return underlyingDestinationEntryEdgeViewsHidden
        }
        set {
            underlyingDestinationEntryEdgeViewsHidden = newValue
            destinationEntryEdgeViewsHiddenSetCallCount += 1
        }
    }
    
    var acceleratorsDidUpdateCallCount = 0
    var acceleratorsDidUpdateHandler: ((Bool) -> ())?
    func acceleratorsDidUpdate(available: Bool)  {
        acceleratorsDidUpdateCallCount += 1
    
        if let acceleratorsDidUpdateHandler = acceleratorsDidUpdateHandler {
            acceleratorsDidUpdateHandler(available)
        }
        
    }
    
    var updateDimmingCallCount = 0
    var updateDimmingHandler: ((CGFloat, Bool) -> ())?
    func updateDimming(to opacity: CGFloat, allowsInteraction: Bool)  {
        updateDimmingCallCount += 1
    
        if let updateDimmingHandler = updateDimmingHandler {
            updateDimmingHandler(opacity, allowsInteraction)
        }
        
    }
    
    var hideFeedCallCount = 0
    var hideFeedHandler: (((@escaping () -> ()) -> ()) -> ())?
    func hideFeed(andPerform actions: (@escaping () -> ()) -> ())  {
        hideFeedCallCount += 1
    
        if let hideFeedHandler = hideFeedHandler {
            hideFeedHandler(actions)
        }
        
    }
}

class ConfirmationPresentableMock: ConfirmationPresentable {

    

    init() {

    }
        
    var didTapDestinationEntryCallCount = 0
    var didTapDestinationEntryHandler: ((ConfirmationViewControllable) -> ())?
    func didTapDestinationEntry(confirmationViewController: ConfirmationViewControllable)  {
        didTapDestinationEntryCallCount += 1
    
        if let didTapDestinationEntryHandler = didTapDestinationEntryHandler {
            didTapDestinationEntryHandler(confirmationViewController)
        }
        
    }
    
    var didTapBackToUberHomeCallCount = 0
    var didTapBackToUberHomeHandler: (() -> ())?
    func didTapBackToUberHome()  {
        didTapBackToUberHomeCallCount += 1
    
        if let didTapBackToUberHomeHandler = didTapBackToUberHomeHandler {
            didTapBackToUberHomeHandler()
        }
        
    }
    
    var listenerSetCallCount = 0
    var underlyingListener: ConfirmationPresenterListener? = nil
    var listener: ConfirmationPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var showDestinationEntryCallCount = 0
    var showDestinationEntryHandler: (() -> ())?
    func showDestinationEntry()  {
        showDestinationEntryCallCount += 1
    
        if let showDestinationEntryHandler = showDestinationEntryHandler {
            showDestinationEntryHandler()
        }
        
    }
    
    var dismissDestinationEntryCallCount = 0
    var dismissDestinationEntryHandler: (() -> ())?
    func dismissDestinationEntry()  {
        dismissDestinationEntryCallCount += 1
    
        if let dismissDestinationEntryHandler = dismissDestinationEntryHandler {
            dismissDestinationEntryHandler()
        }
        
    }
    
    var showFirstTimeUserExperienceCallCount = 0
    var showFirstTimeUserExperienceHandler: ((Bool) -> ())?
    func showFirstTimeUserExperience(dismissOnCalloutTap: Bool)  {
        showFirstTimeUserExperienceCallCount += 1
    
        if let showFirstTimeUserExperienceHandler = showFirstTimeUserExperienceHandler {
            showFirstTimeUserExperienceHandler(dismissOnCalloutTap)
        }
        
    }
    
    var dismissFirstTimeUserExperienceCallCount = 0
    var dismissFirstTimeUserExperienceHandler: (() -> ())?
    func dismissFirstTimeUserExperience()  {
        dismissFirstTimeUserExperienceCallCount += 1
    
        if let dismissFirstTimeUserExperienceHandler = dismissFirstTimeUserExperienceHandler {
            dismissFirstTimeUserExperienceHandler()
        }
        
    }
    
    var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
    
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }
    
    var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
    
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }
    
    var updateRideContextEntryTypeCallCount = 0
    var updateRideContextEntryTypeHandler: ((RideContextEntryType) -> ())?
    func updateRideContextEntryType(_ type: RideContextEntryType)  {
        updateRideContextEntryTypeCallCount += 1
    
        if let updateRideContextEntryTypeHandler = updateRideContextEntryTypeHandler {
            updateRideContextEntryTypeHandler(type)
        }
        
    }
var canShowContentCallCount = 0
public var canShowContentHandler: ((ProductOptionsItemButtonViewControllable, ProductOptionsItemContentViewControllable) -> ())?
public func canShowContent(buttonViewController: ProductOptionsItemButtonViewControllable, contentViewController: ProductOptionsItemContentViewControllable)  {
        canShowContentCallCount += 1
    
        if let canShowContentHandler = canShowContentHandler {
            canShowContentHandler(buttonViewController, contentViewController)
        }
        
    }
var canDismissContentCallCount = 0
public var canDismissContentHandler: ((ProductOptionsItemButtonViewControllable, ProductOptionsItemContentViewControllable) -> ())?
public func canDismissContent(buttonViewController: ProductOptionsItemButtonViewControllable, contentViewController: ProductOptionsItemContentViewControllable)  {
        canDismissContentCallCount += 1
    
        if let canDismissContentHandler = canDismissContentHandler {
            canDismissContentHandler(buttonViewController, contentViewController)
        }
        
    }
}

public class ProductSelectionTooltipContextProvidingMock: ProductSelectionTooltipContextProviding {

    

    public init() {

    }
        
    var selectedProductIdSetCallCount = 0
    var underlyingSelectedProductId: ProductId? = nil
    public var selectedProductId: ProductId? {
        get {
            return underlyingSelectedProductId
        }
        set {
            underlyingSelectedProductId = newValue
            selectedProductIdSetCallCount += 1
        }
    }
}

class RideViewControllableMock: RideViewControllable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }
        
    var embedViewControllerCallCount = 0
    var embedViewControllerHandler: ((UIViewController) -> ())?
    func embedViewController(viewController: UIViewController)  {
        embedViewControllerCallCount += 1
    
        if let embedViewControllerHandler = embedViewControllerHandler {
            embedViewControllerHandler(viewController)
        }
        
    }
    
    var pushNavigationViewControllerWithViewControllerCallCount = 0
    var pushNavigationViewControllerWithViewControllerHandler: ((UIViewController, Bool, (() -> ())?) -> ())?
    func pushNavigationViewControllerWithViewController(viewController: UIViewController, animated flag: Bool, completion: (() -> ())?)  {
        pushNavigationViewControllerWithViewControllerCallCount += 1
    
        if let pushNavigationViewControllerWithViewControllerHandler = pushNavigationViewControllerWithViewControllerHandler {
            pushNavigationViewControllerWithViewControllerHandler(viewController, flag, completion)
        }
        
    }
    
    var presentModalCallCount = 0
    var presentModalHandler: ((ViewControllable) -> ())?
    func presentModal(viewController: ViewControllable)  {
        presentModalCallCount += 1
    
        if let presentModalHandler = presentModalHandler {
            presentModalHandler(viewController)
        }
        
    }
    
    var dismissModalCallCount = 0
    var dismissModalHandler: ((Bool, (() -> ())?) -> ())?
    func dismissModal(animated: Bool, completion: (() -> ())?)  {
        dismissModalCallCount += 1
    
        if let dismissModalHandler = dismissModalHandler {
            dismissModalHandler(animated, completion)
        }
        
    }
var uiviewControllerSetCallCount = 0
var underlyingUiviewController: UIViewController = UIViewController()
public var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
var transitionFromViewControllerCallCount = 0
public var transitionFromViewControllerHandler: ((UIViewController?, UIViewController?, UIViewControllerAnimatedTransitioning?, TransitionContext, CachedExperimenting?) -> ())?
public func transitionFromViewController(_ fromViewController: UIViewController?, toViewController: UIViewController?, animator: UIViewControllerAnimatedTransitioning?, context: TransitionContext, cachedExperiments: CachedExperimenting?)  {
        transitionFromViewControllerCallCount += 1
    
        if let transitionFromViewControllerHandler = transitionFromViewControllerHandler {
            transitionFromViewControllerHandler(fromViewController, toViewController, animator, context, cachedExperiments)
        }
        
    }
}

class ProductBadgeNotificationManagingMock: ProductBadgeNotificationManaging {

    

    init() {

    }
        
    var setActiveCallCount = 0
    var setActiveHandler: ((Bool, ProductBadgeNotificationStateShowing) -> ())?
    func setActive(_ isActive: Bool, notificationShowing: ProductBadgeNotificationStateShowing)  {
        setActiveCallCount += 1
    
        if let setActiveHandler = setActiveHandler {
            setActiveHandler(isActive, notificationShowing)
        }
        
    }
}

class ConfirmationSlidableMock: ConfirmationSlidable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
}

class ProductSelectionObservabilityManagerViewListenerMock: ProductSelectionObservabilityManagerViewListener {

    
    init() {}
    init(currentState: ProductSelectionViewState) {
        self.currentState = currentState
    }
        
    var currentStateSetCallCount = 0
    var underlyingCurrentState: ProductSelectionViewState! 
    var currentState: ProductSelectionViewState {
        get {
            return underlyingCurrentState
        }
        set {
            underlyingCurrentState = newValue
            currentStateSetCallCount += 1
        }
    }
    
    var viewModelForCellCallCount = 0
    var viewModelForCellHandler: ((IndexPath) -> (ProductSelectionCellViewModel?))?
    func viewModelForCell(at indexPath: IndexPath) -> ProductSelectionCellViewModel? {
        viewModelForCellCallCount += 1
    
        if let viewModelForCellHandler = viewModelForCellHandler {
            return viewModelForCellHandler(indexPath)
        }
        return nil
    }
    
    var productCellCallCount = 0
    var productCellHandler: ((IndexPath) -> (ProductCell?))?
    func productCell(at indexPath: IndexPath) -> ProductCell? {
        productCellCallCount += 1
    
        if let productCellHandler = productCellHandler {
            return productCellHandler(indexPath)
        }
        return nil
    }
}

class MenuBuilderFactoryMock: MenuBuilderFactory {

    

    init() {

    }
        
    var getMenuBuilderCallCount = 0
    var getMenuBuilderHandler: ((String?) -> (MenuBuildable))?
    func getMenuBuilder(_ landingUrl: String?) -> MenuBuildable {
        getMenuBuilderCallCount += 1
    
        if let getMenuBuilderHandler = getMenuBuilderHandler {
            return getMenuBuilderHandler(landingUrl)
        }
        return MenuBuildableMock()
    }
}

class MainBuilderFactoryMock: MainBuilderFactory {

    

    init() {

    }
        
    var getMainBuilderCallCount = 0
    var getMainBuilderHandler: ((Session) -> (MainBuildable))?
    func getMainBuilder(_ session: Session) -> MainBuildable {
        getMainBuilderCallCount += 1
    
        if let getMainBuilderHandler = getMainBuilderHandler {
            return getMainBuilderHandler(session)
        }
        return MainBuildableMock()
    }
}

class MenuBuildableMock: MenuBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (MenuRouting))?
    func build() -> MenuRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return MenuRoutingMock()
    }
}

class ConfirmationBuildableV2Mock: ConfirmationBuildableV2 {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((ConfirmationListenerV2) -> (ConfirmationRoutingV2))?
    func build(withListener listener: ConfirmationListenerV2) -> ConfirmationRoutingV2 {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ConfirmationRoutingV2Mock()
    }
}

class ProductSelectionPresentableListenerV2Mock: ProductSelectionPresentableListenerV2 {

    

    init() {

    }
        
    var currentlySelectedIdSetCallCount = 0
    var underlyingCurrentlySelectedId: ProductItemId? = nil
    var currentlySelectedId: ProductItemId? {
        get {
            return underlyingCurrentlySelectedId
        }
        set {
            underlyingCurrentlySelectedId = newValue
            currentlySelectedIdSetCallCount += 1
        }
    }
    
    var didSelectProductItemIdCallCount = 0
    var didSelectProductItemIdHandler: ((ProductItemId, ProductSelectionViewState) -> ())?
    func didSelectProductItemId(_ productItemId: ProductItemId, viewState: ProductSelectionViewState)  {
        didSelectProductItemIdCallCount += 1
    
        if let didSelectProductItemIdHandler = didSelectProductItemIdHandler {
            didSelectProductItemIdHandler(productItemId, viewState)
        }
        
    }
    
    var didUpdateRecommendedCompareTransitionProgressCallCount = 0
    var didUpdateRecommendedCompareTransitionProgressHandler: (() -> ())?
    func didUpdateRecommendedCompareTransitionProgress()  {
        didUpdateRecommendedCompareTransitionProgressCallCount += 1
    
        if let didUpdateRecommendedCompareTransitionProgressHandler = didUpdateRecommendedCompareTransitionProgressHandler {
            didUpdateRecommendedCompareTransitionProgressHandler()
        }
        
    }
    
    var didUpdateAnchorPointValuesCallCount = 0
    var didUpdateAnchorPointValuesHandler: (() -> ())?
    func didUpdateAnchorPointValues()  {
        didUpdateAnchorPointValuesCallCount += 1
    
        if let didUpdateAnchorPointValuesHandler = didUpdateAnchorPointValuesHandler {
            didUpdateAnchorPointValuesHandler()
        }
        
    }
    
    var didSwitchToRecommendedViewStateCallCount = 0
    var didSwitchToRecommendedViewStateHandler: (() -> ())?
    func didSwitchToRecommendedViewState()  {
        didSwitchToRecommendedViewStateCallCount += 1
    
        if let didSwitchToRecommendedViewStateHandler = didSwitchToRecommendedViewStateHandler {
            didSwitchToRecommendedViewStateHandler()
        }
        
    }
    
    var didSwitchToCompareViewStateCallCount = 0
    var didSwitchToCompareViewStateHandler: (() -> ())?
    func didSwitchToCompareViewState()  {
        didSwitchToCompareViewStateCallCount += 1
    
        if let didSwitchToCompareViewStateHandler = didSwitchToCompareViewStateHandler {
            didSwitchToCompareViewStateHandler()
        }
        
    }
    
    var bindCallCount = 0
    var bindHandler: ((ProductCell, ProductCollectionViewCellDisplayable) -> ())?
    func bind(productCell: ProductCell, viewCell: ProductCollectionViewCellDisplayable)  {
        bindCallCount += 1
    
        if let bindHandler = bindHandler {
            bindHandler(productCell, viewCell)
        }
        
    }
    
    var unbindCallCount = 0
    var unbindHandler: ((ProductCell) -> ())?
    func unbind(productCell: ProductCell)  {
        unbindCallCount += 1
    
        if let unbindHandler = unbindHandler {
            unbindHandler(productCell)
        }
        
    }
}

class SelectedProductBuildableMock: SelectedProductBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((SelectedProductListener, ProductItemId?) -> (SelectedProductRouting))?
    func build(withListener listener: SelectedProductListener, productItemId: ProductItemId?) -> SelectedProductRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener, productItemId)
        }
        return SelectedProductRoutingMock()
    }
}

class ProductSelectionBuildableV2Mock: ProductSelectionBuildableV2 {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((ProductSelectionListenerV2) -> (ProductSelectionRoutingV2))?
    func build(withListener listener: ProductSelectionListenerV2) -> ProductSelectionRoutingV2 {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ProductSelectionRoutingV2Mock()
    }
}

class ProductSelectionBuildableMock: ProductSelectionBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ProductSelectionRouting))?
    func build() -> ProductSelectionRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ProductSelectionRoutingMock()
    }
}

class HomeBuildableMock: HomeBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (HomeRouting))?
    func build() -> HomeRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return HomeRoutingMock()
    }
}

class DestinationPromptViewListenerMock: DestinationPromptViewListener {

    

    init() {

    }
        
    var didTapLocationEditorEntryButtonCallCount = 0
    var didTapLocationEditorEntryButtonHandler: (() -> ())?
    func didTapLocationEditorEntryButton()  {
        didTapLocationEditorEntryButtonCallCount += 1
    
        if let didTapLocationEditorEntryButtonHandler = didTapLocationEditorEntryButtonHandler {
            didTapLocationEditorEntryButtonHandler()
        }
        
    }
}

class TripPresentableMock: TripPresentable {

    

    init() {

    }
        
    var listenerSetCallCount = 0
    var underlyingListener: TripPresenterListener? = nil
    var listener: TripPresenterListener? {
        get {
            return underlyingListener
        }
        set {
            underlyingListener = newValue
            listenerSetCallCount += 1
        }
    }
    
    var updateTripTitleCallCount = 0
    var updateTripTitleHandler: ((String?) -> ())?
    func updateTripTitle(_ title: String?)  {
        updateTripTitleCallCount += 1
    
        if let updateTripTitleHandler = updateTripTitleHandler {
            updateTripTitleHandler(title)
        }
        
    }
    
    var showCancellationErrorAlertCallCount = 0
    var showCancellationErrorAlertHandler: ((String, String) -> ())?
    func showCancellationErrorAlert(title: String, message: String)  {
        showCancellationErrorAlertCallCount += 1
    
        if let showCancellationErrorAlertHandler = showCancellationErrorAlertHandler {
            showCancellationErrorAlertHandler(title, message)
        }
        
    }
    
    var expandFeedIfNeededCallCount = 0
    var expandFeedIfNeededHandler: (() -> ())?
    func expandFeedIfNeeded()  {
        expandFeedIfNeededCallCount += 1
    
        if let expandFeedIfNeededHandler = expandFeedIfNeededHandler {
            expandFeedIfNeededHandler()
        }
        
    }
    
    var collapseFeedCallCount = 0
    var collapseFeedHandler: (() -> ())?
    func collapseFeed()  {
        collapseFeedCallCount += 1
    
        if let collapseFeedHandler = collapseFeedHandler {
            collapseFeedHandler()
        }
        
    }
    
    var handleDispatchingMapReadyCallCount = 0
    var handleDispatchingMapReadyHandler: (() -> ())?
    func handleDispatchingMapReady()  {
        handleDispatchingMapReadyCallCount += 1
    
        if let handleDispatchingMapReadyHandler = handleDispatchingMapReadyHandler {
            handleDispatchingMapReadyHandler()
        }
        
    }
    
    var displayAlertCallCount = 0
    var displayAlertHandler: ((String?, String) -> ())?
    func displayAlert(title: String?, message: String)  {
        displayAlertCallCount += 1
    
        if let displayAlertHandler = displayAlertHandler {
            displayAlertHandler(title, message)
        }
        
    }
    
    var showMapAlertControllerCallCount = 0
    var showMapAlertControllerHandler: ((Bool, ModularMapAlertOptions, @escaping (_ backgroundViews: [UIView]) -> BaseAlertController) -> ())?
    func showMapAlertController(dismissPresentedViewController: Bool, options: ModularMapAlertOptions, alertControllerFactory: @escaping (_ backgroundViews: [UIView]) -> BaseAlertController)  {
        showMapAlertControllerCallCount += 1
    
        if let showMapAlertControllerHandler = showMapAlertControllerHandler {
            showMapAlertControllerHandler(dismissPresentedViewController, options, alertControllerFactory)
        }
        
    }
    
    var presentToastCallCount = 0
    var presentToastHandler: ((UIViewController) -> ())?
    func presentToast(_ toast: UIViewController)  {
        presentToastCallCount += 1
    
        if let presentToastHandler = presentToastHandler {
            presentToastHandler(toast)
        }
        
    }
    
    var dismissPresentedModalViewControllersCallCount = 0
    var dismissPresentedModalViewControllersHandler: (() -> ())?
    func dismissPresentedModalViewControllers()  {
        dismissPresentedModalViewControllersCallCount += 1
    
        if let dismissPresentedModalViewControllersHandler = dismissPresentedModalViewControllersHandler {
            dismissPresentedModalViewControllersHandler()
        }
        
    }
}

class AlertableConfirmationSlidableMock: AlertableConfirmationSlidable {

    
    init() {}
    init(uiviewController: UIViewController = UIViewController(), slidableVisualContentHeight: CGFloat = 0.0, presentationAnimation: ConfirmationSlidableAnimation, dismissalAnimation: ConfirmationSlidableAnimation, requiredViewState: ConfirmationViewState, topAnchor: ConfirmationSlidableTopAnchor, bottomAnchor: ConfirmationSlidableBottomAnchor, slidableHeight: CGFloat = 0.0) {
        self.uiviewController = uiviewController
        self.slidableVisualContentHeight = slidableVisualContentHeight
        self.presentationAnimation = presentationAnimation
        self.dismissalAnimation = dismissalAnimation
        self.requiredViewState = requiredViewState
        self.topAnchor = topAnchor
        self.bottomAnchor = bottomAnchor
        self.slidableHeight = slidableHeight
    }
        
    var uiviewControllerSetCallCount = 0
    var underlyingUiviewController: UIViewController = UIViewController()
    var uiviewController: UIViewController {
        get {
            return underlyingUiviewController
        }
        set {
            underlyingUiviewController = newValue
            uiviewControllerSetCallCount += 1
        }
    }
    
    var slidableVisualContentHeightSetCallCount = 0
    var underlyingSlidableVisualContentHeight: CGFloat = 0.0
    var slidableVisualContentHeight: CGFloat {
        get {
            return underlyingSlidableVisualContentHeight
        }
        set {
            underlyingSlidableVisualContentHeight = newValue
            slidableVisualContentHeightSetCallCount += 1
        }
    }
    
    var presentationAnimationSetCallCount = 0
    var underlyingPresentationAnimation: ConfirmationSlidableAnimation! 
    var presentationAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingPresentationAnimation
        }
        set {
            underlyingPresentationAnimation = newValue
            presentationAnimationSetCallCount += 1
        }
    }
    
    var dismissalAnimationSetCallCount = 0
    var underlyingDismissalAnimation: ConfirmationSlidableAnimation! 
    var dismissalAnimation: ConfirmationSlidableAnimation {
        get {
            return underlyingDismissalAnimation
        }
        set {
            underlyingDismissalAnimation = newValue
            dismissalAnimationSetCallCount += 1
        }
    }
    
    var requiredViewStateSetCallCount = 0
    var underlyingRequiredViewState: ConfirmationViewState! 
    var requiredViewState: ConfirmationViewState {
        get {
            return underlyingRequiredViewState
        }
        set {
            underlyingRequiredViewState = newValue
            requiredViewStateSetCallCount += 1
        }
    }
    
    var willSlideUpCallCount = 0
    var willSlideUpHandler: (() -> ())?
    func willSlideUp()  {
        willSlideUpCallCount += 1
    
        if let willSlideUpHandler = willSlideUpHandler {
            willSlideUpHandler()
        }
        
    }
    
    var didSlideUpCallCount = 0
    var didSlideUpHandler: (() -> ())?
    func didSlideUp()  {
        didSlideUpCallCount += 1
    
        if let didSlideUpHandler = didSlideUpHandler {
            didSlideUpHandler()
        }
        
    }
    
    var willSlideDownCallCount = 0
    var willSlideDownHandler: (() -> ())?
    func willSlideDown()  {
        willSlideDownCallCount += 1
    
        if let willSlideDownHandler = willSlideDownHandler {
            willSlideDownHandler()
        }
        
    }
    
    var didSlideDownCallCount = 0
    var didSlideDownHandler: (() -> ())?
    func didSlideDown()  {
        didSlideDownCallCount += 1
    
        if let didSlideDownHandler = didSlideDownHandler {
            didSlideDownHandler()
        }
        
    }
    
    var didTapLeadingButtonCallCount = 0
    var didTapLeadingButtonHandler: (() -> ())?
    func didTapLeadingButton()  {
        didTapLeadingButtonCallCount += 1
    
        if let didTapLeadingButtonHandler = didTapLeadingButtonHandler {
            didTapLeadingButtonHandler()
        }
        
    }
    
    var customLeadingButtonBehaviorSetCallCount = 0
    var underlyingCustomLeadingButtonBehavior: (() -> ())? = nil
    var customLeadingButtonBehavior: (() -> ())? {
        get {
            return underlyingCustomLeadingButtonBehavior
        }
        set {
            underlyingCustomLeadingButtonBehavior = newValue
            customLeadingButtonBehaviorSetCallCount += 1
        }
    }
    
    var customMapPaddingBottomInsetSetCallCount = 0
    var underlyingCustomMapPaddingBottomInset: CGFloat? = nil
    var customMapPaddingBottomInset: CGFloat? {
        get {
            return underlyingCustomMapPaddingBottomInset
        }
        set {
            underlyingCustomMapPaddingBottomInset = newValue
            customMapPaddingBottomInsetSetCallCount += 1
        }
    }
    
    var obscuredContentInsetsSetCallCount = 0
    var underlyingObscuredContentInsets: UIEdgeInsets? = nil
    var obscuredContentInsets: UIEdgeInsets? {
        get {
            return underlyingObscuredContentInsets
        }
        set {
            underlyingObscuredContentInsets = newValue
            obscuredContentInsetsSetCallCount += 1
        }
    }
    
    var topAnchorSetCallCount = 0
    var underlyingTopAnchor: ConfirmationSlidableTopAnchor! 
    var topAnchor: ConfirmationSlidableTopAnchor {
        get {
            return underlyingTopAnchor
        }
        set {
            underlyingTopAnchor = newValue
            topAnchorSetCallCount += 1
        }
    }
    
    var bottomAnchorSetCallCount = 0
    var underlyingBottomAnchor: ConfirmationSlidableBottomAnchor! 
    var bottomAnchor: ConfirmationSlidableBottomAnchor {
        get {
            return underlyingBottomAnchor
        }
        set {
            underlyingBottomAnchor = newValue
            bottomAnchorSetCallCount += 1
        }
    }
    
    var slidableHeightSetCallCount = 0
    var underlyingSlidableHeight: CGFloat = 0.0
    var slidableHeight: CGFloat {
        get {
            return underlyingSlidableHeight
        }
        set {
            underlyingSlidableHeight = newValue
            slidableHeightSetCallCount += 1
        }
    }
    
    var showAlertViewControllableCallCount = 0
    var showAlertViewControllableHandler: ((ConfirmationAlertViewControllable) -> ())?
    func showAlertViewControllable(_ alertViewControllable: ConfirmationAlertViewControllable)  {
        showAlertViewControllableCallCount += 1
    
        if let showAlertViewControllableHandler = showAlertViewControllableHandler {
            showAlertViewControllableHandler(alertViewControllable)
        }
        
    }
}

class ConfirmationBuildableMock: ConfirmationBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (ConfirmationRouting))?
    func build() -> ConfirmationRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ConfirmationRoutingMock()
    }
}

class HomeBuildableV2Mock: HomeBuildableV2 {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (HomeRoutingV2))?
    func build() -> HomeRoutingV2 {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return HomeRoutingV2Mock()
    }
}

class ProductViewModelUpdatableMock: ProductViewModelUpdatable {

    

    init() {

    }
    var updateFareViewModelCallCount = 0
public var updateFareViewModelHandler: ((ProductCellFareViewModel?, ProductItemId) -> ())?
public func updateFareViewModel(_ viewModel: ProductCellFareViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateFareViewModelCallCount += 1
    
        if let updateFareViewModelHandler = updateFareViewModelHandler {
            updateFareViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateCapacityViewModelCallCount = 0
public var updateCapacityViewModelHandler: ((ProductCellCapacityViewModel?, ProductItemId) -> ())?
public func updateCapacityViewModel(_ viewModel: ProductCellCapacityViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateCapacityViewModelCallCount += 1
    
        if let updateCapacityViewModelHandler = updateCapacityViewModelHandler {
            updateCapacityViewModelHandler(viewModel, productItemId)
        }
        
    }
var updatePromoViewModelCallCount = 0
public var updatePromoViewModelHandler: ((ProductCellPromoViewModel?, ProductItemId) -> ())?
public func updatePromoViewModel(_ viewModel: ProductCellPromoViewModel?, forProductItemId productItemId: ProductItemId)  {
        updatePromoViewModelCallCount += 1
    
        if let updatePromoViewModelHandler = updatePromoViewModelHandler {
            updatePromoViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateEtdViewModelCallCount = 0
public var updateEtdViewModelHandler: ((ProductCellEtdViewModel?, ProductItemId) -> ())?
public func updateEtdViewModel(_ viewModel: ProductCellEtdViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateEtdViewModelCallCount += 1
    
        if let updateEtdViewModelHandler = updateEtdViewModelHandler {
            updateEtdViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateTitleViewModelCallCount = 0
public var updateTitleViewModelHandler: ((ProductCellTitleViewModel?, ProductItemId) -> ())?
public func updateTitleViewModel(_ viewModel: ProductCellTitleViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateTitleViewModelCallCount += 1
    
        if let updateTitleViewModelHandler = updateTitleViewModelHandler {
            updateTitleViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateDescriptionViewModelCallCount = 0
public var updateDescriptionViewModelHandler: ((ProductCellDescriptionViewModel?, ProductItemId) -> ())?
public func updateDescriptionViewModel(_ viewModel: ProductCellDescriptionViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateDescriptionViewModelCallCount += 1
    
        if let updateDescriptionViewModelHandler = updateDescriptionViewModelHandler {
            updateDescriptionViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateSupplementaryViewModelCallCount = 0
public var updateSupplementaryViewModelHandler: ((ProductCellSupplementaryViewModel?, ProductItemId) -> ())?
public func updateSupplementaryViewModel(_ viewModel: ProductCellSupplementaryViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateSupplementaryViewModelCallCount += 1
    
        if let updateSupplementaryViewModelHandler = updateSupplementaryViewModelHandler {
            updateSupplementaryViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateIconViewModelCallCount = 0
public var updateIconViewModelHandler: ((ProductCellIconViewModel?, ProductItemId) -> ())?
public func updateIconViewModel(_ viewModel: ProductCellIconViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateIconViewModelCallCount += 1
    
        if let updateIconViewModelHandler = updateIconViewModelHandler {
            updateIconViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateRecommendationViewModelCallCount = 0
public var updateRecommendationViewModelHandler: ((ProductCellRecommendationViewModel?, ProductItemId) -> ())?
public func updateRecommendationViewModel(_ viewModel: ProductCellRecommendationViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateRecommendationViewModelCallCount += 1
    
        if let updateRecommendationViewModelHandler = updateRecommendationViewModelHandler {
            updateRecommendationViewModelHandler(viewModel, productItemId)
        }
        
    }
var updateFareExplainerViewModelCallCount = 0
public var updateFareExplainerViewModelHandler: ((ProductCellFareExplainerViewModel?, ProductItemId) -> ())?
public func updateFareExplainerViewModel(_ viewModel: ProductCellFareExplainerViewModel?, forProductItemId productItemId: ProductItemId)  {
        updateFareExplainerViewModelCallCount += 1
    
        if let updateFareExplainerViewModelHandler = updateFareExplainerViewModelHandler {
            updateFareExplainerViewModelHandler(viewModel, productItemId)
        }
        
    }
}

class TripInteractorListenerMock: TripInteractorListener {

    

    init() {

    }
        
    var pickupLocationUpdatedCallCount = 0
    var pickupLocationUpdatedHandler: ((CLLocationCoordinate2D, Date?) -> ())?
    func pickupLocationUpdated(locationCoordinate: CLLocationCoordinate2D, timestamp: Date?)  {
        pickupLocationUpdatedCallCount += 1
    
        if let pickupLocationUpdatedHandler = pickupLocationUpdatedHandler {
            pickupLocationUpdatedHandler(locationCoordinate, timestamp)
        }
        
    }
    
    var attachMenuCallCount = 0
    var attachMenuHandler: (() -> ())?
    func attachMenu()  {
        attachMenuCallCount += 1
    
        if let attachMenuHandler = attachMenuHandler {
            attachMenuHandler()
        }
        
    }
    
    var cancelTripCallCount = 0
    var cancelTripHandler: (() -> ())?
    func cancelTrip()  {
        cancelTripCallCount += 1
    
        if let cancelTripHandler = cancelTripHandler {
            cancelTripHandler()
        }
        
    }
    
    var didTripStateReachOnTripCallCount = 0
    var didTripStateReachOnTripHandler: (() -> ())?
    func didTripStateReachOnTrip()  {
        didTripStateReachOnTripCallCount += 1
    
        if let didTripStateReachOnTripHandler = didTripStateReachOnTripHandler {
            didTripStateReachOnTripHandler()
        }
        
    }
    
    var completeTripIfNeededCallCount = 0
    var completeTripIfNeededHandler: ((RiderUuid, TripUuid) -> ())?
    func completeTripIfNeeded(riderUUID: RiderUuid, tripUUID: TripUuid)  {
        completeTripIfNeededCallCount += 1
    
        if let completeTripIfNeededHandler = completeTripIfNeededHandler {
            completeTripIfNeededHandler(riderUUID, tripUUID)
        }
        
    }
}

class DualLocationEditorEntryViewListenerMock: DualLocationEditorEntryViewListener {

    

    init() {

    }
        
    var didTapLocationEditorEntryButtonCallCount = 0
    var didTapLocationEditorEntryButtonHandler: ((LocationEditorEntryButtonType) -> ())?
    func didTapLocationEditorEntryButton(type: LocationEditorEntryButtonType)  {
        didTapLocationEditorEntryButtonCallCount += 1
    
        if let didTapLocationEditorEntryButtonHandler = didTapLocationEditorEntryButtonHandler {
            didTapLocationEditorEntryButtonHandler(type)
        }
        
    }
}

class RideBuildableMock: RideBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (RideRouting))?
    func build() -> RideRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RideRoutingMock()
    }
}

class TripBuildableMock: TripBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (TripRouting))?
    func build() -> TripRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return TripRoutingMock()
    }
}

class ModeBuildableMock: ModeBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: ((ModeListener) -> (ModeRouting))?
    func build(withListener listener: ModeListener) -> ModeRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ModeRoutingMock()
    }
}

class MenuViewListenerMock: MenuViewListener {

    

    init() {

    }
        
    var didTapMenuHeaderCallCount = 0
    var didTapMenuHeaderHandler: (() -> ())?
    func didTapMenuHeader()  {
        didTapMenuHeaderCallCount += 1
    
        if let didTapMenuHeaderHandler = didTapMenuHeaderHandler {
            didTapMenuHeaderHandler()
        }
        
    }
}

class MainBuildableMock: MainBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (MainRouting))?
    func build() -> MainRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return MainRoutingMock()
    }
}

class RequestBuildableMock: RequestBuildable {

    

    init() {

    }
        
    var buildCallCount = 0
    var buildHandler: (() -> (RequestRouting))?
    func build() -> RequestRouting {
        buildCallCount += 1
    
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RequestRoutingMock()
    }
}

